# Elenco dei contatti di una azienda ed elenco delle aziende raggiungibili da una specifico contatto

in questo capitolo visualizzeremo l'index come elenco "related" sia in companies show che in contacts show.
Essendo una relazione many-to-many valida in entrambe le direzioni.




## Apriamo il branch "company_contact_maps index"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ccmi
~~~~~~~~




## Routes

Nel capitolo precedente abbiamo usato lo scaffold quindi abbiamo già le varie azioni e la chiamata su routes ** resources :company_contact_maps **. Semplicemente la sistemiamo meglio.

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
~~~~~~~~
Rails.application.routes.draw do

  #scope "(:locale)", locale: /en|it/ do
  
    #root 'homepage#show'
    root 'startpage#show'
    
    devise_for :users, controllers: { sessions: 'users/sessions' }
    resources :users
    #get 'users/show', as: :user_root # creates user_root_path (default path after sign_in)
    
    resources :global_settings, only: [:index]
    resources :companies
    resources :people
    #resources :select_relateds, only: [:index]
    resources :select_relateds
    resources :company_person_maps
    resources :contacts
    resources :company_contact_maps

    get "homepage/", to: "homepage#show"
    get 'startpage/show'
    get 'users/show'

    get 'mockup_authentication/login'
    get 'mockup_companies/index'
    get 'mockup_companies/show'
    get 'mockup_companies/edit'
    get 'mockup_companies/new'
    get 'mockup_company_person_maps/index'
    get 'mockup_company_person_maps/edit'
    get 'mockup_contacts/index'
    get 'mockup_contacts/show'
    get 'mockup_contacts/edit'
    get 'mockup_contacts/new'
    get 'mockup_favorites/index'
    get 'mockup_global_settings/index'
    get 'mockup_homepage/show'
    get 'mockup_people/index'
    get 'mockup_people/show'
    get 'mockup_people/edit'
    get 'mockup_people/new'
    get 'mockup_select_relateds/index'
    get 'mockups/test'
    get 'mockup_startpage/show'
    get 'testpages/page_a'
    get 'testpages/page_b'

    # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
  
  #end
end
~~~~~~~~




## Come approcciamo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> c = Company.find 1
irb> c.company_contact_maps
irb> c.company_contact_maps[0].summary
irb> c.company_contact_maps[0].contact.identifier

irb> c.contacts
irb> c.contacts[0].identifier
~~~~~~~~

Preparo un indice di contatti per quando sono su companies/show con related="contacts"
Invece l'indice di aziende per quando sono su contacts/show con related="companies" lo abbiamo già perché l'avevamo fatto per people
Sul controller di companies azione show visualizziamo @company.company_contact_maps
E sul controller di contacts azione show visualizziamo @contact.company_contact_maps




## index

Prepariamo un indice dinamico che sostituirà il partial mocks/company_contact_maps/index/_related_list sulle pagine companies show e contacts show

Il partial _index ha una chiamata if...then...else che visualizza la lista delle aziende se la chiamata è fatta da contacts/show con related="companies". Invece visualizza la lista dei contatti se la chiamata è fatta da companies/show con related="contacts".

{title=".../app/views/company_contact_maps/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="list-group left-pad right-pad">
  <% related_list.each do |company_contact_map| %>
    <%#= link_to edit_company_person_map_path(company_person_map.id), :class => "list-group-item" do %>
    <%= link_to url_for(h_front_params_path(path: "/company_contact_maps/#{company_contact_map.id}/edit")), :class => "list-group-item" do %>
    <%#= link_to "", :class => "list-group-item" do %>

      <p> <%= company_contact_map.summary %> </p>

      <% if params[:related] == "contacts" %>
        <%# unless company_person_map.favorite_id_person.blank? %>
          <!-- <span class="badge"><span class="glyphicon glyphicon-star"></span></span> -->
        <%# end %>
        <p><strong> <%= "#{company_contact_map.contact.medium}  #{company_contact_map.contact.identifier}"%> </strong></p>
      <% elsif params[:related] == "companies" %>
        <%# unless company_person_map.favorite_id_company.blank? %>
          <!-- <span class="badge"><span class="glyphicon glyphicon-star"></span></span> -->
        <%# end %>
        <p><strong> <%= "#{company_contact_map.company.name}"%> </strong></p>
        <p> <%= "#{company_contact_map.company.sector} #{company_contact_map.company.status} #{company_contact_map.company.corporate}"%> </p>
      <% else %>
        errore: probabilmente related = ""
      <% end %>

    <% end %> <!-- /link_to -->
  <% end %> <!-- /related_list.each -->
</div> <!-- /.list-group -->
~~~~~~~~

Aggiungiamo contacts sul companies_controller show

{title=".../app/controllers/companies_controller.rb", lang=ruby, line-numbers=on, starting-line-number=12}
~~~~~~~~
  # GET /companies/1
  # GET /companies/1.json
  def show
    # gestiamo l'elenco dei relateds
    case params[:related]
    when "favorites"
      @relateds = @company.favorites.page(params[:page]).per_page(3).order('created_at DESC')
      #@relateds = Favorite.all.page(params[:page]).per_page(6)
      @relateds_path = "favorites"
    when "people"
      #@relateds = @company.company_person_maps.all
      @relateds = @company.company_person_maps.search_people(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_person_maps"
    when "companies"
      # TODO
      @relateds = Company.all
    when "contacts"
      @relateds = @company.company_contact_maps.all.page(params[:page]).per_page(2)
      #@relateds = @company.company_contact_maps.search_contacts(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_contact_maps"
    else
      raise "Errore da gestire"
    end
  end
~~~~~~~~


verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps

![https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps](images/company_contact_maps/cpmaps_index/cpmaps.png)


https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en

![https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en](images/company_contact_maps/cpmaps_index/cpmaps_locale_en.png)


https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en&related=people

![https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en&related=people](images/company_contact_maps/cpmaps_index/cpmaps_related_people.png)


https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en&related=companies

![https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps?locale=en&related=companies](images/company_contact_maps/cpmaps_index/cpmaps_related_companies.png)


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add CompanyContactMap index"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ccmi:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ccmi
$ git branch -d ccmi
~~~~~~~~