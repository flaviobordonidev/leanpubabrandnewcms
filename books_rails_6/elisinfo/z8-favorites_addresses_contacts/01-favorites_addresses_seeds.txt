# Implementiamo i preferiti (favorites) per gli indirizzi

Abbiamo già creato la tabella favorites usando il Polimorfismo - POLYMORPHIC
Adesso lo usiamo per rendere favoriti degli indirizzi.




## Apriamo il branch "favorites addresses seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b fas
~~~~~~~~




## Creiamo la tabella generica Favorites 

Abbiamo già creato la tabella polimorfica "favorites"




## Internazionalizzazione I18n - dynamic

Abbiamo già implementato l'internazionalizzazione.




## Creiamo le associazioni polimorfiche

nel model **favorite** abbiamo già inserito l'associazione polimorfica nella sezione **== Relationships ===**

Aggiungiamo l'associazone polimorfica nella sezione **== Relationships ===** del model **address** 

{title=".../app/models/address.rb", lang=ruby, line-numbers=on, starting-line-number=13}
~~~~~~~~
  has_many :favorites, as: :favoritable
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "update models address with polimorphic favorite"
~~~~~~~~




## Popoliamo manualmente gli indirizzi favoriti

Usiamo la tabella favorites mettendo una descrizione sui campi "copy_..." ed associandola sia alla prima persona (Person.first) che alla prima azienda (Company.first). Inseriamo due nuovi preferiti sulla tabella favorites. Inoltre lo facciamo sia per l'italiano (la lingua impostata di default) che per l'inglese.

- Inseriamo la descrizione "Sede ufficio - Via Nazionale, 2 - Genova" alla prima persona (Person.first).
- Inseriamo la descrizione "Sede legale e operativa - Via Ripetta, 41b 03045 Gioiata la Renna - BO" alla prima azienda (Company.first).

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
irb> I18n.locale
irb> p = Person.first
irb> p.favorites.new(copy_normal: "indirizzo ufficio", copy_bold: "Via Nazionale, 2 - Genova" ).save
irb> p.favorites
irb> pf = p.favorites.last
irb> pf.update(copy_normal: "office address", copy_bold: "Via Nazionale, 2 - Genova", locale: :en)

irb> c = Company.first
irb> c.favorites.new(copy_normal: "Sede legale e operativa", copy_bold: "Via Ripetta, 41b 03045 Gioiata la Renna - BO" ).save
irb> c.favorites
irb> cf1 = c.favorites.last
irb> cf1.update(copy_normal: "Legal and operative office", copy_bold: "Via Ripetta, 41b 03045 Gioiata la Renna - BO", locale: :en)

irb> Favorite.all
irb> p.favorites
irb> c.favorites
~~~~~~~~


Per vedere l'altro lato dell'associazione non possiamo chiamare "pf.person" o "cf.company" perché sono creati dinamicamente a partire dalla stessa tabella polimorfica "favorites". Invece possiamo chiamare:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
irb> pf.favoritable
irb> cf1.favoritable
~~~~~~~~

Dal punto di vista del polimorfismo abbiamo finito.  


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add records address on favorites polymorphic"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.

Questo sarebbe sufficiente se favorites fosse un elemento "sganciato" da aggiungere alle varie tabelle (ad esempio un commento). Ma nel nostro caso dobbiamo registrare anche nella tabella addresses quale record è il preferito (ci basta un solo external id perché non dobbiamo distinguere se è della persona o dell'azienda come abbiamo dovuto fare su company_person_maps).

Per far questo ci manca la relazione uno-a-molti con addresses (una Persona <-> molte addresses preferite) inoltre (una Azienda <-> molte addresses preferite). 
Dobbiamo informare il corrispondente record di addresses che è un preferito della prima persona "Jhon Doe". Per far questo aggiungiamo la chiave esterna favorite_id alla tabella addresses. Ma dobbiamo anche informare il corrispondente record di addresses che è un preferito della prima azienda "ABC srl". Per far questo possiamo usare la stessa chiave esterna favorite_id perché non c'è una relazione molti-a-molti tra persone e indirizzi o tra aziende e indirizzi e quindi un indirizzo può appartenere ad una sola persona o azienda. Se lo stesso indirizzo appartiene sia alla persona che all'azienda creo due records differenti con lo stesso indirizzo. Ho un record duplicato ma questo non mi crea problemi.




## Aggiungiamo la chiave esterna "favorite_id" su addresses

Come abbiamo visto una sola chiave esterna mi è sufficiente.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddFavoriteFieldToAddresses favorite_id:integer
~~~~~~~~

{title="db/migrate/xxx_add_favorite_field_to_addresses.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddFavoriteFieldToAddresses < ActiveRecord::Migration[5.0]
  def change
    add_column :addresses, :favorite_id, :integer
  end
end
~~~~~~~~

eseguiamo il migrate.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
rake db:migrate
~~~~~~~~

Non creo la relazione uno-a-molti sui models perché per mostrare i valori sui view sfrutto i campi copy_normal e copy_bold e non ho necessità di fare query complesse che usano i preferiti. Quindi non creo nessuna relazione e gestisco manualmente (con il codice sul controller) sia la creazione/modifica/eliminazione di un record su favorites sia la relativa assegnazione dei valori su favorite_id.




## Aggiungiamo combo_box per favorite su view addresses/edit

Nella pagina addresses/edit non mi interessa sapere il valore di favorite_id ma solo se è o non è un preferito. Quindi attivo un combo box stile iphone in cui dichiaro se è un preferito o no. Per usare il combo box ho necessità di un campo boolean sulla tabella: **favorite_cb**

Poiché questo campo è legato alla presenza o meno di un valore su favorite_id posso usare degli attributi virtuali sul model (Virtual Attributes).
Il campo :favorite_cb di tipo boolean può essere sostituito da virtual attributes. Inseriamo il codice nella sezione **== Attributes ===**


{title=".../app/models/address.rb", lang=ruby, line-numbers=on, starting-line-number=11}
~~~~~~~~
  # virtual attributes ---------------------------------------------------------
  # setter method
  attr_writer :favorite_cb
  
  # getter method
  def favorite_cb
    #raise "summary: #{summary} - favorite_id: #{favorite_id} - id: #{id}"
    if favorite_id.blank?
      false
    else
      true
    end
  end
  #-----------------------------------------------------------------------------
~~~~~~~~




## Vediamo come funziona sulla console

In pratica faccio due passaggi:
1. assegno il nuovo preferito alla persona e salvo. (La persona deve avere già almeno un indrizzo associato)
    posso vedere sia **a.favorite_id** della tabella **addresses**
    sia **a.company.id** saltando dalla tabella **company_person_maps** alla tabella  **companies** e visualizzando l'**id** (da notare che in questo caso non ho "_" ma ho il punto "." tra **company** ed **id**)
    arrivato sulla tabella **companies** posso accedere anche al nome **company.name**
2. assegno l'id del nuovo preferito delle persona a company_person_maps favorite_id_person

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
>> p = Person.first
>> a1 = p.addresses.first
>> a1.addressable_id
    1
>> a1.addressable_type
    Person
>> a1.addressable.first_name
    Jhon

>> c = Company.first
>> a2 = c.addresses.first
>> a2.addressable_id
    1
>> a2.addressable_type
    Company
>> a2.addressable.name
    ABC srl

#rendiamo il primo indirizzo della persona un favorito:

>> f = p.favorites.new(copy_normal: "a1.address_title", copy_bold: a1.full_address)
>> f.save
>> f.id
    15
>> a1.favorite_id = f.id
>> a1
>> a1.save


#rendiamo il primo indirizzo della azienda un favorito:

>> f = c.favorites.new(copy_normal: "a2.address_title", copy_bold: a2.full_address)
>> f.save
>> f.id
    16
>> a2.favorite_id = f.id
>> a2
>> a2.save
~~~~~~~~


Questa procedura richiederebbe un commit/roll back come si fa con i pagamenti nell'e-commerce dove il carrello viene "svuotato" e la merce inviata solo se c'è il pagamento altrimenti si fa un roll-back di tutto il processo. Questo controllo al momento non lo facciamo ma è una miglioria che metteremo in un futuro refactoring.

Abbiamo finito ed ottenuto il nuovo preferito 15 sulla persona 1 (Jhon Doe) che ha i dati "indirizzo blabla" presi dal addresses 1. Inoltre abbiamo archiviato sul record addresses che è il preferito della persona 1. Cosa analoga è stata fatta per l'aziendo con nuovo preferito 16...


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add favorites addresses seeds"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku fas:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge fas
$ git branch -d fas
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
