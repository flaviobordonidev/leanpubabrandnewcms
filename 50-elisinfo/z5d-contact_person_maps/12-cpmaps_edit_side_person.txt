# Pagina di modifica associazione contatti-persone lato Persona

contact_people_maps/edit lato people in questo capitolo creiamo l'edit con i tabs:

- goto : per spostarsi al lato Contatto
- edit : per modificare la relazione del contatto per la persona x.
- delete : per distruggere la relazione tra la persona x ed il contatto (non vengono distrutte nè la persona nè il contatto ma la sola relazione)




## Apriamo il branch "contact_person_maps/edit"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cpme
~~~~~~~~




## Andiamo sulla parte EDIT

Copiamo il mock di contact_person_maps_edit ed implementiamo i render 

{title=".../app/views/contact_person_maps/edit.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container-fluid rear_mode">
	<div class="row">
		<div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active] == 'default' %>"><a href="#pane_goto" data-toggle="tab"><span class="glyphiconmy ico_goto"></span></a></li>
        <li class="<%= 'active' if params[:tab_active] == 'edit' %>"><a href="#pane_edit" data-toggle="tab"><span class="glyphiconmy ico_edit"></span></a></li>
        <li class="<%= 'active' if params[:tab_active] == 'delete' %>"><a href="#pane_delete" data-toggle="tab"><span class="glyphiconmy ico_delete"></span></a></li>
      </ul>
		</div><!-- /.col -->
		<div class="col-xs-3 col-sm-2 col-lg-1">
			<%= render 'button_close' %>
		</div> <!-- /.col -->
	</div> <!-- /.row -->
	<div class="row">
		<div class="col-xs-12">
			<div class="tab-content">
        <div id="pane_goto" class="tab-pane <%= 'active' if params[:tab_active] == 'default' %>">
					<div class="text-center bottom-pad">
						<h4>Vai a</h4>
					</div><!-- /.text-center -->
					<%= render 'tab_goto' %>
				</div><!-- /#pane_goto -->
        <div id="pane_edit" class="tab-pane <%= 'active' if params[:tab_active] == 'edit' %>">
					<div class="text-center bottom-pad">
						<h4>Modifica</h4>
					</div><!-- /.text-center -->
					<%= render 'form', contact_person_map: @contact_person_map %>
				</div><!-- /#pane_edit -->
        <div id="pane_delete" class="tab-pane <%= 'active' if params[:tab_active] == 'delete' %>">
					<div class="text-center bottom-pad">
						<h4>Elimina</h4>
					</div><!-- /.text-center -->
					<%= render 'tab_delete' %>
				</div><!-- /#pane_delete -->
			</div><!-- /.tab-content -->
		</div> <!-- /.col -->
	</div> <!-- /.row -->
</div> <!-- /.rear_mode -->
~~~~~~~~

il partial del pulsante di chiusura lo abbiamo già fatto a livello globale su ** .../app/views/application/_button_close **. Il pulsante di chiusura ci fa tornare alla pagina people/show. 

il partial del tab_goto. Sul tab goto c'è il solo pulsante con il contatto associato alla persona e se lo clicco mi sposto sulla pagina del contatto ed avrò nell'elenco related le persone associate. Detto in altre parole: Mi sposto sull'altro lato della relazione molti-a-molti companies <-> contacts.

Creo un nuovo partial con una condizione if...else...end in modo da spostarmi sull'altro lato della relazione molti-a-molti. In questo caso mi sposto dal lato persona (people/show) al lato contatto(contacts/show). 

{title="views/contact_person_maps/_tab_goto.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="list-group left-pad right-pad bottom-pad">
  <% if params[:last_front_controller] == "people" %>
    <%= link_to url_for(h_params_path(path: "/contacts/#{@contact_person_map.contact.id}", related: "people")), :class => "list-group-item" do %>
      <span class="glyphiconmy ico_contact right-pad"></span> <%= @contact_person_map.summary %>
      <div><%= "#{@contact_person_map.contact.medium} #{@contact_person_map.contact.identifier}" %></div>
    <% end %><!-- /link_to -->
  <% elsif params[:last_front_controller] == "contacts" %>
    <%= raise #TODO %>
  <% end %><!-- /if -->
</div> <!-- /.list-group -->
~~~~~~~~

Aggiorno git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add contact_person_maps/edit tab_goto side person"
~~~~~~~~




## tab edit (_form)

Sul tab edit ci sono i campi per modificare la descrizione e la possibilità di scegliere un nuovo contatto da associare alla persona. Invece del partial _tab_edit uso il partial _form che viene creato in automatico con lo scaffold. Questo per lasciare la ns applicazione il più vicino possibile alle convenzioni ed agli standards rails. 

Salvo i parametri che mi servono su dei campi nascosti. 

Inseriamo il pulsante che ci permetterà di cambiare il contatto associato alla persona. Lo mettiamo dentro un condizione if...else...end per distinguere se sono lato persona (e quindi cambio il contatto associato) o se sono lato contatto (e quindi cambio la persona associata). 

{title=".../app/views/company_contact_maps/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_for(contact_person_map, html: {class: 'form-horizontal left-pad right-pad bottom-pad'}) do |f| %>

  <!-- #pass-params: -->
  <%= hidden_field_tag(:locale, params[:locale]) %>
  <%= hidden_field_tag(:last_front_controller, params[:last_front_controller]) %>
  <%= hidden_field_tag(:last_front_action, params[:last_front_action]) %>
  <%= hidden_field_tag(:last_front_id, params[:last_front_id]) %>  
  <%= hidden_field_tag(:last_front_related, params[:last_front_related]) %>  
  <%= hidden_field_tag(:last_front_page, params[:last_front_page]) %>  
  <%= hidden_field_tag(:last_front_search, params[:last_front_search]) %>  
  <%= hidden_field_tag(:last_rear_controller, params[:last_rear_controller]) %>
  <%= hidden_field_tag(:last_rear_action, params[:last_rear_action]) %>
  <%= hidden_field_tag(:last_rear_id, params[:last_rear_id]) %>
  <%= hidden_field_tag(:last_rear_related, params[:last_rear_related]) %>
  <%= hidden_field_tag(:last_rear_page, params[:last_rear_page]) %>
  <%= hidden_field_tag(:last_rear_search, params[:last_rear_search]) %>
  <%= hidden_field_tag(:related, params[:related]) %>
  <%= hidden_field_tag(:page, 1) %>
  <%= hidden_field_tag(:search, "") %>
  <!-- /#pass-params: -->

  <div class="form-group">
    <div class="field">
      <%= f.label :summary, class: "control-label" %><br>
      <%= f.text_field :summary, class: "form-control" %>
      <span class="help-block"></span>
    </div><!-- /.field -->

    <% if params[:last_front_controller] == "people" %>
  
      <% if @contact_person_map.contact_id.blank? %>
        <div class="field">
          <%= f.label :contact_id, class: "control-label" %><br>
          <%= link_to url_for(h_rear_params_path(path: "/contacts")), :class => "list-group-item" do %>
            <span class="glyphiconmy ico_contact right-pad"></span>
            <%= "Scegli un contatto da inserire" %>
          <% end %>
        </div>      
      <% else %>
        <div class="field">
          <%= f.label :contact_id, class: "control-label" %><br>
          <%= link_to url_for(h_rear_params_path(path: "/contacts")), :class => "list-group-item" do %>
            <span class="glyphiconmy ico_contact right-pad"></span>
            <%= "#{@contact_person_map.contact.medium} #{@contact_person_map.contact.identifier}" %>
          <% end %><!-- /link_to -->
        </div><!-- /.field -->
      <% end %>

    <% elsif params[:last_front_controller] == "contacts" %>
    
        <%= raise "#TODO -- lato contact"  %>
        
    <% end %><!-- /if -->

    <div class="field">
      <%= f.label :person_id, class: "control-label" %><br>
      <%= f.text_field :person_id, class: "form-control" %>
    </div><!-- /.field -->

    <div class="field">
      <%= f.label :contact_id, class: "control-label" %><br>
      <%= f.text_field :contact_id, class: "form-control" %>
    </div><!-- /.field -->
    
  </div><!-- /.form-group -->

  <div class="actions">
    <%= f.submit "#{t "contact_person_map.edit.submit"}", class: "btn btn-primary btn-block" %>
  </div><!-- /.actions -->

<% end %><!-- /form_for -->
~~~~~~~~


Aggiorno l'azione **update** del controller **contact_person_maps_controller** per reinstradare sulla relativa people/show passando tutti i params[]. In pratica cambio una riga di codice: 

{title=".../app/controllers/contact_person_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=52}
~~~~~~~~
        #format.html { redirect_to @contact_person_map, notice: 'Contact person map was successfully updated.' }
        format.html { redirect_to url_for(view_context.h_params_path(path: "/#{params[:last_front_controller]}/#{params[:last_front_id]}", related: params[:last_front_related], page: params[:last_front_page], search: params[:last_front_search])), notice: 'Contact Person map was successfully updated..' }
~~~~~~~~

Questa riga di codice è sufficientemente generica da non aver bisogno di nessun cambio se non la descrizione finale ** notice: '...' **

Aggiorno git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add contact_person_maps/edit _form"
~~~~~~~~




## Scegliamo un diverso contatto associato alla persona

Cliccando sul pulsante del contatto sul tab_edit(form) di contact_person_maps/edit, si apre una nuova pagina con l'elenco di tutte i contatti dove possiamo scegliere un diverso contatto da associare. Per questa pagina uso la view contacts/index usando lo stile rear_view. Questa rear_view siccome è chiamata da un'altra rear_view non modifica minimamente i parametri passati sull'url ( usa l'helper h_params_path ). Questa pagina contacts#index è una pagina di ** terzo livello **. Che vuol dire terzo livello? Le pagine di primo livello sono le front_end (quelle bianche con in alto a destra il pulsante global_settings e senza il pulsante di chiusura). Le pagine di secondo livello sono le rear_view (quelle nere con in alto a destra il pulsante di chiusura) perché sono chiamate da quelle di primo livello, infatti è come se fossero finestre modali che possiamo chiudere per tornare alle pagine di primo livello. Le pagine di terzo livello sono aperte a partire dalle pagine di secondo livello. Le pagine di terzo livello hanno lo stesso stile rear_view di quelle di secondo livello (nere con in alto a destra il pulsante di chiusura) ma questa volta il pulsante di chiusura non torna alla pagina di front_end ma torna alla pagina rear_view di secondo livello.    




### Scegliamo un diverso contatto da associare

Dalla pagina della persona X (person/show) clicchiamo sul contatto collegato Y che ci apre contacts_person_map_params/edit. Sul tab_edit(form) avremo adess il link del contatto Y. Se vogliamo associare un contatto differente clicchiamo sul link e ne scegliamo un altro dalla pagina contacts/index.

{title=".../app/views/contacts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container-fluid rear_mode">

  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active].nil? or params[:tab_active] == 'list' %>">
          <%= link_to "#pane_list", "data-toggle" => "tab" do %>
            <%= content_tag :span,"", class: "glyphiconmy ico_list" %>
          <% end %>
        </li>
      </ul>
    </div><!-- /col -->
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%= render 'button_close_to_rear' %>
    </div> <!-- /col -->
  </div> <!-- /row -->

  <div class="row">
    <div class="col-xs-12">

      <div class="tab-content">
        <div id="pane_list" class="tab-pane active">
          <div class="text-center bottom-pad">
            <h4>Seleziona</h4>
          </div>          

          <div class="row">
            <div class="col-xs-10 col-sm-11 col-lg-11">
              <%= render 'related_search' %>
            </div> <!-- /col -->
            <div class="col-xs-2 col-sm-1 col-lg-1">
              <%= render 'related_button_new_instance', list_to_add: @contacts %>
            </div> <!-- /.col -->
          </div> <!-- /.row -->

          <div class="row">
            <div class="col-xs-12">

              <% if params[:last_rear_action] == "new" %>
                <div class="list-group left-pad right-pad">
                  <% @contacts.each do |contact| %>
                    <%= link_to url_for(h_params_path(path: "/#{params[:last_rear_controller]}/new", change_id: contact.id)), :class => "list-group-item" do %>
                      <p> <%= contact.medium %> </p>
                      <p><strong> <%= "#{contact.identifier}"%> </strong></p>
                    <% end %>
                  <% end %>
                </div>
              <% elsif params[:last_rear_action] == "edit" %>
                <div class="list-group left-pad right-pad">
                  <% @contacts.each do |contact| %>
                    <%= link_to url_for(h_params_path(path: "/#{params[:last_rear_controller]}/#{params[:last_rear_id]}/edit", change_id: contact.id, tab_active: "edit")), :class => "list-group-item" do %>
                      <p> <%= contact.medium %> </p>
                      <p><strong> <%= "#{contact.identifier}"%> </strong></p>
                    <% end %>
                  <% end %>
                </div>
              <% end %>
            </div> <!-- /.col -->
          </div> <!-- /.row -->

          <div class="row">
            <div class="col-xs-12">
              <div class="text-center">
                <%= render 'related_pagination', list_to_paginate: @contacts %>
              </div><!-- /.text-center -->
            </div><!-- /.col -->
          </div><!-- /.row -->
  
        </div><!-- /.tab-pane -->
      </div><!-- /.tab-content -->
    </div><!-- /.col -->
  </div><!-- /.row -->
</div><!-- /.rear_mode -->
~~~~~~~~


Il pulsante di chiusura **button_close_to_rear**,che riporta alla pagina di secondo livello (rear_view), continua a funzionare perché è stato creato il codice generico e flessibile 
** <%= link_to url_for(h_params_path(path: "/#{params[:last_rear_controller]}/#{params[:last_rear_id]}/edit", tab_active: "edit", page: params[:last_rear_page], search: params[:last_rear_search])), :class => "list-group-item" do %> **

Anche l'elenco viene visualizzato correttamente. Se clicchiamo su un link torniamo su contact_person_maps/edit e viene passato l'id del contatto scelto tramite il params[:change_id]. Nel prossimo paragrafo accettiamo l'id passato.




## Acquisiamo l'id del contatto

Sull'azione **edit** del controller **contact_person_maps** acquisiamo l'id che ci viene passato dalla selezione fatta sulla pagina di terzo livello (contacts/index)

{title=".../app/controllers/contact_person_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=20}
~~~~~~~~
  # GET /contact_person_maps/1/edit
  def edit
    if params[:change_id].present?
      if params[:last_front_controller] == "people"
        @contact_person_map.contact_id = params[:change_id]
      elsif params[:last_front_controller] == "contacts"
        @contact_person_map.people_id = params[:change_id]
      end
    end
  end
~~~~~~~~

sull'helper h_xxx_params_path abbiamo già aggiungiamo :change_id.

verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps

![https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps](images/company_person_maps/cpmaps_index/cpmaps.png)


sta funzionando quindi facciamo un commit

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add contact_person_maps/edit side person"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cpme:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cpme
$ git branch -d cpme
~~~~~~~~




## Backup su github

facciamo un backup del ns progetto su github:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
