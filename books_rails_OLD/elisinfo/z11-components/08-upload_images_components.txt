# Usiamo paperclip per importare file immagini (png o gif)

lo abbiamo già installato nei capitoli preceedenti. Quindi in questo capitolo saltiamo la parte dell'installazione.




## Apriamo il branch "Upload Images Components"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b uic
~~~~~~~~




## Aggiungiamo il campo image alla tabella components

Usiamo lo script di generazione di Paperclip per creare il migration.

A> Il nome della tabella va al SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate paperclip component image
~~~~~~~~

questo crea il migrate:

{title="db/migrate/xxx_add_attachment_image_to_components.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAttachmentImageToComponents < ActiveRecord::Migration
  def self.up
    change_table :components do |t|
      t.attachment :image
    end
  end

  def self.down
    remove_attachment :components, :image
  end
end
~~~~~~~~

è un migration che non è in stile rails 5 ma va benissimo ugualmente, quindi lo lasciamo così.

Come abbiamo già visto, Paperclip ha un suo proprio metodo **.attachment** che aggiunge alla tabella le seguenti colonne: 

* {attachment}_file_name
* {attachment}_file_size
* {attachment}_content_type
* {attachment}_updated_at

Aggiungiamo i campi/ le colonne al database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~




## Aggiungiamo paperclip image al model

Aggiungiamo l'informazione al modello di Component che il campo "image" è per file uploaded ** has_attached_file :image **. Questa parte di codice la inserisco nella sezione **# == Extensions ====** nella sottosezione **# ==== paperclip required**

{title=".../app/models/component.rb", lang=ruby, line-numbers=on, starting-line-number=10}
~~~~~~~~
  # == Extensions ===========================================================

  # ==== paperclip required
  has_attached_file :image, styles: { thumb: ["64x64!", :png] }
~~~~~~~~

abbiamo dato anche uno stile all'immagine dicendogli di caricarla come png e di scalare l'immagine a 64x64px facendo uno stretch e quindi senza mantenere le proporzioni.




## Aggiungiamo paperclip image al controller

Anche nel controller di components aggiungiamo il campo "image" nella white-list del massive assign (strong-parameters). [02:](#code-components-upload_images-02)

{title=".../app/controllers/components_controller.rb", lang=ruby, line-numbers=on, starting-line-number=75}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def component_params
      params.require(:component).permit(:image, :part_number, :name, :company_id, :homonym, :memo, :description, :supplier_price_list, :currency, :currency_exchange, :currency_rounding, :supplier_discount, :discount_rounding)
    end
~~~~~~~~

I> Da notare che dobbiamo permettere solo "image" e non image_file_name o gli altri campi derivati (image_file_size, image_content_type, image_updated_at). Questi sono usati internamente da Paperclip.




## Aggiungiamo paperclip image alle views edit e new

{title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=24}
~~~~~~~~
    <div class="field">
      <%= f.label :image, class: "control-label" %><br>
      <%= f.file_field :image, class: "form-control image_upload_file_field" %>
    </div>
~~~~~~~~

Aggiungere il campo **image** al form è semplice, basta usare ** f.file_field :image ** per rendere il campo appropriato.

Comunque, se proviamo a fare l'upload adesso, riceveremo un messaggio di errore "exception will be raised". ** Paperclip::Errors::MissingRequiredValidatorError ** 
Questo perché Paperclip si preoccupa con la sicurezza della nostra applicazione e quindi a partire dalla versione 4 è richiesto di avere almeno un tipo di validazione nel nostro modello.




## Aggiungiamo validazione paperclip image al model

Aggiungo la validazione altrimenti ho un errore. questo è stato implementato per aumentare la sicurezza.

{title=".../app/models/components.rb", lang=ruby, line-numbers=on, starting-line-number=17}
~~~~~~~~
  # == Validations ==========================================================

  # ==== paperclip required
  validates_attachment :image,
                        content_type: { content_type: ["image/jpeg", "image/gif", "image/png"] }
~~~~~~~~

come scelgo i mime types?
Ecco di seguito alcuni links ed una lista dei mime types:

* https://www.sitepoint.com/web-foundations/mime-types-complete-list/
* http://stackoverflow.com/questions/6554951/validate-extension-in-paperclip-ruby-on-rails
* http://stackoverflow.com/questions/8818251/how-to-validate-file-content-type-to-pdf-word-excel-and-plain-text-for-paperc
* http://stackoverflow.com/questions/26347844/rails-paperclip-file-type-validation-add-pdf





## Aggiungiamo su views/show

Avendo implementato la validazione possiamo caricare il nostro primo file. Prima però implementiamo la sua visualizzazione sulla pagina show **<%= image_tag @person.image.url %>**.

{title="views/components/_main_media_object.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
    <div class="list-group-item-heading pull-left" >
      <% if @component.image.present? %>
        <%= image_tag @component.image.url(:thumb), class: "media-object" %><br>
      <% elsif %>
        <%= image_tag "my_style_images/default/component_default.png", alt: "component image", class: "media-object" %>
      <% end %>
    </div>
~~~~~~~~


verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

![components show](images/components/upload_images/components_show.png)

Come si vede in alto c'è l'immagine che è stata uploadata.

![uploaded image](images/components/upload_images/image_test.png)

l'immagine è sull'url ** https://elisinfo5-flaviobordonidev.c9users.io/system/components/images/000/000/003/original/flatest.png?1481018199 ** che a livello locale risulta su ** .../public/system/components/images/000/000/003/original/flatest.png **

aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add components upload images locally with paperclip"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku uic:master
$ heroku run rake db:migrate
~~~~~~~~

Heroku non accetta che venga fatto upload di files direttamente sulla sua piattaforma. Devo quindi attivare un servizio terzo. Nel prossimo capitolo attiviamo Amazon Web Service S3. (Non è vero è già attivo il servizio aws ma questo lo scopriremo nel prossimo capitolo ^_^)




## Debug?

In locale mi funzionava tutto ma in remoto non funzionava. Ho fatto delle verifiche su AWS loggandomi sul sito web (console.aws.amazon.com) ed ho verificato su S3 che le immagini erano state caricate correttamente. Sono poi andato su **$ heroku run rails c ** ed ho verificato che sul database non erano riportate le informazioni riguardo le immagini. Ho fatto qualche prova ed anche creato un nuovo record da console. Ho anche cambiato sul components_controller nell'azione **create** la seguente linea:

~~~~~~~~
          #redirect_to url_for(view_context.h_params_path(path: "/companies/#{@company.id}", last_front_controller: "companies", last_front_action: "show", last_front_id: "#{@company.id}", related: "favorites")), notice: t(".notice")
          redirect_to url_for(view_context.h_params_path(path: "/companies/#{@company.id}", related: "favorites")), notice: t(".notice")
~~~~~~~~

E tutto ha cominciato a funzionare. La sensazione è che ci sono voluti quei 10-15minuti di attesa affinché la situazione Heroku ed aws con paperclip si assestasse. Perché i cambi effettuati non mi sono sembrati significativi. Da tener presente per il prossimo capitolo quando implementeremo le immagini per i prodotti.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge uic
$ git branch -d uic
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
