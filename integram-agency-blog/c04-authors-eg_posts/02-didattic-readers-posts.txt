# Readers::Posts - facoltativo

questo capitolo è facoltativo ed ha interessanti finalità didattiche. Forse torneremo indietro annullando il branch e tutte le modifiche fatte, forse no ;).
E' interessante vedere come incapsulare posts e farlo sembrare come se non lo fosse.




## Incapsuliamo posts dentro readers

Così come abbiamo fatto per authors possiamo incapsulare il posts dentro readers. Questo ci prepara la strada per avere ad esempio una gestione di accounts readers per profilare dei lettori iscritti che vogliono salvarsi i loro articoli preferiti.

creiamo la cartella **readers** e spostiamoci dentro la cartella **posts**.

* .../app/views/posts/            ->  .../app/views/readers/posts/ (spostamento di "posts/")

Adesso abbiamo ovviamente errore nella nostra app. Risolviamo la cosa:
Correggiamo il file di routes. Spostiamo il " resources :posts " dentro lo " scope module: 'readers' " 

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  scope module: 'readers' do
    resources :posts
  end
~~~~~~~~

la differenza tra scope e l'altro usato per authors è che nell'url non devo mettere readers/ in pratica è come se non fosse incapsulato.




################################################################################




In questo vecchio capitolo creiamo un doppio incapsulamento

* dentro **blog** i posts saranno accessibili da tutti ma in sola visualizzazione.
* dentro **authors** i posts saranno accessibili solo dai rispettivi autori che potranno anche crearne di nuovi, editarli ed eliminarli. In pratica una "dashboard" di gestione dei posts.


creiamo la cartella **authors** e la cartella **blog**. Spostiamo la cartella **posts** dentro la cartella **blog** e mettiamone una copia anche dentro la cartella **authors**.

* .../app/views/posts/            ->  .../app/views/blog/posts/
* .../app/views/posts/            ->  .../app/views/authors/posts/

Adesso abbiamo ovviamente errore nella nostra app. Risolviamo la cosa:
Correggiamo il file di routes. Spostiamo il **resources :posts** dentro lo **scope module: 'blog'** 

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  scope module: 'blog' do
    resources :posts
  end
~~~~~~~~

lasciamo dentro lo scope blog solo le chiamate di visualizzazione (index e show)


{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  namespace :author do
    resources :posts
  end

  scope module: 'blog' do
    get 'posts' => 'posts#index'
    get 'posts/:id' => 'posts#show'
  end
~~~~~~~~

Il codice **get 'posts/:id' => 'posts#show'** fa si che se metto nel mio URL

* https://posts/foobar

nell'azione show del controller posts_controller viene passato il parametro **:id** con il valore "foobar"

* params[:id] == "foobar"

Altro esempio. Se usavamo **get 'posts/:favorite_cat' => 'posts#show'** nell'azione show di posts_contrelle avevamo

* https://posts/foobar --> params[:favorite_cat] == "foobar"


Vediamo la differenza tra **scope module:** e **namespace**

il namespace si aspetta tutto il percorso nell'url
lo scope nasconde il percorso reale e lascia solo la parte finale nell'url

Nel nostro caso per author avremo nell'URL
.../authors/posts
.../authors/posts/1
.../authors/posts/new
.../authors/posts/1/edit

invece per blog avremo nell'URL
.../posts
.../posts/1




Correggiamo il controller 

* .../app/controllers/posts_controller.rb            ->  .../app/controllers/blog/posts_controller.rb 

aggiungiamo il namespacing "blog" al controller. 

{title=".../controllers/blog/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
module Blog
  # qui dentro copiamo tutto il codice di posts_controller.rb
end
~~~~~~~~

Questo namespacing produce Blog::PostsController che useremo nella nostra applicazione.


verifichiamo 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://rebisworld3-flaviobordonidev.c9users.io/posts  --> Funziona :)
https://rebisworld3-flaviobordonidev.c9users.io  --> Errore :(

Correggiamo la chiamata di root nel routes file

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  root 'blog/posts#index'
~~~~~~~~





***************************




{title=".../app/views/authors/posts/_posts.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
        <td><%= link_to 'Show', authors_post_path(post) %></td>
        <td><%= link_to 'Edit', edit_authors_post_path(post) %></td>
        <td><%= link_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
~~~~~~~~

Correggiamo in authors/posts_controller il redirect dell'azione destroy

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
        format.html { redirect_to authors_posts_url, notice: 'Post was successfully destroyed.' }
~~~~~~~~

Non funziona. Perché?
Purtroppo è dovuto al fatto di come gestiamo bootstrap. Infatti per riflettere lo standard restful l'invio del comando di destroy dovrebbe essere inviato con un put di :delete come richiesta HTML. Questa richiesta non è ancora gestita dalla maggior parte dei browser ed allora si è creato un workaround che converte il link in una chiamata post con l'invio del comando di destroy. Questo workaround è stato implementato nel pacchetto bootstrap specifico di Rails. Quindi funziona solo se si installa bootstrap utilizzando la gemma.
Noi abbiamo caricato direttamente bootstrap dal template e quindi non abbiamo questo workaround.

Come possiamo fare?
l'alternativa è quella di non usare il link ma di usare un button che attiva la chiamata post.

{title=".../app/views/authors/posts/_posts.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
        <td><%= button_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
~~~~~~~~

Solo che queso ha bisogno di un po' di stylesheet ed inoltre non funziona il confirm! Cancella senza chiederti se sei sicuro. Quindi prevede più codice per evitare cancellazioni indesiderate.
