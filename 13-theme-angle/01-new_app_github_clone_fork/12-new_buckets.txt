# Creiamo due nuovi cestini per l'upload dei files




## Effettuiamo il login su AWS

Andiamo sul sito di amazon web service https://console.aws.amazon.com e facciamo login.
Di tutti i servizi (services) di AWS noi ne useremo solo due: 

* Identity and Access Management (IAM)
* il service di storage (S3) 




## Connessione al bucket di amazon web service S3.

Per connetterci al "cestello dei files" (bucket) di AWS S3 abbiamo bisogno delle seguenti informazioni:

IAM user:

  * access_key_id
  * secret_access_key

Bucket:

  * s3_region
  * nome del bucket

Le credentials, ossia access_key_id e secret_access_key, identificano l'utente IAM e quindi i diritti di accesso ad AmazonWebService (nel nostro caso al solo servizio S3).
La s3_region ed il nome del bucket identificano dove archiviare i files.




## Nuovo IAM user

Creiamo un nuovo utente (IAM user) dedicato alla nostra applicazione "angletheme".
E' utile avere un utente per ogni dominio web che ha i diritti di archiviare e visualizzare i files su AWS S3. Questo utente che non è un utente fisico ma del codice che si autentica ed archivia o visualizza i files viene definito "bot". Per comodità creeremo un utente "bot" per ogni nostra applicazione rails.

AWS -> Service -> IAM -> Users

* Una volta fatto login dalla ConsoleHome AWS fare click sul service "IAM". 
* Andiamo sul link Users creiamone uno nuovo. "Add user"


* Step1
    User name   : bot_angletheme
    Access type : Programmatic access
* Step2
    Permissions : "AmazonS3FullAccess" senza altre configurazioni.
* Step3
    Non aggiungiamo nessun tag
* Step4
    Visualizza il riepilogo delle scelte fatte
* Step5

Una volta creato archiviamo le "user security credentials":

* access_key_id : UL...WGERY
* secret_access_key : zx3I...ela+hg

oppure facciamo il download del file csv.




## Lato S3

creiamo i due cestelli (Buckets) dove archivieremo i files.

AWS -> Service -> S3

Facciamo click su create bucket.

* Step1
    Bucket name : angletheme-dev
    Region      : US East (N. Virginia)
* Step2
    Lasciamo le opzioni di default
* Step3
    Lasciamo le autorizzazioni di default
* Step4
    Visualizziamo il riepilogo delle scelte fatte
    Accettiamo e creiamo il bucket.

Facciamo click su create bucket.

* Step1
    Bucket name : angletheme-prod
    Region      : US East (N. Virginia)
* Step2
    Lasciamo le opzioni di default
* Step3
    Lasciamo le autorizzazioni di default
* Step4
    Visualizziamo il riepilogo delle scelte fatte
    Accettiamo e creiamo il bucket.




## Per recuperare la s3_region del bucket appena creato

AWS -> Service -> S3 -> Bucket name -> Properties -> Static website hosting -> Endpoint 

Fare click sul service "S3". Ci si presenterà un elenco con tutti i bucket creati con relativo nome. Facciamo click sul bucket, andiamo sul tab "properties" e facciamo click sul "quadrato" Static web hosting. Lì troveremo un Endpoint simile al seguente:

Endpoint :  http://angletheme-dev.s3-website-us-east-1.amazonaws.com

La region in questo caso è "us-east-1" e corrisponde alla region US East (N. Virginia)



E con questo abbiamo tutti i dati che ci servono per collegarci. Nel prossimo capitolo ci collegheremo tramite Rails.




## Indichiamo a Rails di usare i nuovi buckets

Nei prossimi paragrafi indichiamo a rails di usare i nuovi buckets appena creati.




## Implementiamo la variabile ":amazondev" nello storage.yml

Questo file è usato da activestorage e serve per l'upload di files. Il nome usato qui è collegato ai nomi usati su amazon web server S3.
Per approfondimenti facciamo riferimento al capitolo 01-beginning/12-activestorage-filesupload/04-aws_s3_activestorage

Rails predispone commentata le linee di codice per effettuare il collegamento. Dobbiamo solo decommentarle ed adattarle alle nostre esigenze.

{id: "13-01-12_01", caption: ".../app/config/storage.yml -- codice 01", format: yaml, line-numbers: true, number-from: 5}
```
amazondev:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: us-east-1
  bucket: angletheme-dev

amazonprod:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: us-east-1
  bucket: angletheme-prod
```

[tutto il codice](#13-01-12_01all)

Non resta che impostare in modo sicuro, le variabili access_key_id e secret_access_key, anche dette "secrets".




## Prima reimpostiamo il file config/master.key

Per giusti motivi di sicurezza la "master key" non è passata tramite git. E' infatti aggiunta al file .gitignore.
La troviamo nella nostra applicazione clonata perché viene ricreata in automatico ma la chiave che ha al suo interno è ovviamente differente.

Entriamo sull'applicazione originaria che abbiamo clonato (bl6_0) e copiamoci il contenuto del file config/master.key
Torniamo sulla nosta applicazione "angletheme" e sostituiamo il contenuto del file config/master.key con quello copiato.

{id: "13-01-12_02", caption: ".../app/config/master.key -- codice 02", format: text, line-numbers: true, number-from: 1}
```
67b535b7dec8b679a548a57823d2c110
```




## Implementiamo i due secrets

Implementiamo le due secrets per lo IAM user nel file criptato "credentials". Per editare il file eseguire:

{caption: "terminal", format: bash, line-numbers: false}
```
$ EDITOR=vim rails credentials:edit
```

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

{caption: "terminal", format: bash, line-numbers: false}
```
aws:
  access_key_id: AKI...LWBYA
  secret_access_key: sx1......G2nyKdela
```




### Verifichiamo lettura secrets nel file criptato

Verifichiamo che le variabili aws che abbiamo appena aggiunto siano correttamente implementate

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails c
-> Rails.application.credentials.dig(:aws, :access_key_id)   # => "AKI...LWBYA"
-> Rails.application.credentials.dig(:aws, :secret_access_key)   # => "sx1......G2nyKdela"
```




### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

proviamo adesso a caricare un file.

Funziona! Adesso le immagini sono caricate su aws s3 e non vengono più cancellate dopo poche ore.
ATTENZIONE! Normalmente le immagini vengono caricate subito ma a volte ci può volere del tempo prima che l'immagine venga uploadata quindi non abbiate fretta e fate un refresh dopo alcuni minuti.

Ci manca solo la gestione delle immagini, nello specifico il ridimensionamento, ma questo lo implementiamo nel prossimo capitolo.
