{id: 56-ubuntudream-03-lessons-steps-02-lessons_next}
# Cap 03.2 -- Da show con la prima lezione andiamo avanti alla prossima

In questo capitolo facciamo in modo che pardendo da lessons/1/steps/1 passiamo al successivo step (lessons/1/steps/2) sul submit del form.
Inseriamo anche un link "next" per saltare il submit del form ed andare direttamente al successivo step.

Risorse esterne:

* 




## Apriamo il branch "Lessons Next"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b ln
```




## Inseriamo link next 


{id: "56-03-02_1", caption: ".../views/steps/show.html.erb -- codice 1", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<br>
<%= link_to 'Prev', lesson_step_path(@lesson, @step.id-1) if @step.id > @lesson.steps.first.id %>
<%= link_to 'Next', lesson_step_path(@lesson, @step.id+1) if @step.id < @lesson.steps.last.id %>
```

[tutto il codice](#56-03-02_1all)




## Altre soluzioni proposte sul web per Post

Cercando su internet sono proposte delle soluzioni pensate per Posts che passano per il model, visto che c'è un solo model principale.
(non vanno bene per lessons - Steps, perché sono annidate)

lato model

Prepariamo nel model i riferimenti a next e previous.

```
def previous_post
  Post.where(["id < ?", id]).last
  #self.class.where(["id < ?", id]).last
end

def next_post
  Post.where(["id > ?", id]).first
  #self.class.where(["id > ?", id]).first
end
```


oppure possiamo usare quest'altra versione:

```
def previous_post
  self.class.first(:conditions => ["id < ?", id], :order => "id desc")
end

def next_post
  self.class.first(:conditions => ["id > ?", id], :order => "id asc")
end
```



Volendo organizzare in ordine alfabetico di titolo, potremmo usare questa:

```
def previous_post
  self.class.first(:conditions => ["title < ?", title], :order => "title desc")
end

def next_post
  self.class.first(:conditions => ["title > ?", title], :order => "title asc")
end
```

You can change title to any unique attribute (created_at, id, etc.) if you need a different sort order.


- Lato view


```
<%= link_to("Previous Post", @post.previous_post) if @post.previous_post %>
<%= link_to("Next Post", @post.next_post) if @post.next_post %>
```




## Inseriamo il FORM

Inseriamo il form nello show in modo da permettere agli utenti di dare la risposta.
A differenza di Edit che ci permette di editare anche la domanda, su show avremo solo la possibilità di inserire la risposta.
Essendo un solo form, perché non c'è "new", non usiamo un partial "_form_answer" ma mettiamo tutto il codice direttamente su show.

{id: "56-03-02_2", caption: ".../views/steps/show.html.erb -- codice 2", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<%= form_with(model: [@lesson, @step], local: true) do |form| %>
  <% if @step.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@step.errors.count, "error") %> prohibited this step from being saved:</h2>

      <ul>
        <% @step.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :answer %>
    <%= form.text_area :answer %>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>
```

[tutto il codice](#56-03-02_2all)

Il codice aggiunto è praticamente lo stesso del partial steps/_form con qualche piccola modifica.
è importante far notare che invece della variabile *step* dobbiamo usare la variabile di istanza *@step*.
Questo perché quando chiamiamo il partial steps/_form usiamo questa linea di codice:

```
<%= render 'form', step: @step %>
```

Ossia passiamo la variabile di istanza *@step* alla variabile locale *step* che usiamo nel partial.
Invece su show non usiamo il partial e quindi ci riferiamo direttamente alla variabile di istanza *@step*.




## Aggiustiamo alcuni links

Riadattiamo alcuni links per muoverci agevolmente tra lezioni e steps.

{id: "56-03-02_3", caption: ".../views/steps/index.html.erb -- codice 3", format: HTML+Mako, line-numbers: true, number-from: 1}
```
        <td><%= link_to 'Show Lesson', [@lesson] %></td>
        <td><%= link_to 'Show Step', [@lesson, step] %></td>
        <td><%= link_to 'Edit Step', edit_lesson_step_path(@lesson, step) %></td>
        <td><%= link_to 'Destroy Step', [@lesson, step], method: :delete, data: { confirm: 'Are you sure?' } %></td>
```

[tutto il codice](#56-03-02_3all)

da notare che avendo aggiunto un altro link abbiamo portato a 4 il colspan dell'header della tabella.

```
<th colspan="4"></th>
```


Adattiamo anche i links della view *steps/edit*

{id: "56-03-02_4", caption: ".../views/steps/edit.html.erb -- codice 4", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<%#= link_to 'Show', @step %>
<%= link_to 'Back to Show', lesson_step_path(@lesson, @step) %> |
<%#= link_to 'Back', steps_path %>
<%= link_to 'Back to steps index', lesson_steps_path(@lesson) %>
```

[tutto il codice](#56-03-02_4all)






## Salviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "add seed companies"
```



## Publichiamo su heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku cs:master
$ heroku run rake db:migrate
```


Verifichiamo preview su heroku.

Andiamo all'url:

* https://elisinfo.herokuapp.com/lessons/1/steps/1

E verifichiamo di arrivare al primo step della prima lezione.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge ln
$ git branch -d ln
```




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push origin master
```
