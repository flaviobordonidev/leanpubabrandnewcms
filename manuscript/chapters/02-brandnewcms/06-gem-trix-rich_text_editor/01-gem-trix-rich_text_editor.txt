# Installiamo Trix

installiamo un rich text editor per formattare meglio i nostri posts.
TRIX - Open source gratuito sviluppato da BaseCamp

Installiamo un editor di testo per i nostri campi con Trix
Per i campi "text" invece di usare il **text_area** usiamo la User Interface del text editor "Trix"
questo editor di testo si appoggia ad un field_area che lascieremo nascosto e ci passa del codice html mentre visualizza il risultato formattato nella sua User Interface. In pratica è come se avessimo un piccolo microsoft-word online e quando usiamo il **grassetto** lui visualizza effettivamente il testo in grassetto ma passa nel database i tags html "<bold></bold>" prima e dopo il testo in grassetto. 

Al momento è solo per il testo.
Nel prossimo capitolo installiamo xxx per upload immagini con AWS
Più avanti integreremo la gestione dell'upload delle immagini xxx dentro Trix usando json



Risorse web:

* https://github.com/basecamp/trix
* https://github.com/basecamp/trix#readme
* https://trix-editor.org

* https://gorails.com/episodes/trix-editor?autoplay=1
* (go rails - Trix WYSIWYG Editor And File Uploads)[https://www.youtube.com/watch?v=eyM3_kdD-wY]

* https://www.driftingruby.com/episodes/wysiwyg-editor-with-trix
* (How to use Trix and Shrine for WYSIWYG Editing with Drag-and-Drop Image Uploading)[http://headway.io/blog/how-to-use-trix-and-shrine-for-wysiwyg-editing-with-drag-and-drop-image-uploading/]




## Apriamo il branch "Text Editor Trix Install"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b teti
~~~~~~~~




## Installiamo la gemma

Aggiungiamo la gemma **trix** alla nostra applicazione per implementare un text editor per i nostri campi "text".

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/trix)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/maclover7/trix)
I>
I> maggiori informazioni sul [github Basecamp](https://github.com/basecamp/trix)

ATTENZIONE! Purtroppo il sito ufficiale non è aggiornato. https://github.com/maclover7/trix/issues/65
Usiamo invece la gemma trix-rails che è un fork aggiornato di trix


I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/trix-rails)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/kylefox/trix)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=65}
~~~~~~~~
# A rich text editor for everyday writing 
gem 'trix-rails', '~> 1.0', require: 'trix'
~~~~~~~~

![la gemma trix](02-brandnewcms/06-gem-trix-rich_text_editor/trixgem.png)

[tutto il codice](#brandnewcms-gem-trix-rich_text_editor-01a-Gemfile)

oltre la gemma è richiesto di specificare **, require: 'trix'** perché non viene gestito in automatico da bundler.

Eseguiamo l'installazione della gemma con bundle 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## L'asset pipe line

Aggiungiamo sul file manifest dello stile

{title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
//*= require trix 
~~~~~~~~

[tutto il codice](#brandnewcms-gem-trix-rich_text_editor-01b-assets-stylesheets-application.scss)

l'asset pipeline ha questa forma curiosa di gestire codice dentro il commento.
un'alro modo di inserirlo è 
~~~~~~~~
/*
*= require trix 
*/
~~~~~~~~


Aggiungiamo sul file manifest di javascript

{title=".../app/assets/javascripts/application.js", lang=ruby, line-numbers=on, starting-line-number=18}
~~~~~~~~
//= require trix
~~~~~~~~

[tutto il codice](#brandnewcms-gem-trix-rich_text_editor-01c-assets-javascripts-application.js)




## Aggiungiamo Trix sul view edit di descrizione componenti

sostituiamo il text_area con il trix_editor

{title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=59}
~~~~~~~~
  <div class="field">
    <%= form.label :incipit %>
    <%#= form.text_area :incipit %>
    <%= form.trix_editor :incipit, required: true, autofocus: true %>
  </div>
~~~~~~~~

[tutto il codice](#brandnewcms-gem-trix-rich_text_editor-01d-views-components-_form.html.erb)

ATTENZIONE. Se in fase di sviluppo vogliamo vedere anche la text_area aggiornata in tempo reale con i cambiamenti fatti su trix dobbiamo:
- aggiungere **, id: "description"** nel "text_area :description" perché Trix ha bisogno di riportare nell'attributo **input** l'id del campo.
- lasciare la chiamata a trix in stile html **<trix-editor input="..."></trix-editor>** dove al posto dei puntini "..." si mette l'id del campo text_area. 

~~~~~~~~
    <%= form.text_area :incipit, id: "incipit", class: 'form-control', rows: '5' %>
    <trix-editor input="incipit"></trix-editor>
~~~~~~~~




## Aggiungiamo Trix sul view show di descrizione componenti


{title=".../app/views/components/_descriptions.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
    <p> <%= sanitize "#{@post.incipit}" %> </p>
~~~~~~~~


INFO. A volte si usa l'attributo **class="preserve-line-breaks"** per mantenere gli invii a capo anche in visualizzazione. (https://stackoverflow.com/questions/30593103/preserve-line-breaks-in-textarea)

~~~~~~~~
    <p class="preserve-line-breaks"> <%= "#{@post.incipit}" %> </p>
~~~~~~~~

Con trix questo non è necessario perché viene passato direttamente codice HTML. E' invece importante per la sicurezza fare il **sanitize** del testo per evitare inserimento di codice malevolo (malicious code injection) ad esempio codice javascript che cerca di prendere diritti di amministratore.




## Personalizziamo lo stile di trix 

Cambiamo lo sfondo creando la classe "trix-style".

{title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=64}
~~~~~~~~
    <%#= f.trix_editor :description, class: 'trix-style' %>
    <trix-editor input="description", class="trix-style"></trix-editor>
~~~~~~~~


{title=".../app/assets/stylesheets/application_global.scss", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
// TEXT EDITOR TRIX
.trix-style
{
  background-color: #FFFFFF;
}
// TEXT EDITOR TRIX end

~~~~~~~~




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add trix to posts"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku teti:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge teti
$ git branch -d teti
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~