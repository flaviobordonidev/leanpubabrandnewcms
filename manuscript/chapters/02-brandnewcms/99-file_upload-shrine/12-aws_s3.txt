# Amazon Web Services S3

Anche se le immagini png e jpg possono essere archiviate su Heroku i files pdf o txt non sono accettati. Inoltre le immagini sono archiviate solo per un tempo limitato; dopo alcuni giorni vengono cancellate.

Risorse web:

* https://www.sitepoint.com/uploading-files-with-paperclip/
* https://devcenter.heroku.com/articles/paperclip-s3
* http://stackoverflow.com/questions/32919273/access-denied-s3-with-paperclip
* https://github.com/thoughtbot/paperclip/wiki/Paperclip-with-Amazon-S3
* http://rexstjohn.com/how-to-solve-access-denied-with-heroku-paperclip-s3-ror/
* https://console.aws.amazon.com/iam/home#users/botpaperclip




## Non apriamo il branch "Amazon Web Services S3"

questo capitolo è dedicato interamente alla preparazione dell'ambiente lato AWS S3
quindi non creiamo un branch sulla nostra applicazione rails



## Best practise di AWS S3

docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html

La forma più semplice di fare upload è esare AmazonS3 PUTs che carica il file prima nel server dove gira l'applicazione Rails (Heroku nel nostro caso) e poi nel server di Amazon. Questo doppio passaggio è molto più lento. E lo stesso Heroku scoraggia fortemente questo approccio mettendo un taglio a 30s che può causare l'impossibilità di caricare files molto grandi.

La forma più performante è usare Amazon S3 POST che passa al browser dell'utente un token di autorizzazione ed il file è direttamente caricato sul server Amazon.

Noi useremo questa seconda forma più performante anche se avremo più codice da implementare.




## Connessione al bucket di amazon web service S3.

Per connetterci al "cestello dei files" (bucket) di AWS S3 abbiamo bisogno delle seguenti informazioni:

* nome del bucket
* access_key_id
* secret_access_key
* s3_region




## Il Bucket


### Che nome gli diamo?
Per semplificarci la vita possiamo chiamare il bucket con lo stesso nome del database della nostra app. Quindi avremo un bucket **brandnewcms-dev** ed un altro **brandnewcms-prod**. Si lo so che abbiamo i due databases **brandnewcms_developpment** e **brandnewcms_test** ma l'underscore "_" non è accettato nel nome del bucket, quindi ci prendiamo una "licenza poetica".


### Effettuiamo il login su AWS

andiamo sul sito di amazon web service https://console.aws.amazon.com e facciamo login (o creiamo un nuovo account). Cerchiamo il service - storage - S3.

![console AWS dopo login](brandnewcms/12img-aws-login.png)

Di tutti i servizi (services) di AWS noi ne useremo solo due: S3 ed Identity and Access Management (IAM)
selezioniamo S3 per creare il nostro cestino dei files (bucket)

* Siamo sulla ConsoleHome AWS. -> click su S3. -> click su create bucket.

![AWS S3](brandnewcms/12img-aws-s3.png)

Bucket name : brandnewcms-dev
Region      : EU (Frankfurt)

![AWS S3](brandnewcms/12img-s3-new_bucket.png)

Implementiamo la sicurezza del browser HTTP access control configurando il file CORS (Cross-Origin Resource Sharing). In pratica diciamo al server di Amazon di accettare richieste solo dai nostri domini. Nel nostro caso mettiamo il dominio di cloud9 ed il dominio di Heroku.

![AWS S3](brandnewcms/12img-s3-bucket-cors.png)

{title="CORS configuration",lang=markdown, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!-- Sample policy -->
<CORSConfiguration>
	<CORSRule>
		<AllowedOrigin>https://brandnewcms-flaviobordonidev.c9users.io</AllowedOrigin>
		<AllowedOrigin>https://fast-brook-60500.herokuapp.com</AllowedOrigin>
		<AllowedMethod>GET</AllowedMethod>
		<MaxAgeSeconds>3000</MaxAgeSeconds>
		<AllowedHeader>Authorization</AllowedHeader>
	</CORSRule>
</CORSConfiguration>
~~~~~~~~

al momento lasciamo "*" permettendo tutti i domini ed aggiungiamo anche il permesso di caricare i files

{title="CORS configuration",lang=markdown, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!-- Sample policy -->
<CORSConfiguration>
	<CORSRule>
		<AllowedOrigin>*</AllowedOrigin>
		<AllowedMethod>GET</AllowedMethod>
		<MaxAgeSeconds>3000</MaxAgeSeconds>
		<AllowedHeader>Authorization</AllowedHeader>
	</CORSRule>
	<CORSRule>
		<AllowedOrigin>*</AllowedOrigin>
		<AllowedMethod>PUT</AllowedMethod>
		<AllowedMethod>POST</AllowedMethod>
		<MaxAgeSeconds>3000</MaxAgeSeconds>
		<AllowedHeader>*</AllowedHeader>
	</CORSRule>
</CORSConfiguration>
~~~~~~~~

Click su SAVE per applicarli al nostro bucket.




## Ritroviamo il nome del bucket

Una volta fatto login dalla ConsoleHome AWS fare click sul service "S3". Ci si presenterà un elenco con tutti i bucket creati con relativo nome.




### La Access key e la Secret access key - IAM user

Per la access_key_id e la secret_access_key creiamo uno IAM user

AWS -> Service -> IAM -> Users
  Access keys
    - access_key_id
    - secret_access_key
  Permission 
    - Attach Policy --> AmazonS3FullAccess

![AWS S3](brandnewcms/12img-aws-iam.png)

![AWS S3](brandnewcms/12img-aws-iam-users.png)

Una volta fatto login dalla ConsoleHome AWS fare click sul service "IAM". Vado sul link Users e ne creo uno nuovo.

User name   : botbrandnewcms
Access type : Programmatic access

"bot" convenzionalemente indica che non è un utente fisico ma un accesso per una applicazione.

Andiamo avanti senza mettere credenziali di sicurezza che aggiungeremo in seguito.
Una volta creato facciamo il download delle "user security credentials". E' un file csv.

clicco sul link "botbrandnewcms" e sul tab Permission 
  -> Add Permission (Attach existing policies directly)
  -> "AmazonS3FullAccess - AWS Managed policy"

![AWS S3](brandnewcms/12img-aws-iam-user-permissions.png)

possiamo dare pieno accesso o selezionare solo quelle che ci servono

* GetObject
* PutObject
* PutObjectAcl



*********
## IAM user policies

aws -> services -> IAM -> users -> botbrandnewcms -> Permissions -> 
  -> apriamo la policy AmazonS3FullAccess che abbiamo dato:

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "*"
        }
    ]
}


quella di gorail invece è

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Stmt147561171600",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
                ],
            "Resource": [
                "arn:aws:s3:::shrine-example/*"
            ]
        }
    ]
}

valida la policy per vedere che non hai fatto errori

*********




## La s3_region

AWS -> Service -> S3 -> Bucket name -> Properties -> Static website hosting -> Endpoint 

Una volta fatto login dalla ConsoleHome AWS fare click sul service "S3". Ci si presenterà un elenco con tutti i bucket creati con relativo nome.
Qui c'è un nome di Region ma non è quello che ci serve. Quello che ci serve lo dobbiamo estrapolare dallo Endpoint.

Fare click sul nome nome del bucket che ci interessa. Scegliere il tab "Properties". Scegliere "Static website hosting"

Endpoint : http://elisinfo-dev.s3-website.eu-central-1.amazonaws.com

La nostra s3_region è **eu-central-1**

![bucket endpoint](images/companies_people/upload_images_aws_s3/bucket_endpoint.png)
