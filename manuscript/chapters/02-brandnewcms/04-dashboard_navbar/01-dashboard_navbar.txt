# Iniziamo a dar forma al nostro dashboard

prepariamo una formattazione per la nostra applicazione. ATTENZIONE questa formattazione non ha niente a che vedere con il tema che importeremo successivamente. Questa formattazione sarà successivamente isolata ed utilizzata esclusivamente per il "dashboard" ossia per l'interfaccia grafica che si presenta agli autori che hanno effettuato il login per permettere loro di gestire i loro articoli (posts)

Prepariamo una "navbar" per gli "autori" che effettuano il login. Su questa navbar non mettiamo il pulsante di login perchè, come per wordpress, l'autore deve andare direttamente sull'url per il login: "https//mydomain.com/authors/sign_in

Appare la finestra di login ed una volta loggato in alto si ha il menu di wordpress evidenziando che si è nella sezione di autore con possibilità di modifica. 

In questo capitolo prepariamo una navbar attiva su tutto il sito ma in seguito la rendiamo attiva solo per gli utenti loggati.




## Apriamo il branch "Style our Dashboard"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b sd
~~~~~~~~




## La barra di navigazione per il dashboard

implementiamo una barra di navigazione che inizialmente useremo per tutte le pagine ma successivamente sarà presente solo nel dashboard per permettere agli autori che avranno effettuato login di gestire i loro articoli (posts).

Creiamo un partial per la navbar ed adattiamo il codice di esempio di [bootstrap](http://getbootstrap.com/docs/4.0/components/navbar/)

Mettiamo un container per permettere a bootstrap di non appiccicare i contenuti al bordo. Inoltre abilita l'adattamento al ridimensionamento.


{title=".../app/views/layouts/_dashboard_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container">
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
.
.
.
~~~~~~~~

[tutto il codice](#brandnewcms-dashboard_navbar-views-layouts-_dashboard_navbar.html.erb)

Mettiamo la navbar visibile in tutte le pagine della nosta applicazione. Più avanti lo isoleremo solo per la "dashboard".

{title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
    <%= render 'layouts/dashboard_navbar' %>
~~~~~~~~

[tutto il codice](#brandnewcms-dashboard_navbar-views-layouts-_application.html.erb)




## Verifichiamo gli instradamenti dei links

Impostiamo i posts come pagina principale

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  #root 'test_pages#page_a'
  root 'posts#index'
~~~~~~~~

Giochiamo un po' con le routes. Aggiungiamo i percorsi "sections" e "signatures" ma al momento li leghiamo alle pagine di examples
  
{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
~~~~~~~~
  get 'sections' => 'example_pages#page_b'
  get 'signatures' => 'example_pages#page_c'
  get 'example_pages/page_b'
  get 'example_pages/page_c'
~~~~~~~~

Così possiamo andare nella stessa pagina sia con il percorso di default mydomain.com/example_pages/page_c sia con mydomain.com/signatures




## Il "contenitore vuoto" yield(:my_navbar_link)

Usiamo di nuovo il "contenitore vuoto" **yield(:myvariable)** per rendere attivi i links del menu di navigazione quando siamo sulla rispettiva pagina. 
Li abbiamo già implementati nella nostra _navbar

* <%= link_to 'Blog', root_path, class: "nav-link #{yield(:blog_active)}" %>
* <%= link_to 'Sezioni', sections_path, class: "nav-link #{yield(:sections_active)}" %>
* <%= link_to 'Le firme', signatures_path, class: "nav-link #{yield(:signatures_active)}" %>


Adesso prepariamo il "contenuto" del "contenitore vuoto" sulle rispettive pagine. Il contenuto è semplicemente la stringa "active" che viene passata come classe css ed usata da bootstrap per evidenziare il rispettivo link. 

{title=".../app/views/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<% provide(:blog_active, "active") %>
~~~~~~~~

{title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<% provide(:blog_active, "active") %>
~~~~~~~~

{title=".../app/views/posts/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<% provide(:blog_active, "active") %>
~~~~~~~~

{title=".../app/views/posts/edit.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<% provide(:blog_active, "active") %>
~~~~~~~~

{title=".../app/views/example_pages/page_b.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=3}
~~~~~~~~
<% provide(:sections_active, "active") %>
~~~~~~~~

{title=".../app/views/example_pages/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=3}
~~~~~~~~
<% provide(:signatures_active, "active") %>
~~~~~~~~


salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add navbar"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku sd:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge sd
$ git branch -d sd
~~~~~~~~


aggiorniamo github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~

