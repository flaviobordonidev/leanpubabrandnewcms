# Devise Sign_in view


Prima di inserire il nostro tema personalizzato nella pagina di login (sign_in) nella nostra app Rails dobbiamo visualizzarla perché devise inizialmente mantiene nascosta. 



## Apriamo il branch "Devise Sign_in View"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b dsw
~~~~~~~~






## Visualizziamo le views ed i controllers di Devise

E' arrivato il momento di effettuare il punto 4 che avevamo lasciato in sospeso. Questo punto ci permette di visualizzare le views usate da Devise. Lo eseguiamo specificando che è per la tabella users che abbiamo legato a Devise. Inoltre visualizziamo anche i controllers di Devise anche questi per la tabella users.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate devise:views users
$ rails generate devise:controllers users
~~~~~~~~

Adesso abbiamo sia la sottocartella /app/views/users/ con tutte le views gestite da devise. 
Sia la sottocartella /app/controller/users/ con tutti i controllers gestiti da devise.


I> se avessimo fatto già il ** rails generate devise:views ** avremmo dovuto copiare le **views** da devise/sessions a users/sessions. Poiché il controller sarebbe stato  cambiato, non avrebbe usato le views di default in devise/sessions.






## visualizziamo le views di devise e prepariamoci per passargli lo stile del nostro tema

La gemma devise di default lascia nascoste le sue views ed i suoi controlers. Possiamo visualizzarli per apportarci le nostre personalizzazioni.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate devise:views users
$ rails generate devise:controllers users

===============================================================================

Some setup you must do manually if you haven't yet:

  Ensure you have overridden routes for generated controllers in your routes.rb.
  For example:

    Rails.application.routes.draw do
      devise_for :users, controllers: {
        sessions: 'users/sessions'
      }
    end

===============================================================================
~~~~~~~~

Adesso abbiamo la sottocartella /app/controller/users/ con tutti i controllers gestiti da devise 
Inoltre abbiamo la sottocartella /app/views/users/ con tutti le pagine gestite da devise 

I> se avessimo fatto subito il punto 4, ossia il **rails generate devise:views** avremmo dovuto copiare le views da devise/sessions a users/sessions. 
I>
I> Poiché visualizzando il controller non usiamo più le views di default che mette in devise/sessions.




## Aggiorniamo gli instradamenti

Modifichiamo le routes **devise_for :users** indicando a devise di usare i nuovi controllers (e non quelli di default)

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  #devise_for :users, controllers: { sessions: 'users/sessions' }
  devise_for :users, controllers: {sessions: 'users/sessions'}, path: '', path_names: {sign_in: 'login'}
~~~~~~~~





## Aggiorniamo gli instradamenti

Adattiamo le routes **devise_for :users** indicando a devise di usare i nuovi controllers (e non quelli di default)

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  devise_for :users, controllers: { sessions: 'users/sessions' }
~~~~~~~~

[cod. b](#beginning-authentication-03b-config-routes.rb)


Se avessi implementato anche la registrazione avrei dovuto inserire anche **users/registrations**

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
~~~~~~~~
  devise_for :users, controllers: {sessions: 'users/sessions', registrations: 'users/registrations'}
  resources :users
~~~~~~~~




## Verifichiamo gli instradamenti

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails routes | egrep "devise"

cloud9:~/environment/rigenerabatterie (master) $ rails routes | egrep "devise"
           new_user_session GET    /users/sign_in(.:format)                                                                 devise/sessions#new
               user_session POST   /users/sign_in(.:format)                                                                 devise/sessions#create
       destroy_user_session DELETE /users/sign_out(.:format)                                                                devise/sessions#destroy
          new_user_password GET    /users/password/new(.:format)                                                            devise/passwords#new
         edit_user_password GET    /users/password/edit(.:format)                                                           devise/passwords#edit
              user_password PATCH  /users/password(.:format)                                                                devise/passwords#update
                            PUT    /users/password(.:format)                                                                devise/passwords#update
                            POST   /users/password(.:format)                                                                devise/passwords#create
~~~~~~~~

come possiamo vedere le chiamate devise sono sotto "users"





## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://rebisworldbr1-flaviobordonidev.c9users.io/login




## La pagina di login su devise

la nostra pagina per fare login è sotto **users/sessions/new**. Facciamo una piccola modifica al titolo

{title=".../app/views/users/sessions/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<h2>Entra nel sito</h2>
~~~~~~~~

adesso che abbiamo identificato la pagina occupiamoci di passargli il nostro tema




## Creiamo il nostro layouts/my_login_page

Inizialmente passeremo tuto il codice html della index.html del nostro template sulla pagina **users/sessions/new**
Quindi creiamo la nostra pagina my_login_page.html.erb in cui inseriamo la sola chiamata **yield** sul layout e lasciamo tutto il codice html su **users/sessions/new**

{title=".../app/views/layouts/my_login_page.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= yield %>
~~~~~~~~

successivamente reinseriremo la parte di <head> e gli script javascript nel nostro layout, ma per il momento usiamo questa versione super semplificata.




## Passiamo il nostro tema alle views di devise 

Puntiamo le views di devise ad un nostro layout. Per far si che le views di devise usino un nostro layout basta indicarlo nel suo controller che abbiamo visualizzato nel paragrafo precedente.
Nel controller di devise possiamo passare una funzione che chiama il nostro layout

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
layout :for_devise

def for_devise
  'our_custom_layout'
end
~~~~~~~~

o più semplicemente chiamiamo direttamente il nostro layout

~~~~~~~~
layout 'our_custom_layout'
~~~~~~~~

Usiamo il metodo più semplice per inserire la nostra pagina di layout "my_login_page"

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  layout 'my_login_page'
~~~~~~~~

Mettendola fuori dalle singole azioni il layout si applica automaticamente a tutte quante le azioni del controller. Nel nostro caso specifico l'unica che effettivamente lo usa è l'azione **new**.
Se volevamo essere più specifici sarebbe stato più corretto metterlo dentro l'azione che ci interessava decommentando tutta l'azione **new** ed inserendo la chiamata al layout.

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  # GET /resource/sign_in
  def new
    layout 'my_login_page'
    super
  end
~~~~~~~~

Per questo capitolo è tutto. 




## personalizziamo il link di logout con una icona

Volendo mettere un'icona nel link possiamo usare il seguente codice

{title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
~~~~~~~~
<%= link_to destroy_user_session_path, method: :delete do %>
   <span class="glyphicon ico_logout"></span>Logout
<% end %>
~~~~~~~~

Per visualizzare l'icona dobbiamo caricare il set di icone. Questo lo facciamo più avanti.








## aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add template mylogin on devise view users/sessions/new"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku dsw:master
~~~~~~~~



## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge dsw
$ git branch -d dsw
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~



Vecchio codice preso da elisinfo:

## Implementiamo la view di login


Dedichiamoci alla view. La view di login non usa il layout di default ma usa il layout "pages" per indicare di usare questo layout dobbiamo inserirlo nel controller. Ed è per questo che abbiamo usato ** rails generate devise:controllers users **. Infatti adesso abbiamo in chiaro il controller di devise che gestisce il sign_in/login sign_out/logout. E' il /app/controller/users/sessions_controller.rb

Indichiamo di usare il layout "login"  (.../app/views/layout/login.html.erb) al posto di quello di default (.../app/views/layout/application.html.erb):

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Users::SessionsController < Devise::SessionsController
# before_action :configure_sign_in_params, only: [:create]

  layout 'login'

  # GET /resource/sign_in
  # def new
  #   super
  # end

  # POST /resource/sign_in
  # def create
  #   super
  # end

  # DELETE /resource/sign_out
  # def destroy
  #   super
  # end

  # protected

  # If you have extra params to permit, append them to the sanitizer.
  # def configure_sign_in_params
  #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  # end
end
~~~~~~~~


Creiamo il layout "login"

{title=".../app/views/layout/login.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=8}
~~~~~~~~
<!DOCTYPE html>
<html>
<head>
  <title><%= content_for?(:title) ? yield(:title) : "Elisinfo" %></title>
  <meta name="description" content="<%= content_for?(:description) ? yield(:description) : "Elisinfo" %>">
  <%= csrf_meta_tags %>

  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= render 'layouts/workaround_ie' %>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  <%= render 'layouts/flash_messages' %>

  <%= yield %>
  
  <% if Rails.env.development? %>
      <div class='debug_layout'>
        <%= render 'layouts/debug' %>
      </div>
  <% end %>
</body>
</html>
~~~~~~~~

Al momento è identico al layout **application** ma con l'avanzare dello sviluppo dell'applicazione si differenzieranno.




## Implementiamo la pagina di Login

Abbiamo già definito il layout adesso lavoriamo direttamente sulla pagina.

{title=".../app/views/users/sessions/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=8}
~~~~~~~~
<div id="rear_mode" class="container-fluid rear_mode">

  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active].nil? or params[:tab_active] == 'login' %>">
          <a href="#pane_login" data-toggle="tab"><span class="glyphiconmy ico_login"></span></a>
        </li>
      </ul>
    </div>
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%#= render 'mocks/global_settings/index/button_close' %>
    </div> <!-- /col -->
  </div> <!-- /row -->

  <div class="row">
    <div class="col-xs-12">
      <div class="tab-content">
        <div id="pane_login" class="tab-pane <%= 'active' if params[:tab_active] == nil or params[:tab_active] == 'login'  %>">
          <div class="text-center bottom-pad">
            <h4>Login</h4>
          </div>

          <%= form_for(resource, as: resource_name, url: session_path(resource_name), class: 'form-horizontal left-pad right-pad bottom-pad') do |f| %>
          
            <div class="form-group">
              <div class="field">
                <%= f.label :email, class: "control-label" %><br />
                <%= f.email_field :email, autofocus: true, class: "form-control" %>
                <span class="help-block"></span>
              </div>
            
              <div class="field">
                <%= f.label :password, class: "control-label" %><br />
                <%= f.password_field :password, autocomplete: "off", class: "form-control" %>
                <span class="help-block"></span>
              </div>
            </div> <!-- /form-group -->
            
            <% if devise_mapping.rememberable? -%>
              <div class="field">
                <%= f.check_box :remember_me %>
                <%= f.label :remember_me %>
              </div>
            <% end -%>
          
            <div class="actions">
              <%= f.submit "Log in", class: "btn btn-primary btn-block" %>
            </div>
          <% end %>
          
          <%= render "users/shared/links" %>
          
        </div>
      </div><!-- /.tab-content -->
    </div> <!-- /col -->
  </div> <!-- /row -->

</div> <!-- /rear_mode -->
~~~~~~~~




## lavoriamo sul view homepage

Visualizziamo in homepage l'utente che ha fatto login. Al momento visualizziamo la sua email. [(codice: 03)](#code-login_authentication-login_devise_views-03)

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=25}
~~~~~~~~
      <p> utente attivo: <%= current_user.email if current_user.present? == true %> </p>
      <p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %> </p>
~~~~~~~~

la variabile **current_user** è generata tramite la gemma "devise" e contiene l'utente loggato. esempio: User.find(current_user.id)

verifichiamo che funziona tutto.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io
https://elisinfo6-flaviobordonidev.c9users.io/users/1
https://elisinfo6-flaviobordonidev.c9users.io/users/sign_in
~~~~~~~~





## lavoriamo sul controller di homepage

{title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
class HomepageController < ApplicationController

  before_action :authenticate_user!
  
  def show
    # current_user is generated by the gem "devise" and contain the logged user. esempio: User.find(current_user.id)
    @user = current_user
  end
end
~~~~~~~~

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.

Se volessimo reindirizzare user show sull'homepage

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
get 'users/show', as: :user_root # creates user_root_path (default path after sign_in)
~~~~~~~~
