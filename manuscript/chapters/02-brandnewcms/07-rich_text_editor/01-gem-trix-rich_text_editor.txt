# Installiamo Trix

---
Da rails 6 trix diventa Action Text!!
Action Text is a brand new framework coming to Rails 6 that’s going to make creating, editing, and displaying rich text content in your applications super easy. It’s an integration between the Trix editor, Active Storage-backed file and image processing, and a text-processing flow that ties it all together. 
---

installiamo un rich text editor per formattare meglio i nostri posts.
TRIX - Open source gratuito sviluppato da BaseCamp

Installiamo un editor di testo per i nostri campi con Trix
Per i campi "text" invece di usare il **text_area** usiamo la User Interface del text editor "Trix"
questo editor di testo si appoggia ad un field_area che lascieremo nascosto e ci passa del codice html mentre visualizza il risultato formattato nella sua User Interface. In pratica è come se avessimo un piccolo microsoft-word online e quando usiamo il **grassetto** lui visualizza effettivamente il testo in grassetto ma passa nel database i tags html "<bold></bold>" prima e dopo il testo in grassetto. 

Al momento è solo per il testo.
Nel prossimo capitolo installiamo xxx per upload immagini con AWS
Più avanti integreremo la gestione dell'upload delle immagini xxx dentro Trix usando json


Risorse web:

* [BaseCamp Trix](https://github.com/basecamp/trix)
* https://github.com/basecamp/trix#readme
* https://trix-editor.org

* https://gorails.com/episodes/trix-editor?autoplay=1
* (go rails - Trix WYSIWYG Editor And File Uploads)[https://www.youtube.com/watch?v=eyM3_kdD-wY]

* https://www.driftingruby.com/episodes/wysiwyg-editor-with-trix
* (How to use Trix and Shrine for WYSIWYG Editing with Drag-and-Drop Image Uploading)[http://headway.io/blog/how-to-use-trix-and-shrine-for-wysiwyg-editing-with-drag-and-drop-image-uploading/]

---
Altre risorse web:

* [What are the best blogs about Ruby on Rails?](https://www.quora.com/What-are-the-best-blogs-about-Ruby-on-Rails)
* [build-a-blog-with-ruby-on-rails-part-1](https://scotch.io/tutorials/build-a-blog-with-ruby-on-rails-part-1)
* [full-blog-app-tutorial-](https://medium.com/@bruno_boehm/full-blog-app-tutorial-on-rails-zero-to-deploy-4c19e8174791)
* [How To Build A Blog Using Rails 5 - interessante come carica da CDN sia bootstrap (4:50) che font-awesome (5:20)](https://www.youtube.com/watch?v=i2x995hm8r8)
* [il blog non è granché ma ha una gestione della chat online.](https://medium.freecodecamp.org/lets-create-an-intermediate-level-ruby-on-rails-application-d7c6e997c63f)
* [Rails Admin Interfaces with ActiveAdmin - una gemma che ti prepara tutto il dashboard. Resti troppo legato alla loro interfaccia. Modifiche future sono difficili.](https://www.youtube.com/watch?v=NJYtzznKrg0)
* [Let’s Build: With Ruby on Rails – A Blog with Comments - interessante per uso di better-error, guard, ed altro lato develop.](https://web-crunch.com/lets-build-with-ruby-on-rails-blog-with-comments/)
* [Creating a chocolate store using Ruby on Rails - interessante la parte di pagamento con carta di credito](https://www.youtube.com/watch?v=be_EHQnpb8k)
* [Creating an Online Shop in Rails - Part 1](https://www.youtube.com/watch?v=TwoafJC7vlw)
* [Creating an Online Shop in Rails - Part 2]()
* [Creating an Online Shop in Rails - Part 3](https://www.youtube.com/watch?v=q4ciKOT1oHs)
* [Creating an Online Shop in Rails - Part 4](https://www.youtube.com/watch?v=orDmqI-dlCo)
* [Creating an Online Shop in Rails - Part 5](https://www.youtube.com/watch?v=HfV8WP28QFk)
---




## WYSIWYG TESTO E UPLOAD IMAGES ON AWS S3

TRIX - Open source gratuito sviluppato da BaseCamp

* (go rails - Trix WYSIWYG Editor And File Uploads)[https://www.youtube.com/watch?v=eyM3_kdD-wY]
* https://github.com/basecamp/trix
* https://www.driftingruby.com/episodes/wysiwyg-editor-with-trix
* (How to use Trix and Shrine for WYSIWYG Editing with Drag-and-Drop Image Uploading)[http://headway.io/blog/how-to-use-trix-and-shrine-for-wysiwyg-editing-with-drag-and-drop-image-uploading/]


FROALA - Eccellente WYSIWYG a pagamento una tantum

* https://www.froala.com/wysiwyg-editor/plugins
* (Ruby Snack #22: Froala WYSIWYG)[https://www.youtube.com/watch?v=BrR4dmp2Y8c]
* (Ruby Snack 28: Simple Blog with Froala V2 and Sanitize Gem)[https://www.youtube.com/watch?time_continue=6&v=QVOOBncTe8s]
* (Ruby Snack #23: Froala WYSIWYG Saving Images on Amazon-S3)[https://www.youtube.com/watch?v=WZqztFZpfxQ]
* https://www.froala.com/wysiwyg-editor/docs/framework-plugins/rails


TinyMCE - Ottimo WYSIWYG a pagamento continuativo

* https://www.tinymce.com






## Apriamo il branch "Text Editor Trix Install"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b teti
~~~~~~~~




## Installiamo la gemma

Aggiungiamo la gemma **trix** alla nostra applicazione per implementare un text editor per i nostri campi "text".

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/trix)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/maclover7/trix)
I>
I> maggiori informazioni sul [github Basecamp](https://github.com/basecamp/trix)

ATTENZIONE! Purtroppo il sito ufficiale non è aggiornato. https://github.com/maclover7/trix/issues/65
Usiamo invece la gemma trix-rails che è un fork aggiornato di trix


I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/trix-rails)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/kylefox/trix)

{id="02-07-01_01", title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=56}
~~~~~~~~
# A rich text editor for everyday writing 
gem 'trix-rails', '~> 2.0', require: 'trix'
~~~~~~~~

[Codice 01](#02-07-01_01all)

oltre la gemma è richiesto di specificare ", require: 'trix'" perché non viene gestito in automatico da bundler.

Eseguiamo l'installazione della gemma con bundle 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## L'asset pipe line

Aggiungiamo sul file manifest dello stile

{id="02-07-01_02", title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
//*= require trix 
~~~~~~~~

[Codice 02](#02-07-01_02all)


l'asset pipeline ha questa forma curiosa di gestire codice dentro il commento.
un'alro modo di inserirlo è 
~~~~~~~~
/*
*= require trix 
*/
~~~~~~~~


Aggiungiamo sul file manifest di javascript

{id="02-07-01_03", title=".../app/assets/javascripts/application.js", lang=ruby, line-numbers=on, starting-line-number=18}
~~~~~~~~
//= require trix
~~~~~~~~

[Codice 03](#02-07-01_03all)




## Aggiungiamo Trix sul view edit di descrizione componenti

sostituiamo il text_area con il trix_editor

{id="02-07-01_04", title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=59}
~~~~~~~~
      <div class="field">
        <%= form.label :incipit %>
        <%#= form.text_area :incipit, rows: "3", class:'form-control' %>
        <%= form.trix_editor :incipit, required: true, autofocus: true %>
      </div>
~~~~~~~~

[Codice 04](#02-07-01_04all)


ATTENZIONE. Se in fase di sviluppo vogliamo vedere anche la text_area aggiornata in tempo reale con i cambiamenti fatti su trix dobbiamo:

* aggiungere ", id: "incipit"" nel "text_area :incipit" perché Trix ha bisogno di riportare nell'attributo "input" l'id del campo. (forse da trix 2.0 non serve più)
* lasciare la chiamata a trix in stile html "<trix-editor input="..."></trix-editor>" dove al posto dei puntini "..." si mette l'id del campo text_area.

~~~~~~~~
    <%= form.text_area :incipit, id: "incipit", class: 'form-control', rows: '5' %>
    <trix-editor input="incipit"></trix-editor>
~~~~~~~~




## Aggiungiamo Trix sul view show di descrizione componenti


{title=".../app/views/components/_descriptions.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
    <p> <%= sanitize "#{@post.incipit}" %> </p>
~~~~~~~~


INFO. A volte si usa l'attributo **class="preserve-line-breaks"** per mantenere gli invii a capo anche in visualizzazione. (https://stackoverflow.com/questions/30593103/preserve-line-breaks-in-textarea)

~~~~~~~~
    <p class="preserve-line-breaks"> <%= "#{@post.incipit}" %> </p>
~~~~~~~~

Con trix questo non è necessario perché viene passato direttamente codice HTML. E' invece importante per la sicurezza fare il **sanitize** del testo per evitare inserimento di codice malevolo (malicious code injection) ad esempio codice javascript che cerca di prendere diritti di amministratore.




## Personalizziamo lo stile di trix 

Cambiamo lo sfondo creando la classe "trix-style".

{title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=64}
~~~~~~~~
    <%#= f.trix_editor :description, class: 'trix-style' %>
    <trix-editor input="description", class="trix-style"></trix-editor>
~~~~~~~~


{title=".../app/assets/stylesheets/application_global.scss", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
// TEXT EDITOR TRIX
.trix-style
{
  background-color: #FFFFFF;
}
// TEXT EDITOR TRIX end

~~~~~~~~




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add trix to posts"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku teti:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge teti
$ git branch -d teti
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-07-01_01)

{id="02-07-01_01all", title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '2.4.1'

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 5.2.1', '>= 5.2.1.1'
# Use postgresql as the database for Active Record
gem 'pg', '>= 0.18', '< 2.0'
# Use Puma as the app server
gem 'puma', '~> 3.11'
# Use SCSS for stylesheets
gem 'sass-rails', '~> 5.0'
# Use Uglifier as compressor for JavaScript assets
gem 'uglifier', '>= 1.3.0'
# See https://github.com/rails/execjs#readme for more supported runtimes
# gem 'mini_racer', platforms: :ruby

# Use CoffeeScript for .coffee assets and views
gem 'coffee-rails', '~> 4.2'
# Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
gem 'turbolinks', '~> 5'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
gem 'jbuilder', '~> 2.5'
# Use Redis adapter to run Action Cable in production
# gem 'redis', '~> 4.0'
# Use ActiveModel has_secure_password
# gem 'bcrypt', '~> 3.1.7'

# Use ActiveStorage variant
gem 'mini_magick', '~> 4.8'

# API clients for AWS S3 services. Comunicazione con Amazon Web Service S3 per ActiveStorage
gem "aws-sdk-s3", require: false

# Use Capistrano for deployment
# gem 'capistrano-rails', group: :development

# Reduces boot times through caching; required in config/boot.rb
gem 'bootsnap', '>= 1.1.0', require: false

# Flexible authentication solution for Rails with Warden 
gem 'devise', '~> 4.5'

# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0'

# The most popular HTML, CSS, and JavaScript framework. http://getbootstrap.com
gem 'bootstrap', '~> 4.2', '>= 4.2.1'
# Use jquery as the JavaScript library
gem 'jquery-rails'

# slugging and permalink for Active Record. For creating human-friendly strings URLs and use as if they were numeric ids.
gem 'friendly_id', '~> 5.2', '>= 5.2.5'

# A rich text editor for everyday writing 
gem 'trix-rails', '~> 2.0', require: 'trix'

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
end

group :test do
  # Adds support for Capybara system testing and selenium driver
  gem 'capybara', '>= 2.15'
  gem 'selenium-webdriver'
  # Easy installation and use of chromedriver to run system tests with Chrome
  gem 'chromedriver-helper'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
~~~~~~~~




[Codice 02](#02-07-01_02)

{id="02-07-01_02all", title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 */

//*= require trix 

// Custom bootstrap variables must be set or imported *before* bootstrap.
@import "bootstrap";
@import "debug_bootstrap_grid";
~~~~~~~~




[Codice 03](#02-07-01_03)

{id="02-07-01_03all", title=".../app/assets/javascripts/application.js", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery3
//= require popper
//= require bootstrap-sprockets
//= require trix
//= require rails-ujs
//= require activestorage
//= require turbolinks
~~~~~~~~




[Codice 04](#02-07-01_04)

{id="02-07-01_04all", title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_with(model: post, local: true, url: authors_url) do |form| %>
  <% if post.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h2>

      <ul>
      <% post.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :user_id %>
    <%= form.text_field :user_id %>
  </div>


  <div class="row">
    <div class="col-md-4">
      <!--<div class="card" style="width: 18rem;">-->
      <div class="card">
        <div class="card-header">
          <h5 class="card-title"><%= yield(:page_title) %></h5>
        </div>
        <div class="card-body">
          <div class="field">
            <%= form.label :title %>
            <%= form.text_field :title, class: "form-control" %>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <%= form.label :type_of_content, class: "control-label" %>
        </div>
        <ul class="list-group list-group-flush">
          <li class="list-group-item">
            <div class="field">    
              <%= form.select(:type_of_content, Post.type_of_contents.keys.map {|type| [Post.human_attribute_name("type.#{type}"),type]}) %><!-- menu a cascata (drop-down list) -->
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <%= form.label :main_image, class: "control-label" %>
              <%= form.file_field :main_image, class: "form-control" %>
              <br>
              <% if post.main_image.attached? %>
                <%= image_tag post.main_image.variant(resize: "200x200") %>
              <% else %>
                <p>Nessuna immagine presente</p>
              <% end %>
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <%= form.label :video_youtube, class: "control-label" %>
              <%= form.text_field :video_youtube, class: "form-control" %><!-- parte di URL youtube che identifica il video -->
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <%= form.label :video_vimeo, class: "control-label" %>
              <%= form.text_field :video_vimeo, class: "form-control" %><!-- parte di URL vimeo che identifica il video -->
            </div>
          </li>
        </ul>
      </div>

      <div class="card">
        <div class="card-header">
          <p>Social</p>
        </div>
        <ul class="list-group list-group-flush">
          <li class="list-group-item">
            <div class="field">
              <label class="control-label">Immagine per i social. (476x249px)</label>
              <br><img src="https://images.pexels.com/photos/634843/pexels-photo-634843.jpeg?auto=compress&cs=tinysrgb&dpr=1&fit=crop&h=476&w=249" alt="Immagine demo presa da pexels.com" width="200" height="200"><br>
              <input type="file" name="myFile"><!-- image 476x249 px -->
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <%= form.label :seocontent, class: "control-label" %>
              <%= form.text_area :seocontent, row: "3", class: "form-control" %><!-- max 160 caratteri -->
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <label class="control-label">Tags (separati da virgola)</label>
              <textarea name="incipit" rows="2" class='form-control'>salute, sport, cucina mediterranea, mantenersi in forma</textarea>
            </div>
          </li>
          <li class="list-group-item">
            <div class="field">
              <%= form.label :date_chosen, class: "control-label"  %>
              <%#= form.date_select :date_chosen %>
              <%= form.text_field :date_chosen, class: "form-control", row: "2" %>
            </div>
          </li>


          <li class="list-group-item">
            <div class="actions">
              <%= form.submit "Salva l'articolo", class: "btn btn-success btn-lg btn-block" %>
            </div>
          </li>
        </ul>
      </div><!--.card end-->

    </div><!--.col-md-4 end-->
    
    <div class="col-md-8">
      <div class="field">
        <%= form.label :incipit %>
        <%= form.text_area :incipit, rows: "3", class:'form-control' %>
        <%#= form.trix_editor :incipit, required: true, autofocus: true %>
      </div>
  
      <div class="field"><h6>---Read More---</h6></div>
    
      <div class="field">
        <%= form.label :content, class: "control-label" %>
        <%#= form.text_area :content, rows: "8", class:'form-control' %>
        <%= form.trix_editor :content, required: true, autofocus: true %>
      </div>
    </div>
  </div>

<% end %>
~~~~~~~~
