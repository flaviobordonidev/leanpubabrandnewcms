# Pubblicato

filtriamo per gli articoli pubblicati.




## Apriamo il branch "PUBlished"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pub
~~~~~~~~




## Aggiungiamo le colonne per publish su posts

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddPublishedToPosts published:boolean published_at:datetime
~~~~~~~~

aggiungiamo al migrate creato il **default: false** alla colonna :published

{title=".../db/migrate/xxx_add_published_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddPublishedToPosts < ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :published, :boolean
    add_column :posts, :published_at, :datetime
  end
end
~~~~~~~~

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Aggiorniamo il model

aggiungiamo uno scope per gli articoli pubblicati

{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=28}
~~~~~~~~
  scope :published, -> { where(published: true) }
~~~~~~~~

[tutto il codice](#brandnewcms-published-01a-models-post.rb)




## Aggiorniamo il posts_controller di default

usiamo lo scope appena creato nel posts_controller (e non in authors/posts_controller) sull'azione index

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  def index
    @posts = Post.most_recent.published
  end
~~~~~~~~

[tutto il codice](#brandnewcms-published-01b-controllers-posts_controller.rb)




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add published to posts"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pub:master
$ heroku run rails db:migrate
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pub
$ git branch -d pub
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~