# Articoli popolari

Potremmo estrarli da quelli che hanno più commenti ma è un lavoro lungo ed abbassa le prestazioni. E' più utile che siamo noi a scegliere quali sono gli articoli che riteniamo più popolari / più interessanti da far vedere.

Inoltre popolare non vuol dire più commentato. Potrei avere un post con molti commenti tipo ciao ciao perché visitato un giorno da una scolaresca ma come visualizzazioni ne ha avute solo il giorno della scolaresca. Magari un altro articolo ha molte più visualizzazioni visibili con gli strumenti di google. Oppure ha commenti di qualità perché ha toccato veramente l'interesse delle persone o comunque ha generato una trasformazione.
Decidere cos'è popolare non è facile. Potrebbe essere un risultato di questionari mandati chiedendo il parere alle persone iscritte alla nostra lista.
Può essere varie cose ed è quindi saggio che venga scelto dall'amministratore del sito o dall'autore.

aggiungiamo un combo box o un pulsante per gli articoli popolari.




## Apriamo il branch "Popular Posts"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pp
~~~~~~~~




## Aggiungiamo la colonna per popular su posts

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddPopularToPosts popular:boolean
~~~~~~~~

aggiungiamo al migrate creato il **default: false** alla colonna :published

{title=".../db/migrate/xxx_add_popular_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddPopularToPosts < ActiveRecord::Migration[5.1]
  def change
    add_column :posts, :popular, :boolean, default: false
  end
end
~~~~~~~~

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Aggiorniamo il model

aggiungiamo uno scope per gli articoli pubblicati

{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=13}
~~~~~~~~
  scope :popular, -> { where(popular: true) }
~~~~~~~~




## Aggiorniamo il posts_controller di default

usiamo lo scope appena creato nel posts_controller (e non in author/posts_controller) sull'azione index

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
     @popular_posts = Post.popular.last(3)
~~~~~~~~





## Aggiorniamo la parte di edit del post

nella pagina authors/posts/_edit creiamo un check_box per popular.

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=30}
~~~~~~~~
          <li class="list-group-item">
            <div class="field">
              <%= form.label :popular %><!-- parte di URL youtube o vimeo che identifica il video -->
              <%= form.check_box :popular, id: :popular, class: "form-control" %>
            </div>
          </li>
~~~~~~~~




## Aggiorniamo la whitelist su authors/posts_controller

aggiungiamo **:popular** al **.permit(...)**

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
      # Never trust parameters from the scary internet, only allow the white list through.
      def post_params
        params.require(:post).permit(:title, :body, :description, :author_id, :image, :incipit, :sharing_image, :sharing_description, :tag_list, :video_id, :select_media, :popular)
      end
~~~~~~~~


verifichiamo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~









## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add published to posts"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pub:master
$ heroku run rails db:migrate
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pub
$ git branch -d pub
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~