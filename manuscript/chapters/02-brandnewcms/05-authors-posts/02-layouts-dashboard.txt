# La Dashboard

una volta loggato l'utente entrerà in un ambiente detto Dashboard da cui può gestire il CMS (content management system).
Se è un autore potrà creare, editare, eliminare, pubblicare i suoi articoli.
Se è un amministratore oltre alle azioni da autore potrà gestire tutti gli utenti.




## Apriamo il branch "Modulo Authors per la Dashboard"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b mad
~~~~~~~~




## Creiamo un layout personalizzato per la dashboard

Duplichiamo il layouts/application e rinominiamo la copia layouts/dashboard

* .../app/views/layouts/application.html.erb    ->  .../app/views/layouts/dashboard.html.erb (copia, incolla e rinomina)

Inoltre aggiungiamo il container per bootstrap ed un semplice **<h2>Solo per autori</h2>** per differenziarlo.

{title=".../app/views/layouts/dashboard.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=14}
~~~~~~~~
    <div class="container">
      <p class="notice"><%= notice %></p>
      <p class="alert"><%= alert %></p>
      <h2>Solo per Autori</h2>
      <%= yield %>
    </div>
~~~~~~~~

[tutto il codice](#brandnewcms-authors_posts-02a-views-layouts-dashboard.html.erb)





## Assegnamo il layout dashboard alle pagine degli autori

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  layout 'dashboard'
~~~~~~~~

[tutto il codice](#brandnewcms-authors_posts-02b-controllers-authors-posts_controller.rb)




## Iniziamo a personalizzare la dashboard

rendiamo auhtors/posts/index più simile ad un ambiente di "lavoro" per i posts dell'autore

{title=".../app/views/authors/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%# == Meta_data ============================================================ %>

<% provide(:page_title, "All posts") %>
<% provide(:authors_active, "active") %>

<%# == Meta_data - end ====================================================== %>

<div class="row">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Title</th>
        <th>Incipit</th>
        <th colspan="3"></th>
      </tr>
    </thead>
  
    <tbody>
      <% @posts.each do |post| %>
        <tr>
          <td><%= post.title %></td>
          <td><%= post.incipit %></td>
          <td><%= link_to 'Show', authors_post_path(post) %></td>
          <td><%= link_to 'Edit', edit_authors_post_path(post) %></td>
          <td><%= link_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>


<%= link_to 'New Post', new_authors_post_path %>
<p id="notice"><%= notice %></p>
~~~~~~~~

abbiamo inserito "authors_active" per evidenziare la nuova voce della navbar che inseriamo nel prossimo paragrafo

volendo potremmo rendere il titolo del post un link che va su show

{title=".../app/views/authors/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=18}
~~~~~~~~
          <td><%= link_to post.title, authors_post_path(post) %></td>
~~~~~~~~




## Aggiorniamo la barra di navigazione (navbar)

aggiungiamo una voce alla nostra navbar per i posts degli autori (index, edit e new)

{title=".../app/views/layouts/_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=18}
~~~~~~~~
      <li class="nav-item <%= yield(:authors_active) %>">
        <%= link_to 'Area Modifiche', authors_posts_path, class: "nav-link" %>
      </li>
~~~~~~~~

ed i relativi **provide**, per lo **yield** nei rispettivi views

{title=".../app/views/authors/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=2}
~~~~~~~~
<% provide(:authors_active, "active") %>
~~~~~~~~

{title=".../app/views/authors/posts/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=2}
~~~~~~~~
<% provide(:authors_active, "active") %>
~~~~~~~~

{title=".../app/views/authors/posts/edit.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=2}
~~~~~~~~
<% provide(:authors_active, "active") %>
~~~~~~~~





## Correggiamo i reinstradamenti delle azioni di modifica dei posts

Nel nostro controller authors/posts_controller correggiamo i reinstradamenti delle azioni update, create e destroy

in realtà mi va bene che dopo la creazione e l'aggiornamento vada sul posts standard. l'unica modifica è per il destroy

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=61}
~~~~~~~~
        format.html { redirect_to authors_posts_url, notice: 'Post was successfully destroyed.' }
~~~~~~~~




## Correggiamo il sumbit del form

Effettuato il submit del nostro form dobbiamo arrivare all'azione create o update sul controller auhtors/posts_controller.
Per convenzione rails dopo il submit siamo reinstradati sull'azione create o update del controller posts_controller.
Dobbiamo quindi specificare, effettuato il submit, l'url a cui deve andare con post/patch perché il percorso non è più in convenzione rails.
Per far questo dobbiamo passargli l'url comprensivo del namespace.
Siccome sono due percorsi diversi uno per edit e l'altro per new usiamo una variabile che chiamiamo **url** e passiamo il valore dal render di edit e dal render di new.
Detto in altro modo:
Siccome l'url è diverso a seconda se sono su edit o su new, gli passiamo una variabile con il valore settato nelle rispettive pagine. Questa variabile la chiamiamo "url".


{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_with(model: post, local: true, url: url) do |form| %>
~~~~~~~~


{title=".../app/views/authors/posts/edit.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=6}
~~~~~~~~
<%= render 'form', post: @post, url: authors_post_url(@post) %>
~~~~~~~~

{title=".../app/views/authors/posts/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= render 'form', post: @post, url: authors_posts_url %>
~~~~~~~~




Per questo capitolo è tutto



salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Incapsule a copy of posts in the module author"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku mad:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge mad
$ git branch -d mad
~~~~~~~~


aggiorniamo github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
