

## Aggiungiamo l'utente alla tabella posts

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration add_author_id_to_posts author_id:integer
~~~~~~~~

aggiungiamo l'indice

{title=".../db/migrate/xxx_add_author_id_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAuthorIdToPosts < ActiveRecord::Migration[5.1]
  def change
    add_column :posts, :author_id, :integer
    add_index :posts, :author_id
  end
end
~~~~~~~~

e facciamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~



## Collegamento uno-a-molti


{title=".../app/models/author.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  has_many :posts
~~~~~~~~


{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  belongs_to :author
~~~~~~~~




## Attiviamo la protezione da autenticazione per tutto il modulo Authors

Nel controller authors_controller che abbiamo creato ex-novo nello "split"

{title=".../app/controllers/authors_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AuthorsController < ApplicationController
  before_action :authenticate_author!
end
~~~~~~~~

basta una sola chiamata **:authenticate_author!** che usa devise, per coprire tutto il modulo. Questo uno dei vantaggi di aver incapsulato una copia di posts dentro il modulo authors

siccoma abbiamo diviso tutto quest'unica chiamata protegge tutto il namespace ...authors... 

una volta loggati ci rendiamo conto di vedere ancora tutti i posts e non solo i nostri. Correggiamo nel prossimo paragrafo.




## Filtriamo i posts per utente loggato

Nel controller authors/posts_controller sostituisco **Post** con **current_author.posts** nelle azioni index, new, create e nel metodo privato set_post

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=10}
~~~~~~~~
      @posts = current_author.posts.most_recent
~~~~~~~~

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
      @post = current_author.posts.new
~~~~~~~~

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=32}
~~~~~~~~
      @post = current_author.posts.new(post_params)
~~~~~~~~

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=73}
~~~~~~~~
        @post = current_author.posts.friendly.find(params[:id])
~~~~~~~~




## Effettuiamo il LOGOUT

per usire dall'area dell'autore è sufficiente un link con ** destroy_author_session_path, method: :delete **. Aggiungiamo quindi questa nuova voce nella barra di navigazione.

{title=".../app/views/layouts/_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=23}
~~~~~~~~
      <li class="nav-item">
        <%= link_to 'Logout', destroy_author_session_path, method: :delete, class: "nav-link" %>
      </li>
~~~~~~~~




## Rendiamo visibile la voce "myposts" solo se siamo loggati

{title=".../app/views/layouts/_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=18}
~~~~~~~~
      <% if author_signed_in? %>
        <li class="nav-item <%= yield(:authors_active) %>">
          <%= link_to 'My posts', authors_posts_path, class: "nav-link" %>
        </li>
      <% end %>
~~~~~~~~




Per questo capitolo è tutto




salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Install Devise and implement it"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ldi:master
$ heroku run rails db:migrate
~~~~~~~~

Installando devise siamo intervenuti sul database locale e quindi dobbiamo aggiornare anche quello remoto su Heroku



## Popoliamo da terminale il database su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
> Author.create(name: 'FB', email: 'flavio@test.abc', password: 'password', password_confirmation: 'password')
> exit
~~~~~~~~

Author.create(name: 'Anima Affetto', email: 'affetto@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Apatia', email: 'apatia@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Coinvolgimento', email: 'coinvolgimento@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Contribuizione', email: 'contribuizione@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Dedizione', email: 'dedizione@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Distacco', email: 'distacco@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Oculatezza', email: 'oculatezza@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Profondità', email: 'profondita@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Spreco', email: 'spreco@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Superficialità', email: 'superficialita@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Uno come tanti', email: 'unocometanti@rebisworld.com', password: 'password', password_confirmation: 'password')

Author.create(name: 'Anima Vitalità', email: 'vitalita@rebisworld.com', password: 'password', password_confirmation: 'password')




## ERRORE E TROUBLESHOOTING

Anche se in locale funzionava tutto su heroku avevo un errore quando premevo link per creare nuovo articolo.
guardando le log di heroku ho visto che il problema è sul controller per l'azione new. (Alquanto ovvio ^_^)
L'indizio importante è stato **unknown attribute 'author_id' for Post**

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku logs
  Completed 500 Internal Server Error in 12ms (ActiveRecord: 3.1ms)
  ActiveModel::UnknownAttributeError (unknown attribute 'author_id' for Post.):
  app/controllers/authors/posts_controller.rb:20:in `new'
~~~~~~~~

Ho fatto un po' di prove da terminale e sembrava tutto ok, quando si è accesa la lampadina! Ci siamo scordati di aggiungere :author_id alla lista bianca per il massive assignment. Aggiunta la voce, problema risolto! :)

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=61}
~~~~~~~~
      # Never trust parameters from the scary internet, only allow the white list through.
      def post_params
        params.require(:post).permit(:title, :body, :description, :author_id)
      end
~~~~~~~~




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Fix bug on new post"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ldi:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ldi
$ git branch -d ldi
~~~~~~~~


aggiorniamo github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
