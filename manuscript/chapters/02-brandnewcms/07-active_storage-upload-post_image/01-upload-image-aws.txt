# Upload immagine tramite AWS

Abbiamo già installato ActiveRecord ed implementato un bucket di prova su AWS. Adesso usiamo il tutto per fare upload di immagini nei nostri articoli


Risorse web:
* https://evilmartians.com/chronicles/rails-5-2-active-storage-and-beyond
 Articolo interessante con anche la gestione di uploads multipli "Multiple attachments"




## Apriamo il branch "Upload Image"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ui
~~~~~~~~






## Attiviamo upload immagine per post

Implementiamo un campo in cui carichiamo le immagini per i nostri articoli usando **has_one_attached** di active_storage
Nel model sotto la sezione "# == Attributes ===" -- "## ActiveStorage"

{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  has_one_attached :main_image
~~~~~~~~

[tutto il codice](#brandnewcms-active_storage-upload-post_image-01a-models-post.rb)

Ogni volta che facciamo l'upload di un'immagine come "main_image" questa chiamata aggiorna in automatico i metatdata della tabella blobs ed il collegamento della tabella attachments. 




## Aggiorniamo il controller

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=70}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :type, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id, :header_image, :main_image)
    end
~~~~~~~~

[tutto il codice](#brandnewcms-active_storage-upload-post_image-01b-controllers-posts_controller.rb)




## Implementiamo la view

{title=".../app/views/example_posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
  <div class="field">
    <%= form.label :main_image %>
    <%= form.file_field :main_image %>
  </div>
~~~~~~~~

Per visualizzare l'immagine basta **image_tag @post.main_image** ma per sicurezza mettiamo anche un controllo

{title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
<% if @post.main_image.attached? %>
  <%= image_tag @post.main_image %>
<% else %>
  <p>Nessuna immagine presente</p>
<% end %>
~~~~~~~~




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~




## Didattico - risolviamo problema di InvalidAccessKeyId su AWS

Se abbiamo modificato o sono scadute le chiavi di accesso su Amazon Web Service riceveremo il seguente errore:

Aws::S3::Errors::InvalidAccessKeyId in Authors::PostsController#update
The AWS Access Key Id you provided does not exist in our records.

Per risolvere colleghiamoci su Amazon. Andiamo su IAM --> Users --> botrebisworldbr --> Security credentials

Creiamo un nuovo access key premendo il pulsante "Create access key" ed aliminiamo la vecchia access key
Inseriamo "Access key ID" e "Secret access key" nel nostro file criptato 
ATTENZIONE: per ragioni di sicurezza non copiamole in nessun posto che non sia crittato. Tanto se le dimentichiamo dobbiamo soltanto crearne una nuova ed eliminare la vecchia. 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ EDITOR=vim rails credentials:edit
~~~~~~~~

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
aws:
 access_key_id: AKI...LWBYA
 secret_access_key: sx1......G2nyKdela
~~~~~~~~

Verifichiamo lettura secrets nel file criptato

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
> Rails.application.credentials.dig(:aws, :access_key_id)   # => "AKI...LWBYA"
> Rails.application.credentials.dig(:aws, :secret_access_key)   # => "sx1......G2nyKdela"
~~~~~~~~




## Piccola miglioria su edit

visualizziamo l'immagine se è presente anche in fase di edit. 

{title=".../app/views/example_posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
  <div class="field">
    <%= form.label :main_image %>
    <%= form.file_field :main_image %>
    <br>
    <% if post.main_image.attached? %>
      <%= image_tag post.main_image %>
    <% else %>
      <p>Nessuna immagine presente</p>
    <% end %>
  </div>
~~~~~~~~

Questa miglioria non è ancora molto "user friendly" perché quando carico una nuova immagine non mi viene visualizzata.
Più avanti useremo javascript per implementare una barra di avanzamento sul caricamento dell'immagine ed un preview dell'immagine caricata che verrà salvata nel database solo a seguito del submit del form. Se non facciamo il submit del form resta la vecchia immagine.




## Ridimensioniamo l'immagine

Per ridimensionare l'immagine possiamo chiamare il **.variant(...)**

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
  <%= image_tag @post.header_image.variant(resize: "400x400") %>
~~~~~~~~

[tutto il codice](#brandnewcms-active_storage-upload-post_image-01c-views-authors-posts-_form.html.erb)

Attenzione! per funzionare il .variand necessita di minimagic (già installato nei capitoli precedenti)




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~





## salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add main_image on posts via ActiveStorage AWS S3"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ui:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ui
$ git branch -d ui
~~~~~~~~




## Facciamo un backup su Github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
