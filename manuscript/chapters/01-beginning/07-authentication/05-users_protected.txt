# Implementiamo la sicurezza e la protezione di Devise

Rendiamo non accessibili le pagine di gestione degli utenti a chi non è autenticato.
Questa è quasi una forma di autorizzazione ma l'autorizzazione vera è basata su ruoli differenti che hanno i vari utenti che fanno login / che si autenticano.
Quando implementeremo la parte di autorizzazione nei prossimi capitoli disattiveremo temporaneamente la non accessibilità creata con Devise alle pagine a cui possono accedere solo gli utenti loggati.


Risorse web:

*[redirect to a specific page on successful sign_in](https://github.com/plataformatec/devise/wiki/How-To:-redirect-to-a-specific-page-on-successful-sign_in,-sign_out,-and-or-sign_up)
*[elaborate on the redirect](https://stackoverflow.com/questions/13129254/how-to-direct-user-to-a-specific-page-after-logging-in-with-devise-and-rails)




## Apriamo il branch "Protect With Login"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pwl
~~~~~~~~




## Proteggiamo le views users
Permettiamo l'accesso alle views users solo a chi ha fatto login, ossia a chi si è autenticato.

{id="01-07-05_01", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
  before_action :authenticate_user!
~~~~~~~~

[Codice 01](#01-01-05_01all)

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.




## Reinstradiamo sull'utente dopo il login

Al momento una volta effettuato il login veniamo instradati sulla pagina principale (root_path). Inseriamo un metodo per tutti i controllers che reinstradi su users/show dell'utente che ha fatto login.

{id="01-07-05_02", title="controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationController < ActionController::Base

  def after_sign_in_path_for(resource_or_scope)
    current_user
    #users_path #goes to users/index
  end

end
~~~~~~~~

[Codice 02](#01-01-05_02all)

Questo metodo ci permette di instradare su qualsiasi pagina in funzione del ruolo dell'utente loggato.
Ad esempio se è un amministratore lo potrei instradare su users_path così ha la lista di tutti gli utenti su cui può lavorare. Se invece è un autore lo possiamo reinstradare sulla dashboard del blog. Se è un lettore sulla pagina del blog. ecc...




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

dalla root_path:

* https://mycloud9path.amazonaws.com/

facciamo login e vediamo che siamo reinstradati sulla pagina dell'utente loggato.




## Evitiamo di dover sempre dare una password

Una volta attivata la protezione **before_action :authenticate_user!** si attiva anche la validazione per la presenza della password. Questo vuol dire che se si lascia vuoto il campo password si riceve un errore di validazione. In questo caso è utile rimuovere nel controller la chiave "password" dall'hash "params" nel caso in cui il campo password del form è lasciato vuoto. Per farlo aggiungiamo il seguente codice nell'azione di update:

{id="01-07-05_03", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=44}
~~~~~~~~
  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
~~~~~~~~

[Codice 03](#01-01-05_03all)




## Evitiamo che l'amministratore loggato possa eliminare se stesso

Evitiamo di fare come nei film comici e "tagliarci il ramo su cui stiamo seduti": **@user.destroy unless @user == current_user** e diamo un messaggio differente se eliminato o non eliminato.

{id="01-07-05_04", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=60}
~~~~~~~~
  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy unless @user == current_user
    respond_to do |format|
      format.html do 
        redirect_to users_url, notice: 'User was successfully destroyed.' unless @user == current_user
        redirect_to users_url, notice: 'Non posso eliminare utente loggato.' if @user == current_user
      end
      format.json { head :no_content }
    end
  end
~~~~~~~~

[Codice 04](#01-01-05_04all)

Al momento tutti gli utenti hanno autorizzazione a fare tutto; nei futuri capitoli implementeremo le autorizzazioni restringendo la possibilità di eliminazione degli utenti ai soli utenti con ruolo di amministratore.





### Verifichiamo preview

Partiamo col webserver

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

Andiamo sulla pagina degli utenti e proviamo ad eliminare l'utente loggato. Riceveremo il messaggio di mancata autorizzazione.

* https://mycloud9path.amazonaws.com/users

Possiamo creare un nuovo utente ed eliminarlo. L'utente verrà eliminato e riceveremo il messaggio di eliminazione avvenuta con successo.




### Mostriamo link di eliminazione solo se autenticato

Sulla view mostriamo il link di eliminazione solo se non è l'utente loggato **unless user == current_user**

{id="01-07-05_05", title=".../app/views/users/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=25}
~~~~~~~~
        <td><%= link_to 'Destroy', user,  method: :delete, data: { confirm: 'Are you sure?' } unless user == current_user %></td>
~~~~~~~~

[Codice 05](#01-01-05_05all)




### Verifichiamo preview

Partiamo col webserver

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

Andiamo sulla pagina degli utenti.

* https://mycloud9path.amazonaws.com/users

Vedremo che nell'elenco degli utenti l'utente loggato non ha il link di "destroy".




## Implementiamo un re-login automatico su cambio password

Al momento cambiando la password siamo automaticamente riportati al login. Facciamo in modo di essere loggati di nuovo automaticamente col sign_in di Devise bypassando le validazioni.
Scriviamo la logica interrompendo il codice con **raise** che fa sorgere un errore:

{title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
   if current_user.present? and current_user == @user
     raise "Current_user #{current_user.email} vuole modificare se stesso! (utente #{@user.email})"
   elsif current_user.present? and current_user != @user
     raise "Current_user #{current_user.email} vuole modificare utente #{@user.email}"
   else
     raise "NON SEI LOGGATO"
   end
~~~~~~~~

Adesso che abbiamo la logica impostata possiamo associarci il codice:
* se modifichiamo un'altro utente, lasciamo il codice così com'è che già va bene.
* se modifichiamo l'utente loggato, allora mettiamo del codice che rieffettua un login automatico.

{id="01-07-05_06", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    respond_to do |format|
      if current_user.present? and current_user == @user
        if @user.update(user_params)
          #format.html { redirect_to @user, notice: 'User was successfully updated.' }
          format.html do
            # Logghiamoci di nuovo automaticamente bypassando le validazioni
            sign_in(@user, bypass: true)
            redirect_to @user, notice: 'User was successfully updated.'
          end
          format.json { render :show, status: :ok, location: @user }
        else
          format.html { render :edit }
          format.json { render json: @user.errors, status: :unprocessable_entity }
        end
      else
        if @user.update(user_params)
          format.html { redirect_to @user, notice: 'User was successfully updated.' }
          format.json { render :show, status: :ok, location: @user }
        else
          format.html { render :edit }
          format.json { render json: @user.errors, status: :unprocessable_entity }
        end
      end
    end
  end
~~~~~~~~

[Codice 06](#01-01-05_06all)


Questo codice funziona ma è veramente brutto perché duplichiamo due grandi pezzi di codice. Facciamo un refactoring.
Il problema è sulla riga "if @user.update(user_params)" che fa sia l'azione di update che il controllo se è andata a buon fine.
Quando l'update è fatto sull'utente loggato (ossia il current_user) questo è immediatamente buttato fuori (logged out) ed il current_user è svuotato (=nil).
Questo mi impedisce di fare un più elegante ** sign_in(@user, bypass: true) if @user == current_user **
Possiamo farlo usando una variabile di appoggio che chiamiamo **current_user_temp** e che ci manterrà attivo l'utente che era loggato giusto il tempo di loggarlo di nuovo in automatico.

{id="01-07-05_07", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    current_user_temp = current_user
    respond_to do |format|
      if @user.update(user_params)
        format.html do
          # Logghiamoci di nuovo automaticamente bypassando le validazioni
          sign_in(@user, bypass: true) if @user == current_user_temp
          redirect_to @user, notice: 'User was successfully updated.'
        end
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
~~~~~~~~

[Codice 07](#01-01-05_07all)

Adesso è molto meglio ^_^




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Implement devise protection to users and more"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pwl:master
$ heroku run rails db:migrate
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pwl
$ git branch -d pwl
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Permettiamo agli utenti di editare la loro password

QUESTO PARAGRAFO NON L'HO IMPLEMENTATO

Questo non so se mi serve... Mi sa che lo posso eliminare....

ApplicationController.rb:
~~~~~~~~
class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  def configure_permitted_parameters
    update_attrs = [:password, :password_confirmation, :current_password]
    devise_parameter_sanitizer.permit :account_update, keys: update_attrs
  end
end
~~~~~~~~




## Il codice del capitolo




[Codice 01](#01-01-05_01)

{id="01-07-05_01all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
  
  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    respond_to do |format|
      if @user.update(user_params)
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy
    respond_to do |format|
      format.html { redirect_to users_url, notice: 'User was successfully destroyed.' }
      format.json { head :no_content }
    end
  end
  
  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at)
    end
end
~~~~~~~~




[Codice 02](#01-01-05_02)

{id="01-07-05_02all", title="controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationController < ActionController::Base

  def after_sign_in_path_for(resource_or_scope)
    current_user
    #users_path #goes to users/index
  end

end
~~~~~~~~




[Codice 03](#01-01-05_03)

{id="01-07-05_03all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    respond_to do |format|
      if @user.update(user_params)
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy
    respond_to do |format|
      format.html { redirect_to users_url, notice: 'User was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at)
    end

end
~~~~~~~~




[Codice 04](#01-01-05_04)

{id="01-07-05_04all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    respond_to do |format|
      if @user.update(user_params)
        format.html { redirect_to @user, notice: 'User was successfully updated.' }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy unless @user == current_user
    respond_to do |format|
      format.html do 
        redirect_to users_url, notice: 'User was successfully destroyed.' unless @user == current_user
        redirect_to users_url, notice: 'Non posso eliminare utente loggato.' if @user == current_user
      end
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at)
    end

end
~~~~~~~~




[Codice 05](#01-01-05_05all)

{id="01-07-05_05", title=".../app/views/users/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=25}
~~~~~~~~
<p id="notice"><%= notice %></p>

<h1>Users</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Encrypted password</th>
      <th>Remember created at</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @users.each do |user| %>
      <tr>
        <td><%= user.name %></td>
        <td><%= user.email %></td>
        <td><%= user.encrypted_password %></td>
        <td><%= user.remember_created_at %></td>
        <td><%= link_to 'Show', user %></td>
        <td><%= link_to 'Edit', edit_user_path(user) %></td>
        <td><%= link_to 'Destroy', user,  method: :delete, data: { confirm: 'Are you sure?' } unless user == current_user %></td>
          <%#= link_to("Destroy", user_path(user), :data => { :confirm => "Are you sure?" }, :method => :delete, :class => 'button-xs') unless user == current_user %>
          <%#= link_to 'Destroy', user, method: :delete, data: { confirm: 'Are you sure?' } %>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New User', new_user_path %>
~~~~~~~~




[Codice 06](#01-01-05_06)

{id="01-07-05_06all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    respond_to do |format|
      if current_user.present? and current_user == @user
        if @user.update(user_params)
          #format.html { redirect_to @user, notice: 'User was successfully updated.' }
          format.html do
            # Logghiamoci di nuovo automaticamente bypassando le validazioni
            sign_in(@user, bypass: true)
            redirect_to @user, notice: 'User was successfully updated.'
          end
          format.json { render :show, status: :ok, location: @user }
        else
          format.html { render :edit }
          format.json { render json: @user.errors, status: :unprocessable_entity }
        end
      else
        if @user.update(user_params)
          format.html { redirect_to @user, notice: 'User was successfully updated.' }
          format.json { render :show, status: :ok, location: @user }
        else
          format.html { render :edit }
          format.json { render json: @user.errors, status: :unprocessable_entity }
        end
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy unless @user == current_user
    respond_to do |format|
      format.html do 
        redirect_to users_url, notice: 'User was successfully destroyed.' unless @user == current_user
        redirect_to users_url, notice: 'Non posso eliminare utente loggato.' if @user == current_user
      end
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at)
    end

end
~~~~~~~~




[Codice 07](#01-01-05_07)

{id="01-07-05_07all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    current_user_temp = current_user
    respond_to do |format|
      if @user.update(user_params)
        format.html do
          # Logghiamoci di nuovo automaticamente bypassando le validazioni
          sign_in(@user, bypass: true) if @user == current_user_temp
          redirect_to @user, notice: 'User was successfully updated.'
        end
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy unless @user == current_user
    respond_to do |format|
      format.html do 
        redirect_to users_url, notice: 'User was successfully destroyed.' unless @user == current_user
        redirect_to users_url, notice: 'Non posso eliminare utente loggato.' if @user == current_user
      end
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at)
    end

end
~~~~~~~~
