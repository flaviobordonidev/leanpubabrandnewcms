# Organizzare i models

Risorse web

*[Organizing Ruby on Rails Models](https://www.zmwolski.com/Organizing-Ruby-on-Rails-Models)



## Divisori da mettere dentro i models

Allinterno dei models della nostra applicazione usare i seguenti divisori

{title=".../app/models/my_model.rb", lang=ruby, line-numbers=on, starting-line-number=14}
~~~~~~~~
  # == Constants ============================================================

  # == Attributes ===========================================================
  
  # == Extensions ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
~~~~~~~~




### == Constants

Sono variabili fisse in genere tutte scritte in maiuscolo.

* MY_CONSTANT = ...




### == Attributes

Sono delle "nuove colonne" che vengono fornite alla tabella del model. In altre parole sono attributi della tabella non definiti a livello di database.

* attr_accessor :my_column_x
* translates :my_article_description
* has_attached_file :my_logo_image




### == Extensions

Sono delle linee di codice precedute dalla chiamata "extend" 

*   extend MyPersonalExternalModel
    my_personal_external_model :column_y, use: :my_special_action
    
*   extend FriendlyId
    friendly_id :title, use: :slugged




### == Relationships

Sono le relazioni uno-a-uno, uno-a-molti, molti-a-molti, polimoprfiche, ...

* has_many :documents
* belongs_to :user 




### == Validations

Sono le funzioni di validazione implementate su alcune colonne della tabella.

* validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true




### == Scopes

Sono chiamate di tipo lambda a delle queries che possiamo anche concatenare.

 TODO




### == Callbacks

Sono le chiamate che "solitamente" vediamo tra le prime ad esempio nei controllers. Nel caso del model sono finite un po' più in basso.
Sono le chiamate alle funzioni che vengono fatte "scattare" da un determinato evento (trigger).

* before_validation :my_method_that_is_activated
* after_validation :my_other_method_that_is_activated




### == Class Methods

sono i metodi scritti dentro il model che fanno riferimento a se stesso.

def self.my_class_method
  ...
end




### == Instance Methods

sono i metodi scritti dentro il model.

def my_class_method
  ...
end





### Esempio

  # == Constants ============================================================
  
  GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

  # == Attributes ===========================================================
  
  # ATTRIBUTES NOT MAPPED IN DATABASE (getter and setter methods)

  ## paperclip
  attr_accessor :remove_logo

  ## globalize
  translates :sector, :memo, :fallbacks_for_empty_translations => true

  ## paperclip
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }

  has_attached_file :avatar, styles: {
    square_100: ‘100x100#’,
    square_300: ‘300x300#’
  }

  # == Extensions ===========================================================

  ## friendly_id
  extend FriendlyId
  friendly_id :title, use: :slugged
  
  # == Relationships ========================================================
  
  ## association one-to-many
  has_many :documents

  # == Validations ==========================================================
  
  validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true

  # == Scopes ===============================================================

  # == Callbacks ============================================================
  
  before_validation :normalize_name, on: :create
  after_validation :set_location, on: [ :create, :update ]
    
  # == Class Methods ========================================================
  
  def self.for_select
    all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
  end

  def self.from_the_class
    "Hello, from a class method"
  end

  # == Instance Methods =====================================================

  def from_an_instance
    "Hello, from an instance method"
  end
 
  private
    def normalize_name
      self.name = name.downcase.titleize
    end
 
    def set_location
      self.location = LocationService.query(self)
    end
