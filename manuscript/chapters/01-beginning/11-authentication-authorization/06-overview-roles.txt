# Roles

Spieghiamo come assegnare i vari ruoli e quando è utile rolify. 
Iniziamo col dire che la maggior parte delle applicazioni non ha un livello di sofisticazione per cui è richiesto rolify.
In un capitolo più avanti vedremo come usare rolify negli esempi pratici che implementiamo in questi primi capitoli.

Esistono tre forme principali per determinare dei ruoli:

* admin - livello base di autorizzazione
* enum - copre quasi la totalità delle esigenze di autorizzazione
* rolify - massima flessibilità con una gemma ed una tabella roles con relazione molti-a-molti
  
Le vedremo in dettaglio più avanti in questo capitolo.




## new branch

non serve perché questo capitolo è solo una panoramica




## Pundit

Abbiamo visto come Devise permette di autenticare un utente facendogli fare login. Inoltre Devise si sovrappone un poco a Pundit perché ha una sorta di autorizzazione a livello di view.
Possiamo infatti indicare quali sono le pagine che per essere viste hanno bisogno che un utente sia autenticato (abbia fatto login).

Quindi possiamo dire che Devise ha una sorta di autorizzazione a livello di view.
Similmente possiamo dire che Pundit ha una autorizzazione a livello di tabelle.

Ogni file di policy (set di regole di autorizzazione) ha un corrispettivo file model ed è quindi legato alla tabella del database.
Con pundit autorizziamo le azioni da fare sul database. Nell'esempio qui in basso abbiamo un'idea:

s : show
n : new/create
e : edit/update
d : destroy
* : autorizzato solo per un ristretto set di records. (senza asterisco è autorizzato per tutti i records)

       tabelle: | users   | posts     | companies | products | offers | invoices |
----------------------------------------------------------------------------------
admin           | s,n,e,d | s,-,e,d   |
moderator       | -,-,-,- | s*,-,-,d  |
author          | -,-,-,- | s*,n,e,d  |
contabile       | -,-,-,- | s*,-,-,-  |
tecnico         | -,-,-,- | s*,-,-,-  |
commerciale     | -,-,-,- | s*,-,-,-  |
supervisore     | s,-,-,- | s,-,-,-   |


Vediamo più in dettaglio le autorizzazioni per la tabella Posts:

Tabella Posts
  admin
    show : all records
    new  : no
    edit : all records
    destroy : any record
  moderator
    show : only published records
    new  : no
    edit : no
    destroy : only published records
  author
    show : all published and any of his own records
    new  : yes
    edit : all his own records
    destroy : any of his own record
  ...
  ...
  ...



## enum vs rolify

Questo è l'approccio più flessibile nella gestione dei ruoli. E' come una relazione molti-a-molti con polimorfismo.
Possiamo essere estremamente flessibili, ma nella maggior parte dei casi non ci serve questo livello di flessibilità.

* Se vogliamo gestire un Blog e fare in modo che un autore possa modificare solo i suoi records
  è sufficiente Pundit con una relazione uno a molti user->posts
  altrimenti usiamo Rolify assegnando il ruolo di autore in fase di creazione di articolo (current_user.add_role :author, @post)

* Se, come autori, vogliamo condividere (sharing) un nostro post con altri utenti.
  per avere solo Pundit dobbiamo creare una relazione molti-a-molti con tabella user_post_maps
  altrimenti usiamo Rolify assegnando il ruolo di autore ad un collega con un link reinstradato ad un metodo personalizzato nel controller.

* Se vogliamo gestire che un utente veda solo le transazioni dell'azienda a cui appartiene 
  con solo Pundit dobbiamo creare più relazioni.
  Aggiungendo Rolify usiamo le sue relazioni.

* Se vogliamo assegnare più autorizzazioni ad un utente es: pass_area1, pass_area2, pass_area3
  con solo Pundit dobbiamo creare più campi enum o gestire su un unico campo tutte le combinazioni : 1, 2, 3, 1e2, 1e3, 2e3, 1e2e3.
  aggiungendo Rolify questa gestione è più semplice

