# Devise - funzionalità aggiuntive e stile

La struttura base di devise è pronta, adesso implementiamo quelle piccole modifiche per personalizzare l'esperienza dell'autenticazione. Cambiamo l'url, attiviamo il pulsante di logout, implementiamo del css, implementiamo l'internazionalizzazione e molto altro.

Risorse web:

* https://github.com/plataformatec/devise
* https://github.com/plataformatec/devise/wiki/How-To:-Add-sign_in,-sign_out,-and-sign_up-links-to-your-layout-template
* https://github.com/plataformatec/devise/wiki/How-To:-Change-the-default-sign_in-and-sign_out-routes
* https://github.com/plataformatec/devise#configuring-routes




## Apriamo il branch "Login Devise More Functions and style"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ldmf
~~~~~~~~




## Implementiamo i link di login e logout

Mettiamo i links sulla nostra pagina di example_pages page_a

{title="views/example_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% if user_signed_in? %>
  <li class="nav-item">
    <%= link_to 'Logout', destroy_user_session_path, method: :delete, class: "nav-link" %>
  </li>
<% else %>
  <li class="nav-item">
    <%= link_to 'Login', new_user_session_path, class: "nav-link" %>  
  </li>
<% end %>
~~~~~~~~




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~




## Formattiamo il login e logout con delle icone

E' semplicemente usare il **link_to ... do** 

invece di
            <%#= link_to "Sign Out", destroy_user_session_path, method: :delete %>

facciamo            
            <%= link_to destroy_user_session_path, method: :delete do %>
               <em class="icon-lock"></em>
            <% end %>




## Modifichiamo l'url per il login

invece di **https://mydomain/users/sign_in** impostiamo l'url per **https://mydomain/login**
Per evitare di avere il sign_in nella sottodirectory "users/" e per un nostro più user-friendly "login" al posto del default di devise "sign_in"

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'login'}
~~~~~~~~

Qualora personalizzassimo la pagina di logout/sign_out ed attivassimo la possibilità all'utente di registrarsi possiamo aggiungerli

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'login', sign_out: 'logout', sign_up: "signup"}
~~~~~~~~

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'entra', sign_out: 'esci', sign_up: "registrati"}
~~~~~~~~




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

da notare che non abbiamo dovuto cambiare i puntamenti **destroy_user_session_path** e **new_user_session_path**




## Instradiamo verso gli articoli dopo il login

Effettuato il login invece di tornare alla pagina di root (homepage) andiamo alla lista degli articoli (posts)
Lasciamo la homepage come pagina di **root** e dopo il login reinstradiamo sulla pagina **users/sohw**

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
    get 'example_posts', to:'example_posts#index', as: :user_root #creates user_root_path (default path after sign_in)
~~~~~~~~

verifichiamo che funziona tutto


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add homepage login to example_posts"
~~~~~~~~


I> Attenzione se Proteggiamo anche la pagina root (homepage) con devise abbiamo un comportamento "strano"

{title="app/controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_filter :authenticate_user!
~~~~~~~~

In questo caso al primo login si entra nella homepage. 
Se si riprova a fare login - http://localhost:3000/users/sign_in - quando si è già loggati allora si viene reinstradati su users/show.

Meglio lasciare la homepage pubblica con il link che ti fa fare login all'area riservata (protetta da devise + pundit).






## Attiviamo l'autorizzazione per la creazione, modifica ed eliminazione degli articoli

Mettiamo la porta sul controller di users

[codice: users controllers 01](#code-devise-users-controllers-01)

{title="app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_action :authenticate_user!

  def show
    #@user = User.find(current_user.id)
    # current_user is generated by the gem "devise"
    @user = current_user
  end
~~~~~~~~

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.




## Lavoriamo sul view users show

{title="app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=3}
~~~~~~~~
<p>User: <%= @user.email %></p>
~~~~~~~~

verifichiamo che funziona tutto con - $ rails s -
http://localhost:3000
http://localhost:3000/homepage/index
http://localhost:3000/users/1
http://localhost:3000/users/sign_in

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add users-show"
~~~~~~~~

