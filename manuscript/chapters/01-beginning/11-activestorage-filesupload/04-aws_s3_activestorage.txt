# AWS S3 su ActiveRecord

Non dobbiamo installare nessuna gemma ma semplicemente effettuare il collegamento con S3 usando i secrests criptati.

Risorse web:

* [Rails Guides - Active Storage Overview - 2.2 Amazon S3 Service](http://edgeguides.rubyonrails.org/active_storage_overview.html)
* [Direct Uploads with Rails ActiveStorage dal min 4:10](https://gorails.com/episodes/direct-uploads-with-rails-active-storage)
* [Active Storage on Heroku](https://devcenter.heroku.com/articles/active-storage-on-heroku)



## Apriamo il branch "AWS S3 on ActiveRecord"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b asar
~~~~~~~~




## installiamo aws-sdk per comunicare con amazon web service S3

Seguendo la guida Rails installiamo **gem "aws-sdk-s3", require: false** invece di tutta la suite **gem 'aws-sdk', '~> 3.0', '>= 3.0.1'**

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/aws-sdk-s3)
I>
I> facciamo riferimento al [tutorial github della gemma](http://github.com/aws/aws-sdk-ruby)

{title=".../Gemfile", lang=ruby, line-numbers=on, starting-line-number=48}
~~~~~~~~
# API clients for AWS S3 services. Comunicazione con Amazon Web Service S3 per ActiveStorage
gem "aws-sdk-s3", require: false
~~~~~~~~

[tutto il codice: Gemfile](#brandnewcms-02code-gemfile.rb)

Eseguiamo l'installazione della gemma con bundle

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Verifichiamo connessione da rails console

Installando la gemma **aws-sdk-s3** non possiamo fare le verifiche da console perché ci mancano delle funzioni. Le possiamo fare con la gemma completa **aws-sdk**.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c

# Se non diamo le credenziali, ossia i secrets, abbiamo un errore

> s3 = Aws::S3::Resource.new(region: 'eu-central-1')
Aws::Sigv4::Errors::MissingCredentialsError: missing credentials, provide credentials with one of the following options:
  - :access_key_id and :secret_access_key
  - :credentials
  - :credentials_provider
        from (irb):2:in `new'
        from (irb):2

# Se le passiamo sbagliate lui non ci da immediatamente un errore

> s3 = Aws::S3::Resource.new(region: 'eu-central-1', access_key_id: 'BULLABALLA', secret_access_key: 'NonSonoQuellaGiusta')

# l'errore ci viene dato quando proviamo ad accedere ai buckets
> bk = s3.bucket('rebisworldbr-dev')
> obj = s3.bucket('rebisworldbr-dev').object('miofile')
> obj.upload_file(filepath)

> cs3 = Aws::S3::Client.new(region: 'eu-central-1', access_key_id: 'AKIAJKSMLLS2TYDLWBYA', secret_access_key: 'sx1IVoTNJdtyBdr0N8AHldT7BCzkG2nyKdela')
~~~~~~~~





## Settiamo config development per Amazon S3

Al posto di **:local** usiamo **:amazondev** (andava benissimo **:amazon**. Lo abbiamo cambiato per far capire didatticamente che puoi chiamarlo come vuoi e per predisporci all'eventuale creazioni di due utenze IAM diverse una per il bucket "rebisworldbr-dev" e l'altra per "rebisworldbr-prod")

{title=".../app/config/environments/development.rb", lang=ruby, line-numbers=on, starting-line-number=30}
~~~~~~~~
  # Store uploaded files on the local file system (see config/storage.yml for options)
  config.active_storage.service = :amazondev
~~~~~~~~

Verifichiamo la variabile ":amazonrebis" nello storage.yml

{title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=5}
~~~~~~~~
# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazondev:
  service: S3
  access_key_id: "AK...Y7QA"
  secret_access_key: "xE......UDubFJ"
  #access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  #secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: "eu-central-1"
  bucket: "rebisworldbr-dev"
~~~~~~~~




## Problema risolto

Inizialmente non funzionava. Creato un nuovo IAM chiamato "superflavio" e gli ho dato solo permissions "AmazonS3FullAccess" senza altre configurazioni.

Questo ha funzionato!

Adesso che funziona iniziamo a proteggere il codice e restringere gli accessi




## Mettiamo al sicuro i due secrets

Implementiamo le due secrets nel file criptato

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ EDITOR=vim rails credentials:edit
~~~~~~~~

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
aws:
 access_key_id: AKI...LWBYA
 secret_access_key: sx1......G2nyKdela
~~~~~~~~

Verifichiamo lettura secrets nel file criptato

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
> Rails.application.credentials.dig(:aws, :access_key_id)   # => "AKI...LWBYA"
> Rails.application.credentials.dig(:aws, :secret_access_key)   # => "sx1......G2nyKdela"
~~~~~~~~


Aggiorniamo nello storage.yml

{title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=5}
~~~~~~~~
# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazondev:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: "eu-central-1"
  bucket: "rebisworldbr-dev"
~~~~~~~~

verifichiamo che funziona

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

proviamo adesso a caricare un file.

Funziona! Adesso le immagini sono caricate su aws s3 e non vengono più cancellate dopo poche ore.
ATTENZIONE! Normalmente le immagini vengono caricate subito ma a volte ci può volere del tempo prima che l'immagine venga uploadata quindi non abbiate fretta e fate un refresh dopo alcuni minuti.




## Implementiamo AWS S3 per la produzione su Heroku

Settiamo config production per Amazon S3

Al posto di **:local** usiamo **:amazonprod**

{title=".../app/config/environments/development.rb", lang=ruby, line-numbers=on, starting-line-number=30}
~~~~~~~~
  # Store uploaded files on the local file system (see config/storage.yml for options)
  config.active_storage.service = :amazonprod
~~~~~~~~

Aggiorniamo lo storage.yml aggiungendo ":amazonprod" con relativa configurazione. (al momento con le stesse credentials di **:amazondev**. Ma in seguito creeremo un utente IAM per la produzione e qui metteremo le sue credenziali. Oppure lasciamo il solo utente IAM "botrebisbr" con accesso ai due buckets "rebisworldbr-dev" e "rebisworldbr-prod")

{title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=5}
~~~~~~~~
# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazonprod:
  service: S3
  access_key_id: "AK...7QA"
  secret_access_key: "xE......UDubFJ"
  #access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  #secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: "eu-central-1"
  bucket: "rebisworldbr-prod"
~~~~~~~~

Abbiamo già creato il nuovo bucket "rebisworldbr-prod" su AWS S3 per mantenere distinte le immagini caricate come development da quelle caricate in produzione.




## verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://elisinfo5-flaviobordonidev.c9users.io/mockup_companies/index




## aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add AWS S3 connection to upload images with ActiveRecord in Production"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku asar:master
~~~~~~~~

Abbiamo già passato la nostra chiave di decrittatura ad Heroku nei capitoli precedenti e quindi non dobbiamo passargli nessuna nuova variabile d'ambiente.

In passato avremmo dovuto caricare manualmente da console le variabili

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku config:set AWS_ACCESS_KEY_ID='AKIA....JTOMA'
$ heroku config:set AWS_SECRET_ACCESS_KEY='LwdJ........45KHZ'
$ heroku config:set AWS_REGION='eu-central-1'
$ heroku config:set S3_BUCKET_NAME='rebisworldbr-prod'
~~~~~~~~

Fortunatamente NON LO DOBBIAMO più fare! ^_^




## verifichiamo che funziona tutto

https://quiet-shelf-47596.herokuapp.com/example_posts

creiamo un nuovo post ed inseriamo l'immagine

https://quiet-shelf-47596.herokuapp.com/example_posts/1

Interessante vedere che la nostra archiviazione su AWS rimane nascosta all'utente finale.

Se sul browser facciamo click con tasto destro del mouse sull'immagine e scelgiamo la voce **inspect** si apre la finestra laterale con evidenziato il relativo codice HTML.

{title="inspector", lang=html, line-numbers=off}
~~~~~~~~
<img src="https://quiet-shelf-47596.herokuapp.com/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCdz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--199b21a550554d13a215d4abda9df988119431a6/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lNTkRBd2VEUXdNQVk2QmtWVSIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--0925ad7ccc9422ea2f55f5010a3c334ed85c01e5/8029.png">
~~~~~~~~

Possiamo vedere che l'immagine sembra sul nostro server heroku ma in realtà è solo il puntamento sul database. La vera immagine è su AmazonWebService.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge asar
$ git branch -d asar
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
