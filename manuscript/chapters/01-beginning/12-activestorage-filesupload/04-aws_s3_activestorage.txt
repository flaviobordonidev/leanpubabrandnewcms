# AWS S3 su ActiveRecord

In questo capitolo implementiamo l'upload dei files su AWS S3 tramite ActiveRecord.
Effettuiamo il collegamento con S3 usando i secrests criptati.


Risorse web:

* [Rails Guides - Active Storage Overview - 2.2 Amazon S3 Service](http://edgeguides.rubyonrails.org/active_storage_overview.html)
* [Direct Uploads with Rails ActiveStorage dal min 4:10](https://gorails.com/episodes/direct-uploads-with-rails-active-storage)
* [Active Storage on Heroku](https://devcenter.heroku.com/articles/active-storage-on-heroku)
* [s3-example](https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/s3-example-get-buckets-in-region.html)
* [create bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html#create-bucket-get-location-ruby)
* [hartfordfive](https://gist.github.com/hartfordfive/19097441d3803d9aa75ffe5ecf0696da)




## Apriamo il branch "AWS S3 on ActiveRecord"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b asar
~~~~~~~~




## installiamo aws-sdk per comunicare con amazon web service S3

Seguendo la guida Rails installiamo " gem "aws-sdk-s3", require: false " invece di tutta la suite " gem 'aws-sdk', '~> 3.0', '>= 3.0.1' "

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/aws-sdk-s3)
I>
I> facciamo riferimento al [tutorial github della gemma](http://github.com/aws/aws-sdk-ruby)

{id="01-11-04_01", title=".../Gemfile", lang=ruby, line-numbers=on, starting-line-number=48}
~~~~~~~~
# API clients for AWS S3 services. Comunicazione con Amazon Web Service S3 per ActiveStorage
gem "aws-sdk-s3", require: false
~~~~~~~~

[Codice 01](#01-11-04_01all)

Eseguiamo l'installazione della gemma con bundle

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Verifichiamo connessione da rails console

Questo paragrafo è da migliorare. Lo possiamo saltare.

Installando la gemma **aws-sdk-s3** non possiamo fare le verifiche da console perché ci mancano delle funzioni. Le possiamo fare con la gemma completa **aws-sdk**.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c

# Se non diamo le credenziali, ossia i secrets, abbiamo un errore

> s3 = Aws::S3::Resource.new(region: 'eu-central-1')
Aws::Sigv4::Errors::MissingCredentialsError: missing credentials, provide credentials with one of the following options:
  - :access_key_id and :secret_access_key
  - :credentials
  - :credentials_provider
        from (irb):2:in `new'
        from (irb):2

# Se le passiamo sbagliate lui non ci da immediatamente un errore

> s3 = Aws::S3::Resource.new(region: 'eu-central-1', access_key_id: 'BULLABALLA', secret_access_key: 'NonSonoQuellaGiusta')

# l'errore ci viene dato quando proviamo ad accedere ai buckets
> bk = s3.bucket('rebisworldbr-dev')
> obj = s3.bucket('rebisworldbr-dev').object('miofile')
> obj.upload_file(filepath)

> cs3 = Aws::S3::Client.new(region: 'eu-central-1', access_key_id: 'AKIxxxBYA', secret_access_key: 'sx1xxxKdela')
~~~~~~~~




## Settiamo config development per Amazon S3

Nel file di configurazione dell'ambiente di sviluppo impostiamo "config.active_storage.service" su ":amazondev" al posto di ":local". La variabile ":amazondev" la creiamo nel prossimo paragrafo. Visto che sia lo sviluppo che la produzione puntano ad aws s3 la variabile l'avremmo potuta chiamare semplicemente ":amazon" ma abbiamo preferito distinguerla per far capire didatticamente che puoi chiamarla come vuoi e per predisporci all'eventuale creazione di due utenze IAM diverse una per il bucket "myapp-dev" e l'altra per "myapp-prod".

{id="01-11-04_02", title=".../app/config/environments/development.rb", lang=ruby, line-numbers=on, starting-line-number=30}
~~~~~~~~
  # Store uploaded files on the local file system (see config/storage.yml for options)
  config.active_storage.service = :amazondev
~~~~~~~~

[Codice 02](#01-11-04_02all)




### Implementiamo la variabile ":amazondev" nello storage.yml

Rails predispone commentata le linee di codice per effettuare il collegamento. Dobbiamo solo decommentarle ed adattarle alle nostre esigenze.

{id="01-11-04_03", title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=5}
~~~~~~~~
# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazondev:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: eu-west-1
  bucket: myapp-dev
~~~~~~~~

[Codice 03](#01-11-04_03all)

Le variabili access_key_id e secret_access_key le impostiamo nel prossimo paragrafo




### Implementiamo i due secrets

Implementiamo le due secrets nel file criptato "credentials". Per editare il file eseguire:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ EDITOR=vim rails credentials:edit
~~~~~~~~

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
aws:
  access_key_id: AKI...LWBYA
  secret_access_key: sx1......G2nyKdela
~~~~~~~~

![Fig. 01](images/01-beginning/11-activestorage-filesupload/04_01-rails-encrypted-credentials.png)




### Verifichiamo lettura secrets nel file criptato

Verifichiamo che le variabili aws che abbiamo appena aggiunto siano correttamente implementate

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
-> Rails.application.credentials.dig(:aws, :access_key_id)   # => "AKI...LWBYA"
-> Rails.application.credentials.dig(:aws, :secret_access_key)   # => "sx1......G2nyKdela"
~~~~~~~~




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

proviamo adesso a caricare un file.

* https://mycloud9path.amazonaws.com/eg_posts

Funziona! Adesso le immagini sono caricate su aws s3 e non vengono più cancellate dopo poche ore.
ATTENZIONE! Normalmente le immagini vengono caricate subito ma a volte ci può volere del tempo prima che l'immagine venga uploadata quindi non abbiate fretta e fate un refresh dopo alcuni minuti.

![Fig. 02](images/01-beginning/11-activestorage-filesupload/04_02-bucket-myapp-dev-file_uploaded.png)




## Implementiamo AWS S3 per la produzione su Heroku

Settiamo config production per Amazon S3

Al posto di **:local** usiamo **:amazonprod**

{id="01-11-04_04", title=".../app/config/environments/production.rb", lang=ruby, line-numbers=on, starting-line-number=41}
~~~~~~~~
  # Store uploaded files on the local file system (see config/storage.yml for options)
  config.active_storage.service = :amazonprod
~~~~~~~~

[Codice 04](#01-11-04_04all)

Aggiorniamo lo storage.yml aggiungendo ":amazonprod" con relativa configurazione. (al momento con le stesse credentials di **:amazondev**. Ma in seguito creeremo un utente IAM per la produzione e qui metteremo le sue credenziali. Oppure lasciamo il solo utente IAM "botmyapp" con accesso ai due buckets "myapp-dev" e "myapp-prod")

{id="01-11-04_05", title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=5}
~~~~~~~~
# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazonprod:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: eu-west-1
  bucket: myapp-prod
~~~~~~~~

[Codice 05](#01-11-04_05all)

Nel frattempo avremmo già creato il nuovo bucket "myapp-prod" su AWS S3 per mantenere distinte le immagini caricate come development da quelle caricate in produzione. (I passaggi sono gli stessi fatti per myapp-dev)




## aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add AWS S3 connection to upload images with ActiveRecord in Production"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku asar:master
~~~~~~~~

Se provassimo adesso ad andare sull'URL di produzione

* https://myapp-1-blabla.herokuapp.com/

riceveremmo un errore

![Fig. 03](images/01-beginning/11-activestorage-filesupload/04_03-heroku-application_error.png)

Questo perché non abbiamo ancora passato ad heroku le variabili per collegarsi ad aws S3




### Passiamo ad Heroku variabili per collegamento ad aws S3

Heroku non ha le variabili per accedere al bucket "myapp-prod" che abbiamo creato su aws S3.
Passiamo le variabile d'ambiente ad heroku via terminale

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku config:set AWS_ACCESS_KEY_ID='AKIA....JTOMA'
$ heroku config:set AWS_SECRET_ACCESS_KEY='LwdJ........45KHZ'
$ heroku config:set AWS_REGION='eu-west-1'
$ heroku config:set S3_BUCKET_NAME='myapp-prod'
~~~~~~~~

Le avremmo potute passare anche tramite web GUI di heroku.




## verifichiamo che funziona tutto

* https://myapp-1-blabla.herokuapp.com/example_posts

creiamo un nuovo post ed inseriamo l'immagine

* https://myapp-1-blabla.herokuapp.com/example_posts/10

Funziona! Abbiamo l'immagine. E questa è archiviata su aws S3

![Fig. 04](images/01-beginning/11-activestorage-filesupload/04_04-bucket-myapp-prod-file_uploaded.png)


Interessante vedere che la nostra archiviazione su AWS rimane nascosta all'utente finale.

Se sul browser facciamo click con tasto destro del mouse sull'immagine e scelgiamo la voce **inspect** si apre la finestra laterale con evidenziato il relativo codice HTML.

{title="inspector", lang=html, line-numbers=off}
~~~~~~~~
<img src="https://myapp-1-blabla.herokuapp.com/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCdz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--8a64acf62bd23522d13f983ab83ca26c6cdc72cd/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9MY21WemFYcGxTU0lNTkRBd2VEUXdNQVk2QmtWVSIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--a645c12ff9721ed60214122b6cd9df735ff736ae/samuel-zeller-34775-unsplash.jpg">
~~~~~~~~

Possiamo vedere che l'immagine sembra sul nostro server heroku ma in realtà è solo il puntamento sul database. La vera immagine è su Amazon Web Service S3.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge asar
$ git branch -d asar
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#01-11-04_01)

{id="01-11-04_01all", title=".../Gemfile", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '2.4.1'

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 5.2.1', '>= 5.2.1.1'
# Use postgresql as the database for Active Record
gem 'pg', '>= 0.18', '< 2.0'
# Use Puma as the app server
gem 'puma', '~> 3.11'
# Use SCSS for stylesheets
gem 'sass-rails', '~> 5.0'
# Use Uglifier as compressor for JavaScript assets
gem 'uglifier', '>= 1.3.0'
# See https://github.com/rails/execjs#readme for more supported runtimes
# gem 'mini_racer', platforms: :ruby

# Use CoffeeScript for .coffee assets and views
gem 'coffee-rails', '~> 4.2'
# Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
gem 'turbolinks', '~> 5'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
gem 'jbuilder', '~> 2.5'
# Use Redis adapter to run Action Cable in production
# gem 'redis', '~> 4.0'
# Use ActiveModel has_secure_password
# gem 'bcrypt', '~> 3.1.7'

# Use ActiveStorage variant
gem 'mini_magick', '~> 4.8'

# API clients for AWS S3 services. Comunicazione con Amazon Web Service S3 per ActiveStorage
gem "aws-sdk-s3", require: false

# Use Capistrano for deployment
# gem 'capistrano-rails', group: :development

# Reduces boot times through caching; required in config/boot.rb
gem 'bootsnap', '>= 1.1.0', require: false

# Flexible authentication solution for Rails with Warden 
gem 'devise', '~> 4.5'

# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0'

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
end

group :test do
  # Adds support for Capybara system testing and selenium driver
  gem 'capybara', '>= 2.15'
  gem 'selenium-webdriver'
  # Easy installation and use of chromedriver to run system tests with Chrome
  gem 'chromedriver-helper'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
~~~~~~~~




[Codice 02](#01-11-04_02)

{id="01-11-04_02all", title=".../app/config/environments/development.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded on
  # every request. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.cache_classes = false

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join('tmp', 'caching-dev.txt').exist?
    config.action_controller.perform_caching = true

    config.cache_store = :memory_store
    config.public_file_server.headers = {
      'Cache-Control' => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options)
  #config.active_storage.service = :local
  config.active_storage.service = :amazondev

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  config.action_mailer.perform_caching = false

  # Devise config
  config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
  
  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Debug mode disables concatenation and preprocessing of assets.
  # This option may cause significant delays in view rendering with a large
  # number of complex assets.
  config.assets.debug = true

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  # Raises error for missing translations
  # config.action_view.raise_on_missing_translations = true

  # Use an evented file watcher to asynchronously detect changes in source code,
  # routes, locales, etc. This feature depends on the listen gem.
  config.file_watcher = ActiveSupport::EventedFileUpdateChecker
end
~~~~~~~~




[Codice 03](#01-11-04_03)

{id="01-11-04_03all", title=".../app/config/storage.yml", lang=yaml, line-numbers=on, starting-line-number=1}
~~~~~~~~
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazondev:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: eu-west-1
  bucket: myapp-dev

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket

# Use rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]
~~~~~~~~
