# Bob e Fla il primo incontro

Cerano una volta,
in due paesi distanti, due programmatori web che si chiamavano rispettivamente Bob e Fla. I due decisero di sviluppare insieme un'applicazione basata su Ruby on Rails.

Bob aveva impostato il suo ambiente di sviluppo Rails sul suo computer Mac OSX 10.11.

I> vedi References/environment_rails

Mentre Fla aveva impostato il suo ambiente di sviluppo Rails sul suo computer Ubuntu 16.04 LTS.

I> vedi References/environment_rails




## Bob crea un applicazione Rails

Una volta impostato l'ambiente di sviluppo Bob crea l'applicazione romasportface2 e la pubblica sia su github che su heroku.

Il database di riferimento che usa è postgresql perché il deployment lo fa su heroku e la piattaforma heroku richiede il database postgresql. Crea la sua applicazione con rails. Convenzione vuole che i siti siano raccolti in una cartella Sites e quindi crea/parte  dalla cartella Sites. Verifica inoltre che l'ambiente rbenv in cui sta abbia ruby 2.2.4 che è quella che consiglia heroku oggi Gennaio 2016.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd Sites
$ rbenv versions
$ ruby -v
$ rails new romasportface2 --database=postgresql
$ cd romasportface2
$ atom .
~~~~~~~~

I> atom è l'editor di testo scelto da entrambi per sviluppare.
I>
I> $ atom .
I>
I> Apre atom e tutta la directory da dove si è eseguito il comando.

Se su postgresql ho impostato un utente e password aggiorno il file config/database.yml altrimenti creo solo i due databases di development e test

I> vedi references/environment_postgresql

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ createdb romasportface2_development
$ createdb romasportface2_test
$ rake db:migrate
~~~~~~~~



## Bob e Git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git init
$ ll
~~~~~~~~

questo inizializza git e crea il file .gitignore. Aggiungiamo alcune righe per escludere da git altri files che non sono utili all'applicazione.

[-codice application 01-](#code-application-01)

{title=".gitignore", lang=text, line-numbers=on, starting-line-number=15}
~~~~~~~~
# Ignore other unneeded files.
doc/
*.swp
*~
.project
.DS_Store
.idea
.secret
~~~~~~~~




## Un problema di sicurezza

Le password e le chiavi di criptatura non sono state escluse da git e vengono quindi passate sui repositories esterni. Questo non è cosa buona e giusta.

A> Attenzione IMPLEMENTA LA SICUREZZA!
A>
A>    # application.yml
A>    ---
A>    SECRET_TOKEN: "presa_da_config/initializers/secret_token.rb"
A>    ---
A>
A>    # config/initializers/secret_token.rb
A>    ---
A>    R4SampleApp::Application.config.secret_key_base = ENV["SECRET_TOKEN"]
A>    ---
A>
A> Per il momento non implementiamo la parte di sicurezza e quindi visualizziamo in chiaro la password dei databases e la chiave di criptatura dei token
A>
A> Problema di sicurezza!!!


## Fissa la versione ruby sul Gemfile

Bob vede sul terminale la versione di ruby che sta usando

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ ruby -v
~~~~~~~~

Si accorge che non è sulla versione giusta allora verifica rbenv ed imposta la 2.2.4

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rbenv versions
$ rbenv local 2.2.4
$ ruby -v
~~~~~~~~

Adesso la imposta anche sul gemfile così tutte le volte che farà un bundle avrà un allarme se è su un ambiente rbenv con la versione di ruby errata

[-codice application 02-](#code-application-02)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
# versione di ruby usata
ruby '2.2.4'
~~~~~~~~


Ed una volta usato il "bundle install" l'installato viene registrato sul file: Gemfile.lock


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
$ bundle update
$ bundle install
$ rbenv rehash
~~~~~~~~




## Aggiorna il readme

A> $ mv README.rdoc README.markdown

Editiamo il file che si presenta su Github...

[-codice application 03-](#code-application-03)

{title="README.markdown",lang=markdown, line-numbers=on, starting-line-number=1}
~~~~~~~~
# Roma sport face v0.1.0
==
porting di canvas su cms on rails per il sito
[*www.romasportface.com*](http://www.romasportface.com/)
by [Integram-web](http://www.integram-web.com/).
~~~~~~~~




## Versione iniziale v0.1.0

Fatti i settaggi iniziali Bob usa git per il primo commit ed esegue anche il tag v.0.1.0 in accordo con la convenzione del semantic versioning (semver.org)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Set the new rails app romasportface2"
$ git tag v0.1.0
~~~~~~~~




## Aggiorna Github

Bob crea la nuova applicazione con il browser sul suo account a www.github.com e la chiama romasportface2.
Segue le indicazioni di github per registrare il repository git esterno di github sul suo git locale

Aggiungiamo a git un repository "remote" che chiamiamo "origin" ed è su https://github.com/...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git remote add origin https://github.com/Integram-System/romasportface2.git
~~~~~~~~

Adesso possiamo fare push del nostro git su questo repository remoto su Github:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
$ git push origin master --tag
~~~~~~~~




## Set for deployment su Heroku

Per mettere l'applicazione in produzione su heroku dobbiamo indicare sul Gemfile che siano utilizzate in produzione le gemme:

* gem 'pg', '~> 0.15'
* gem 'rails_12factor', '~> 0.0.3',   group: :production
* gem 'puma', '~> 2.15', '>= 2.15.3', group: :production


[-codice application 04-](#code-application-04)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=53}
~~~~~~~~
group :production do
  # Needed on Heroku. Enables serving assets in production and setting your logger to standard out.
  gem 'rails_12factor', '~> 0.0.3',   group: :production

  # Fast, threaded, and highly concurrent web server. Suggested by Heroku
  gem 'puma', '~> 2.15', '>= 2.15.3', group: :production
end
~~~~~~~~

La gemma 'pg' perché Heroku usa PostgreSQL ma questa non serve nel gruppo :production perché l'abbiamo già installata per tutta l'applicazione.
La gemma 'rails_12factor' è usata da Heoku per servire assets statici come le immagini e gli stylesheets.
La gemma 'puma' è un web server professionale usato da Heroku.

Eseguiamo Bundler per aggiornare Gemfile.lock:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~


Puma ha bisogno inoltre del file "Procfile" e del file "config/puma". The Procfile should be created in your application’s root directory (i.e., in the same location as the Gemfile).

I> vedi https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server

[-codice application 05-](#code-application-05)

{title="Procfile", lang=text, line-numbers=on, starting-line-number=1}
~~~~~~~~
web: bundle exec puma -C config/puma.rb
~~~~~~~~


[-codice application config 01-](#code-application-config-01)

{title="config/puma.rb", lang=text, line-numbers=on, starting-line-number=1}
~~~~~~~~
workers Integer(ENV['WEB_CONCURRENCY'] || 2)
threads_count = Integer(ENV['MAX_THREADS'] || 5)
threads threads_count, threads_count

preload_app!

rackup      DefaultRackup
port        ENV['PORT']     || 3000
environment ENV['RACK_ENV'] || 'development'

on_worker_boot do
  # Worker specific setup for Rails 4.1+
  # See: https://devcenter.heroku.com/articles/
  # deploying-rails-applications-with-the-puma-web-server#on-worker-boot
  ActiveRecord::Base.establish_connection
end
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku version
$ heroku login
$ heroku keys:add
$ heroku create
~~~~~~~~


Viene creata l'app "guarded-retreat-51105".
Adesso imposto il MAX_THREADS seguendo il documento di heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku config:set MAX_THREADS=1
~~~~~~~~


Adesso è tutto pronto. Posso fare il commit finale in locale e uploadare tutto in remoto.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Set Gemfile.lock for Heroku and Puma webserver in production"
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku master
$ heroku run rake db:migrate
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~

Sul web all'URL https://guarded-retreat-51105.herokuapp.com/ Non visualizzo la stessa pagina di rails che vedevo in locale perché quella è creata in maniera dinamica solo per l'area di sviluppo. Invece in produzione il messaggio "The page you were looking for doesn't exist." è quello standard di rails e so che è andato tutto bene.




## Adesso tocca a Fla

Bob racconta con entusiasmo a Fla del suo nuovo progetto romasportface2 in uno dei loro incontri su skype. La curiosità di Fla è tanta che chiede la possibilità di visualizzarlo.
Non c'è problema risponde Bob è a disposizione su github nell'area pubblica. Ti condivido l'utenza così non hai neanche bisogno di fare un fork e puoi clonarti in locale direttametne il repository esterno usando git.

Bob aggiunge Fla come collaboratore sul repository esterno di github "Integram-System/romasportface2".

Fla importa in locale l'applicazione romasportface2 per poter iniziare a collaborare.
La prima cosa da fare è clonare il repository. Siccome Fla e Bob hanno entrambi accesso al repository su github Fla può fare semplicemente un clone senza necessità di passare per un fork.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd Sites
$ git clone https://github.com/Integram-System/romasportface2.git
~~~~~~~~


Una volta clonato Fla entra nell'applicazione e da adesso in poi gli sarà sufficiente fare dei "git pull"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd romasportface
$ git pull
  Already up-to-date.
~~~~~~~~


A questo punto Fla ha tutti gli stessi files di Bob ma non è allineato al 100%. Gli manca l'installazione delle gemme e tutta la parte del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails s
    Ti manca il bundle install

$ bundle install
$ rails s
~~~~~~~~


Adesso gli funziona ma il database non è stato ancora allineato in locale ed infatti quando va su localhost:3000 gli da errore postgreeSQL (PG):
  FATAL: database "romasportface2_development" does not exist

Quindi crea in locale il database di sviluppo ed anche quello di test

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ createdb romasportface2_development
$ createdb romasportface2_test
$ rake db:migrate
~~~~~~~~

Adesso è allineato al 100% con Bob.




## Anche Fla vuole pubblicare su Heroku

Fla è gasatissimo e chiama Bob per informarlo dei suoi successi. Decidono di portare avanti il progetto insieme e quindi anche Fla vuole la possibilità di pubblicarlo su Heroku perché può capitare che nell'ambiente di sviluppo funzioni tutto ma in produzione si verificano dei problemi che possono richiedere diverso tempo per essere risolti.

Bob concorda ed aggiunge Fla come collaboratore sul repository esterno di Heroku. Fa login sulla pagina web https://dashboard.heroku.com/login e seleziona la "Personal app" che è stata creata in automatico quando ha usato $ heroku create. Non si ricordava quale era ma lo scopre facilmente entrando in locale su cd romasportface2 ed eseguendo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku open
~~~~~~~~


Sul browser vede che l'app che deve condividere è "guarded-retreat-51105"
La clicca sulla "dashboard.heroku", clicca sul tab "Access" ed infine su "Add collaborator"

Bob conferma a Fla che è stato aggiunto come "collaborator" sull'app "guarded-retreat-51105"

Flavio riaccende il suo pc ubuntu ed entra su cd ~/Sites/romasportface2 per verificare che anche lui possa pubblicare su Heroku.
Si rende subito conto che non può usare "$ heroku create" perché gli creerebbe un'altra app su heroku. Cerca qualche risposta sulla documentazione di heroku e trova il documento https://devcenter.heroku.com/articles/git che gli spiega cosa fare. Basta usare il comando "heroku git:remote"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku login
$ heroku git:remote -a stark-plateau-6287
  Git remote heroku added.
~~~~~~~~


Adesso anche Fla puo fare il deployment con:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku master
  Everything up-to-date
~~~~~~~~


Fla esulta sapendo che adesso il suo pc ubuntu può gestire l'applicazione romasportface2 allo stesso identico modo del pc mac di Bob. Si affaccia alla finestra e si rende conto che è ormai notte inoltrata. Degide che per oggi ha lavorato a sufficienza, quindi spegne il suo computer e si mette a letto augurandosi sogni d'oro.
