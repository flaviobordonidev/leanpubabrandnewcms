# Installiamo PostgreSQL

Il database postgreSQL non è installato di default su AWS Cloud9
Poiché vogliamo creare una nuova applicazione Rails che sfrutta PostgreSQL invece di sqlite3 è bene installarlo.
Usiamo PostgreSQL perché è lo stesso database che Heroku usa; e noi useremo Heroku per mettere la nostra app in produzione.


***
Questa procedura è per istanze di awsC9 EC2 con OS Ubuntu 
***


Risorse web:

* [How to Install PostgreSQL on Ubuntu 18.04](https://linuxize.com/post/how-to-install-postgresql-on-ubuntu-18-04/)
* [How To Install and Use PostgreSQL on Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04)




## Installiamo PostgreSQL

Siamo su EC2 instance con OS Ubuntu che usa "apt" come packet manager

Setting up Postgres on Cloud9 IDE
Install Postgres via apt

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo apt update
$ sudo apt install postgresql postgresql-contrib libpq-dev
--> y
~~~~~~~~




## Edit postgres conf to connect via localhost:5432

Impostiamo il collegamento di rails a postgresql con l'indirizzo "localhost" e la porta "5432"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo vim /etc/postgresql/10/main/postgresql.conf
~~~~~~~~

Decomentiamo le righe (da --> a)

* #listen_addresses = 'localhost' --> listen_addresses = 'localhost'
* #port = 5432                    --> port = 5432

(la seconda riga potrebbe già essere decommentata)

I comandi VIM da usare sono:

* muoversi con le frecce. 
* [i] per entrare in modalità modifica. 
* [canc] per cancellare.
* [ESC] per uscire dalla modifica.
* [:w] per salvare
* [:q] per uscire

![Fig. 01](images/01-beginning/01-new_app/03_01-postgresql_conf-uncomment-addresses_and_port.PNG)




## Update pg_hba.conf file for ec2-user auth:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo vim /etc/postgresql/10/main/pg_hba.conf
~~~~~~~~

Trovare la parte che è

~~~~~~~~
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
~~~~~~~~

E modificare in

~~~~~~~~
# TYPE  DATABASE        USER            ADDRESS                 METHOD
# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             ubuntu          127.0.0.1/0             trust
# IPv6 local connections:
host    all             all             ::1/128                 md5
~~~~~~~~




## Start / Restart postgres server

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
~~~~~~~~

or

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql restart
~~~~~~~~




## Login as Postgres User and Change Password / Add user: "ubuntu"

* login as postgres user
* login to postgres db as postgres user
* cambia la password




{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo su - postgres 
-> psql -U postgres
--> ALTER USER postgres WITH PASSWORD 'myPassword123';
--> CREATE USER "ubuntu" SUPERUSER;
--> ALTER USER "ubuntu" WITH PASSWORD 'myPassword123';
--> \q
-> exit


ec2-user:~/environment $ sudo su - postgres 
-bash-4.2$ psql -U postgres
psql (9.2.24)
Type "help" for help.

postgres=# ALTER USER postgres WITH PASSWORD 'myPassword123';
ALTER ROLE
postgres=# CREATE USER "ubuntu" SUPERUSER;
CREATE ROLE
postgres=# ALTER USER "ubuntu" WITH PASSWORD 'myPassword123';
ALTER ROLE
postgres=# \q
-bash-4.2$ exit
logout
ec2-user:~/environment $ 
~~~~~~~~

![Fig. 02](images/01-beginning/01-new_app/03_02-pg_change_password_and_create_user.PNG)

Adesso è tutto inizializzato e pronto per lavorare su aws Cloud9.




## Future connessioni al database

Se in futuro volessimo lavorare da linea di comando direttamente sul database PostgreSQL possiamo effettuare Login come utente "ec2-user" con il seguente codice:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ psql postgres
~~~~~~~~

Una volta entrati possiamo creare il nostro proprio database e lavorare sulle tabelle.

Ma per quanto riguarda il nostro tutorial abbiamo già tutto quello che ci serve per continuare.
