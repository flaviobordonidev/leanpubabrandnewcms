# Tabelle di esempio

Creiamo una tabelle di esempio che ci aiuterà nei prossimi capitoli per verificare le future implementazioni.




## Apriamo il branch "Example Companies"

{title="terminale", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ec
~~~~~~~~




## Impementiamo tabella example_companies

implementiamo tutta la gestione delle aziendei come esempio inclusa la tabella example_companies
Generiamo tutto lo **scaffold** perché vogliamo anche i controllers e le views. 
 - il **migrate** crea la sola tabella
 - il **model** oltre alla tabella crea il model per il collegamento uno-a-molti.
 - lo **scaffold** crea anche il controller e le views.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold ExampleCompany name:string sector:text
~~~~~~~~


vediamo il migrate creato

{title=".../db/migrate/xxx_create_example_companies.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateExampleCompanies < ActiveRecord::Migration[5.2]
  def change
    create_table :example_companies do |t|
      t.string :name
      t.text :sector

      t.timestamps
    end
  end
end
~~~~~~~~

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




### Inseriamo qualche azienda da console

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
-> ExampleCompany.new(name: "AAA srl", sector: "industria chimica").save
-> ExampleCompany.new(name: "BAB snc", sector: "industria farmaceutica").save
-> ExampleCompany.new(name: "CABBA SpA", sector: "ITC").save

-> exit
~~~~~~~~




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add table example_companies"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ec:master
$ heroku run rails db:migrate
~~~~~~~~

per popolare il database di heroku 


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

e rifare i passi fatti precedentemente per il database locale




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ec
$ git branch -d ec
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
