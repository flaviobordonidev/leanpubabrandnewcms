## Autorizzazione

Impostiamo che autorizzazioni ha l'utente, una volta autenticato attraverso il login. 

Authorization is a requirement for many Rails applications. Role-based authorization (  ) is easy to conceptualize and can be added to a User model using an Active Record Enum attribute (use the Royce or Rolify gems if access is predicated on more than one assigned role). Simple role-based authorization may be all you need. If your controller gets overly complex, switch to Pundit to manage authorization.

* https://rubygems.org/gems/pundit
* https://github.com/varvet/pundit
* http://railsapps.github.io/rails-authorization.html 
* https://medium.freecodecamp.org/rails-authorization-with-pundit-a3d1afcb8fd2





# Installiamo pundit

Mas antes de entrarmos a fundo no Pundit primeiro devemos ter um problema, então nosso problema é:

No sistema de gerenciamento de empresas temos 2 papeis o do gerente e o do empregado. O Gerente pode visualizar todas as telas do sistema. O empregado não pode criar, editar ou excluir nenhuma empresa.

Agora com o nosso problema em mão vamos iniciar. 




## Apriamo il branch "pundit install"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pi
~~~~~~~~




## Installiamo la gemma

Aggiungiamo la gemma **pundit** alla nostra applicazione [(codice: 01)](#code-login_authorization-pundit_install-01) per implementare la parte di autorizzazione.

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=53}
~~~~~~~~
# Object oriented authorization for Rails applications
gem 'pundit', '~> 1.1'
~~~~~~~~

I> Verifichiamo sempre [l'ultima versione](https://rubygems.org) e gli [ultimi aggiornamenti](https://github.com/elabs/pundit)

![la gemma devise](images/authorization/pundit_install/rubygems_pundit.png)

Eseguiamo l'installazione della gemma con bundle 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Aggiungiamo ad application_controller

Includiamo Pundit nel nostro application controller.

{title=".../app/controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationController < ActionController::Base
  include Pundit
  protect_from_forgery with: :exception
~~~~~~~~

Questo ci permette di usare Pundit in tutta la nostra applicazione.




## Lo script

Questo passaggio è opzionale ma è interessante farlo per avere una policy di esempio. Quindi eseguiamo lo script di implementazione di pundit su rails (Anche noto con il nome di "generator"). Il "generator" will set up an application policy with some useful defaults.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g pundit:install

Running via Spring preloader in process 1762
      create  app/policies/application_policy.rb
~~~~~~~~

After generating your application policy, restart the Rails server so that Rails can pick up any classes in the new app/policies/ directory.

Per un modello specifico aggiungiamo il nome del model. Ad esempio **homepage**

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g pundit:install homepage
~~~~~~~~









aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add favorites company_person_maps seeds"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku fcpms:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge fcpms
$ git branch -d fcpms
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
