# Introduzione

Questa sezione è una parte importante per la gestione dell'applicazione in quanto permette l'accesso ed identifica chi può fare cosa a seconda del suo ruolo.




## Distinguiamo

Autenticazione è essere in grado di verificare l'identità dell'utente. E' fare accesso/login --> Devise, Authlogic, Clearance
Autorizzazione è chi può fare cosa una volta autenticato. (è dare livelli di accesso differente) --> CanCanCan, Pundit, Authority
Ruolificazione è dare un ruolo ad ogni utente. --> rolify

Per l'Autenticazione scelgo Devise.
Per l'autorizzazione scelgo Pundit.
Per la ruolificazione scelgo Rolify.



*[ruby-toolbox rails_authorization](https://www.ruby-toolbox.com/categories/rails_authorization)

* [sitepoint - Straightforward Rails Authorization with Pundit](https://www.sitepoint.com/straightforward-rails-authorization-with-pundit/)
* [Pundit](https://github.com/elabs/pundit)

http://stackoverflow.com/questions/35989990/authorization-and-associations-between-user-and-posts

Episode #188 – Nov 16, 2009 - Declarative Authorization

youtube:

* [Rails Authorization With Pundit](https://www.youtube.com/watch?v=qruGD_8ry7k)
* [Codeplace | User Authorization in Ruby on Rails using CanCan](https://www.youtube.com/watch?v=0ZCvLDZQ5HM)


https://github.com/RolifyCommunity/rolify

Very simple Roles library without any authorization enforcement supporting scope on resource object.

Let's see an example:

user.has_role?(:moderator, Forum.first)
=> false # if user is moderator of another Forum
This library can be easily integrated with any authentication gem (devise, Authlogic, Clearance) and authorization gem* (CanCanCan, authority)

*: authorization gem that doesn't provide a role class
