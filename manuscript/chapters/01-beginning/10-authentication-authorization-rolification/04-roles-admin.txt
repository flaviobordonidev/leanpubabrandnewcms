# Roles - admin

Questo è l'approccio più semplice della gestione dei ruoli. Esiste solo la possibilità di Amministratore o Utente normale. Quindi è solo aggiungere una colonna boolean nella tabella users.

aggiungiamo il ruolo di amministratore utilizzando un attributo (admin attribute) e non un intero modello.
Questo vuol anche dire aggiungere una colonna "admin" di tipo boolean sulla tabella User invece di creare una nuova tabella Administrators

Nei prossimi capitoli vedremo livelli più alti di gestione dei ruoli:
  
  * enum - ci permette di gestire più ruoli definiti in una colonna integer nella tabella users
  * rolify - massima flessibilità con una gemma ed una tabella roles con relazione molti-a-molti

Volendo usare "rolify" possiamo saltare questo capitolo




## Apriamo il branch "Roles Admin"

{title="terminale", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ra
~~~~~~~~




## Aggiungiamo l'attributo admin

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate migration add_admin_to_users admin:boolean
~~~~~~~~

Aggiungiamo al migration l'opzione ** defautl: false ** per la colonna admin

{title=".../db/migrate/xxx_add_admin_to_users.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAdminToUsers < ActiveRecord::Migration
  def change
    add_column :users, :admin, :boolean, default: false
  end
end
~~~~~~~~

Eseguiamo il migrate

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rake db:migrate
~~~~~~~~

Adesso possiamo identificare su un utente loggato è amministratore.

{title="verifichiamo se amministratore", lang=ruby, line-numbers=off}
~~~~~~~~
if current_user.admin?
  # do something
end
~~~~~~~~


Se ho un caso particolare in cui una pagina può non avere un utente loggato usiamo .try() per evitare l'errore.
Se *current_user* è *nil* non viene generato un errore (raising an undefined method admin? for nil:NilClass exception)

{title="verifichiamo se amministratore", lang=ruby, line-numbers=off}
~~~~~~~~
if current_user.try(:admin?)
  # do something
end
~~~~~~~~

Se voglio dare i diritti di amministratore (grant admin status) da codice posso:

{title="grant admin status", lang=ruby, line-numbers=off}
~~~~~~~~
current_user.update_attribute :admin, true
~~~~~~~~




## Testiamo la parte di login in produzione.

Abbiamo finito. Non ci resta che fare il "deployment in production" pubblicando la nostra applicazione su heroku.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku login:master
~~~~~~~~

Non funziona perché su heroku non abbiamo eseguito il migrate.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rake db:migrate
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge admin
$ git branch -d admin
~~~~~~~~