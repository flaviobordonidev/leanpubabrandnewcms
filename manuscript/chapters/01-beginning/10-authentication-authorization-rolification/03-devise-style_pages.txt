# Devise - funzionalità aggiuntive e stile

La struttura base di devise è pronta, adesso implementiamo quelle piccole modifiche per personalizzare l'esperienza dell'autenticazione. Cambiamo l'url, attiviamo il pulsante di logout, implementiamo del css, implementiamo l'internazionalizzazione e molto altro.

Risorse web:

* https://github.com/plataformatec/devise
* https://github.com/plataformatec/devise/wiki/How-To:-Add-sign_in,-sign_out,-and-sign_up-links-to-your-layout-template
* https://github.com/plataformatec/devise/wiki/How-To:-Change-the-default-sign_in-and-sign_out-routes
* https://github.com/plataformatec/devise#configuring-routes




## Implementiamo i link di login e logout

Mettiamo i links sulla nostra pagina di test page_a

{title="views/test_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% if user_signed_in? %>
  <li class="nav-item">
    <%= link_to 'Logout', destroy_user_session_path, method: :delete, class: "nav-link" %>
  </li>
<% else %>
  <li class="nav-item">
    <%= link_to 'Login', new_user_session_path, class: "nav-link" %>  
  </li>
<% end %>
~~~~~~~~




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~




## Modifichiamo l'url per il login

invece di **https://mydomain/users/sign_in** impostiamo l'url per **https://mydomain/login**
Per evitare di avere il sign_in nella sottodirectory "users/" e per un nostro più user-friendly "login" al posto del default di devise "sign_in"

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'login'}
~~~~~~~~

Qualora personalizzassimo la pagina di logout/sign_out ed attivassimo la possibilità all'utente di registrarsi possiamo aggiungerli

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'login', sign_out: 'logout', sign_up: "signup"}
~~~~~~~~

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
devise_for :users, path: '', path_names: { sign_in: 'entra', sign_out: 'esci', sign_up: "registrati"}
~~~~~~~~




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

da notare che non abbiamo dovuto cambiare i puntamenti **destroy_user_session_path** e **new_user_session_path**







## Personalizziamo lo stile di devise

La gemma devise di default lascia nascoste le sue views ed i suoi controlers. Possiamo visualizzarli per apportarci le nostre personalizzazioni.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate devise:views users
$ rails generate devise:controllers users

===============================================================================

Some setup you must do manually if you haven't yet:

  Ensure you have overridden routes for generated controllers in your routes.rb.
  For example:

    Rails.application.routes.draw do
      devise_for :users, controllers: {
        sessions: 'users/sessions'
      }
    end

===============================================================================
~~~~~~~~

Adesso abbiamo la sottocartella /app/controller/users/ con tutti i controllers gestiti da devise 
Inoltre abbiamo la sottocartella /app/views/users/ con tutti le pagine gestite da devise 

I> se avessimo fatto subito il punto 4, ossia il **rails generate devise:views** avremmo dovuto copiare le views da devise/sessions a users/sessions. 
I>
I> Poiché visualizzando il controller non usiamo più le views di default che mette in devise/sessions.




## Aggiorniamo gli instradamenti

Modifichiamo le routes **devise_for :users** indicando a devise di usare i nuovi controllers (e non quelli di default)

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
devise_for :users, controllers: { sessions: 'users/sessions' }
~~~~~~~~






## Puntiamo le views di devise ad un nostro layout

Per far si che le views di devise usino un nostro layout basta indicarlo nel suo controller che abbiamo visualizzato nel paragrafo precedente.

O gli passiamo una funzione che chiama il nostro layout

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
layout :for_devise

def for_devise
  'our_custom_layout'
end
~~~~~~~~

o più semplicemente chiamiamo direttamente il nostro layout

~~~~~~~~
layout 'our_custom_layout'
~~~~~~~~

Il nostro layout personalizzato si chiama "pages" e fa parte del tema Angle. Usiamo il metodo più semplice.

La view di login non usa il layout di default ma usa il layout "pages" per indicare di usare questo layout dobbiamo inserlo nel controller. Ed è per questo che abbiamo usato ** rails generate devise:controllers users **
Infatti adesso abbiamo in chiaro il controller di devise che gestisce il sign_in/login sign_out/logout.

Indichiamo di usare il layout "pages" al posto di quello di default:

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  layout 'pages'
~~~~~~~~

[tutto il codice]

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Users::SessionsController < Devise::SessionsController
# before_action :configure_sign_in_params, only: [:create]

  layout 'pages'

  # GET /resource/sign_in
  # def new
  #   super
  # end

  # POST /resource/sign_in
  # def create
  #   super
  # end

  # DELETE /resource/sign_out
  # def destroy
  #   super
  # end

  # protected

  # If you have extra params to permit, append them to the sanitizer.
  # def configure_sign_in_params
  #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  # end
end
~~~~~~~~



















## Lavoriamo sul controller di users

[codice: users controllers 01](#code-devise-users-controllers-01)

{title="app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_action :authenticate_user!

  def show
    #@user = User.find(current_user.id)
    # current_user is generated by the gem "devise"
    @user = current_user
  end
~~~~~~~~

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.




## Lavoriamo sul view users show

{title="app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=3}
~~~~~~~~
<p>User: <%= @user.email %></p>
~~~~~~~~

verifichiamo che funziona tutto con - $ rails s -
http://localhost:3000
http://localhost:3000/homepage/index
http://localhost:3000/users/1
http://localhost:3000/users/sign_in

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add users-show"
~~~~~~~~




## Devise login to root homepage

Attiviamo il root che reindirizza sulla homepage e ritorniamo in homepage dopo il login.

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
#root 'users#show'
root 'homepage#index'

devise_for :users
resources :users
~~~~~~~~

http://localhost:3000
http://localhost:3000/users/sign_in
http://localhost:3000/users/1
http://localhost:3000

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add login to root homepage"
~~~~~~~~




## Root homepage - Devise login to user show

Lasciamo la homepage come pagina di **root** e dopo il login reinstradiamo sulla pagina **users/sohw**

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
root 'homepage#index'

get 'users/show', as: :user_root # creates user_root_path (default path after sign_in)

devise_for :users
resources :users
~~~~~~~~

verifichiamo che funziona tutto con - $ rails s -
http://localhost:3000
http://localhost:3000/users/sign_in
http://localhost:3000
http://localhost:3000/users/1


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add homepage free login to users-show"
~~~~~~~~



## Proteggiamo anche homepage con devise

[codice: homepage controllers 01](#code-frontend_assets-04-controllers-01)

{title="app/controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_filter :authenticate_user!
~~~~~~~~

In questo caso al primo login si entra nella homepage. Se si riprova a fare login - http://localhost:3000/users/sign_in - quando si è già loggati allora si viene reinstradati su users/show.

I> Forse meglio lasciare una homepage stile "biglietto da visita" con il link che ti fa fare login.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add homepage locked"
~~~~~~~~








## Formattiamo il login e logout con delle icone

E' semplicemente usare il **link_to ... do** 

invece di
            <%#= link_to "Sign Out", destroy_user_session_path, method: :delete %>

facciamo            
            <%= link_to destroy_user_session_path, method: :delete do %>
               <em class="icon-lock"></em>
            <% end %>
