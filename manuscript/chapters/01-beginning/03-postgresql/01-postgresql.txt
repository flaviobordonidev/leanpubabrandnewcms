# PostgreSQL

Attiviamo postgreSQL ed effettuiamo la connessione creando i databases




## Apriamo il branch "postgreSQL"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pg
~~~~~~~~




## Implementiamo PostgreSQL

nel primo capitolo abbiamo creato una nuova applicazione usando i settaggi del database postgreSQL
** $ rails _5.1.2_ new rebisworld --database=postgresql **
adesso implementiamo postgreSQL sul nostro workspace di cloud9.

PostgreSQL è preinstallato su ogni workspace di Cloud9, basta attivarlo.

I> Il "sudo sudo" su alcuni comandi non è un errore di digitazione ma è necessario su Cloud9 per evitare che il prompt ti richieda una password per l'utente ubuntu interrompendo il comando perché non viene fornita una password per l'utente ubuntu.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
~~~~~~~~

Verifichiamo sul web

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails s -b $IP -p $PORT
~~~~~~~~

Vediamo che l'errore è cambiato. Adesso si connette a PostgreSQL ma non trova i databases di svilluppo e di test. Questi sono definiti sul file /config/database.yml

Come si vede sul database.yml di postgresql diamo il nome dei database con la convenzione "nome-applicazione + _development (o _test)" 
Non creiamo il database di produzione (_production) perché la produzione la teniamo su heroku.


[codice: beginning postgresql 01](#code-beginning-postgresql-01)

{title=".../config/database.yml", lang=yaml, line-numbers=on, starting-line-number=24}
~~~~~~~~
development:
  <<: *default
  database: rebisworld_development
~~~~~~~~

{title=".../config/database.yml", lang=yaml, line-numbers=on, starting-line-number=58}
~~~~~~~~
test:
  <<: *default
  database: rebisworld_test
~~~~~~~~

{title=".../config/database.yml", lang=yaml, line-numbers=on, starting-line-number=81}
~~~~~~~~
production:
  <<: *default
  database: rebisworld_production
  username: rebisworld
  password: <%= ENV['REBISWORLD_DATABASE_PASSWORD'] %>
~~~~~~~~

I> la configurazione del database di produzione la cambieremo più avanti perché usiamo Heroku e non il server locale.

verifichiamo che non c'è comunicazione eseguendo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails db:migrate
~~~~~~~~

Prende errore perché non esistono ancora i databases.

Creiamo i databases sul postgreSQL del workspace di cloud9.
Il servizio postgresql è gia attivo quindi creiamo i databases solo per development e test

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ createdb rebisworldbr_development
$ createdb rebisworldbr_test
~~~~~~~~

Per verificare i databases dalla linea di comando di PostgreSQL:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails s -b $IP -p $PORT

$ psql
postgres=# \list
postgres=# \q

oppure

$ psql --list
~~~~~~~~

Avremmo potuto creare i databases anche da dentro la linea di comando di postgreSQL:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails s -b $IP -p $PORT

$ psql
postgres=# CREATE DATABASE "elisinfo5_development";
postgres=# CREATE DATABASE "elisinfo5_test";
postgres=# \list
postgres=# \q
~~~~~~~~

I> ATTENZIONE
I>
I> il database ha encoding: SQL_ASCII quindi non supporta caratteri accentato come invece fa UTF8
I>
I> Probabilmente è bene cambiare encoding...


verifichiamo che c'è comunicazione eseguendo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rake db:migrate
~~~~~~~~

Va a buon fine quindi non è necessario impostare un utente ed una password per il database. Quelle impostate in automatico di default vanno bene.

Verifichiamo sul web

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd elisinfo
$ rails s -b $IP -p $PORT
~~~~~~~~




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "implement postgreSQL"
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pg
$ git branch -d pg
~~~~~~~~