# Figaro

Fina a Rails 4.0 un'ottia gemma era Figaro. Adesso non lo usiamo più perché è stata implementata una sicurezza nativa su Rails.

Il problema di sicurezza.
Le password e le chiavi di criptatura non erano escluse da git e venivano quindi passate sui repositories esterni. Questo non accade più perché è stato implementato il file secrets.




## Apriamo il branch (Rails Secrets)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b rs
~~~~~~~~




## Perché si usava figaro?

Figaro è una gemma vecchiotta che ha fatto egregiamente il suo lavoro.
Da rails 4.1 è stato introdotto il file secrets.yml che è un'alternativa a figaro. Però figaro valeva ancora la pena...
Il problema è che secrets.yml non settava le variabili d'ambiente (environment variables).

Per maggiori informazioni sulle variabili d'ambiente (ENV) usando la rails console vedi:
* (https://pragmaticstudio.com/blog/2014/3/11/console-shortcuts-tips-tricks)

Con rails 5.2 la situazione è migliorata ed il file è criptato quindi si può evitare di usare figaro.

All'avvio di rails la gemma figaro caricava in variabili d'ambiente tutte le password scritte su config/application.yml
Questo era molto meglio di usare le variabili di ambiente tramite .bashrc o .bash-profile per le passwords/secrets.Perché quando immagazzini passwords/secrets in file come .bashrc, queste sono mandate come variabili d'ambiente ad ogni singolo programma che stai eseguendo come utente. La maggior parte di questi programmi non ha bisogno di conoscere le tue passwords/secrets. Quindi perché passarglieli? Rivela le tue passwords/secrets solo ai processi che ne hanno bisogno.
Gemme come figaro o detenv ti permettono di aggiungere variabili d'ambiente ai tuoi files che sono caricati all'avvio di Rails. Quest variabili d'ambiente saranno disponibili solo al processo Rails e ai suoi processi figli.

Con Rails 5.2 il problema è stato risolto in modo elegante usando la criptatura 




## Come gestire i secrets da Rails 5.2 in avanti

From now on, Rails 5.2 will only intend to use these two files instead:

* config/credentials.yml.enc
* config/master.key

the file where you are going to store all your private credentials is config/credentials.yml.enc.

As it’s extension suggests, this file is going to be encrypted - so you won’t be able to read what’s inside of it - unless you have the proper master key to decrypt it. This is why it IS safe to version this file into your source control tool.

The second file, config/master.key, is the file where your RAILS_MASTER_KEY will be placed.

The RAILS_MASTER_KEY is the key that Rails will use to decrypt your config/credentials.yml.enc. It is NOT a good idea to version config/master.key file into your source control tool. You need to keep it as a secret, so make sure to list it in your .gitignore file if you’re using git.




## Il file master.key

è una semplice stringa usata come chiave principale di crittatura. Di default Rails crea una stringa esadecimale di 32bytes.

{title=".../config/master.key", lang=yaml, line-numbers=on, starting-line-number=13}
~~~~~~~~
f458b1a6862a56b7474b9e734d7b01c4
~~~~~~~~

Siccome questa è la chiave per decifrare tutte le secrets questa è automaticamente inclusa in .gitignore e quindi non è passata ai repositories remoti (es: GitHub)

{title=".gitignore", lang=text, line-numbers=on, starting-line-number=25}
~~~~~~~~
# Ignore master key for decrypting credentials and more.
/config/master.key
~~~~~~~~




## Editare le credenziali

Since it’s encrypted, Rails 5.2 comes with a way to edit the config/credentials.yml.enc file. You can do that by running the following command:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ EDITOR=vim rails credentials:edit
~~~~~~~~

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

Se quando esegui il comando **credentials:edit** i due files config/master.key e config/credentials.yml.enc non esistono, verranno automaticamente creati.

La configurazione iniziale sarà qualcosa come

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
# aws:
#   access_key_id: 123
#   secret_access_key: 345

# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.
secret_key_base: da874abc33759d3c51aab38959d3c5db4...847
~~~~~~~~




## Leggere le credenziali

Se ad esempio la versione decrittata del nostro config/credentials.yml.enc è questa:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
aws:
  access_key_id: 123
  secret_access_key: 345
secret_key_base: da874abc33759d3c51aab38959d3c5db4
~~~~~~~~

Allora possiamo accedere alla configurazione in questo modo:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ Rails c
> Rails.application.credentials.aws[:access_key_id]     # => "123"
> Rails.application.credentials.aws[:secret_access_key] # => "345"
> Rails.application.credentials.secret_key_base         # => "da874abc3...
~~~~~~~~



## Salviamo su git

al momento non abbiamo fatto nessun cambio ma abbiamo capito come e dove archiviare tutte le nostre passwords e variabili segrete, in altre parole i nostri "secrets".




## Chiudiamo il branch

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge rs
$ git branch -d rs
~~~~~~~~
