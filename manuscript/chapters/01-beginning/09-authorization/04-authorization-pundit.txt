## Autorizzazione

Impostiamo che autorizzazioni ha l'utente, una volta autenticato attraverso il login. 
Noi usiamo Pundit

Attiviamo pundit per autorizzare le modifiche degli utenti solo se la persona è loggata (autenticata) ed ha il ruolo di amministratore (autorizzata).

Ma prima di approfondire Pundit identifichiamo il nostro problema che richiede autenticazione:

Nel sistema di gestione delle aziende abbiamo 2 ruoli, quello del manager e quello del dipendente. 
Il Manager può visualizzare tutte le schermate del sistema. 
Il dipendente non può creare, modificare o cancellare alcuna azienda.


Risorse web

* https://rubygems.org/gems/pundit
* https://github.com/varvet/pundit
* http://railsapps.github.io/rails-authorization.html 
* https://medium.freecodecamp.org/rails-authorization-with-pundit-a3d1afcb8fd2

* https://code.tutsplus.com/tutorials/authorization-with-pundit--cms-28202
* https://medium.com/@stacietaylorcima/implement-user-authorization-with-pundit-rails-80d921cdbf28

* [Episode #047 - Authorization with Pundit](https://www.youtube.com/watch?v=PWizyTjCAdg)




## Apriamo il branch "Pundit Install"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pi
~~~~~~~~




## Installiamo la gemma

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/pundit)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/varvet/pundit)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=42}
~~~~~~~~
# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0'
~~~~~~~~

[cod. a](beginning-authorization-04a-gemfile.rb)


Eseguiamo l'installazione della gemma con bundle

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Aggiungiamo Pundit ad application_controller

Includiamo Pundit nel nostro application controller.

{title=".../app/controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
  include Pundit
~~~~~~~~

[cod. b](beginning-authorization-04b-application_controller.rb)

Questo ci permette di usare Pundit in tutta la nostra applicazione.

In alcuni esempi sul web c'è anche la riga **  protect_from_forgery with: :exception ** ma non la ho inserita perché non è di Pundit




## Lo script

Questo passaggio è opzionale ma è interessante farlo per avere una policy generica che erediteremo nelle classi delle policies specifiche per ogni Model da autorizzare. Quindi eseguiamo lo script di implementazione di pundit su rails. Lo script (Anche noto con il nome di "generator").
Il "generatore" imposterà una politica applicativa con alcune impostazioni predefinite utili.Il "generator" will set up an application policy with some useful defaults.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g pundit:install

Running via Spring preloader in process 1762
      create  app/policies/application_policy.rb
~~~~~~~~

[cod. c](beginning-authorization-04c-policies-application_policy.rb)

Dopo aver generato la "application policy", riavviamo il server Rails in modo che Rails possa rilevare ogni classe nella nuova directory app/policies.

ATTENZIONE: potrebbe essere necessario lanciare lo script come root.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo su

cloud9:~/environment/rigenerabatterie (au) $ sudo su
[root@ip-172-31-7-7 rigenerabatterie]# rails g pundit:install
Running via Spring preloader in process 861
      create  app/policies/application_policy.rb
[root@ip-172-31-7-7 rigenerabatterie]# exit
exit
~~~~~~~~

E con questo abbiamo predisposto l'ambiente di pundit. Nel prossimo capitolo inizieremo ad usarlo per le autorizzazioni.




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "install pundit"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pi:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pi
$ git branch -d pi
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
