# Il tema mylogin

Questo tema è elaborato a partie da un template del sito colorlib.com.
Il tema è nella cartella "theme-my_login" ed è un codice HTML puro. Noi lo importeremo nella nostra app rails adattandolo all'asset-pipeline.

Risorse web:

* https://colorlib.com/wp/template/login-form-v2/




## Apriamo il branch "Import Theme Mylogin"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b itm
~~~~~~~~




## La pagina di login su devise personalizzata con il nostro tema

Non importiamo tutti i files stylesheets, javascripts ed images dal nostro tema ma solo quelle che ci servono. Per sapere quali sono quelle che ci servono partiamo dal file HTML del nostro tema che vogliamo usare.
Nel nostro caso è il file index.html (che è anche l'unico di questo tema)

* Rinominiamo la ns view: users/sessions/newOLD 
* Creiamo una view vuota: users/sessions/new
* Copiamo tutto il codice dell'index.html dentro users/sessions/new
* Modifichiamo le chiamate stylesheet e javascript per l'asset_pipeline

{title=".../app/views/users/sessions/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Login</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

	  <%= stylesheet_link_tag 'mylogin/bootstrap', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="vendor/bootstrap/css/bootstrap.min.css">-->

  	<%= stylesheet_link_tag 'mylogin/material-design-iconic-font', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="fonts/iconic/css/material-design-iconic-font.min.css">-->

  	<%= stylesheet_link_tag 'mylogin/main', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="css/main.css">-->
  </head>
  <body>
  
    <div class="limiter">
      <div class="container-login100">
        <div class="wrap-login100">
          <form class="login100-form validate-form">
            <span class="login100-form-title p-b-26">
              Welcome
            </span>
            <span class="login100-form-title p-b-48">
              <i class="zmdi zmdi-font"></i>
            </span>
  
            <div class="wrap-input100 validate-input" data-validate = "Valid email is: a@b.c">
              <input class="input100" type="text" name="email">
              <span class="focus-input100" data-placeholder="Email"></span>
            </div>
  
            <div class="wrap-input100 validate-input" data-validate="Enter password">
              <span class="btn-show-pass">
                <i class="zmdi zmdi-eye"></i>
              </span>
              <input class="input100" type="password" name="pass">
              <span class="focus-input100" data-placeholder="Password"></span>
            </div>
  
            <div class="container-login100-form-btn">
              <div class="wrap-login100-form-btn">
                <div class="login100-form-bgbtn"></div>
                <button class="login100-form-btn">
                  Login
                </button>
              </div>
            </div>
  
            <div class="text-center p-t-115">
              <span class="txt1">
                Don’t have an account?
              </span>
  
              <a class="txt2" href="#">
                Sign Up
              </a>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!--===============================================================================================
    <script src="vendor/jquery/jquery-3.2.1.min.js"></script>-->
    <%= javascript_include_tag 'mylogin/jquery-3.2.1.min', 'data-turbolinks-track': 'reload' %>

    <!--===============================================================================================
    <script src="js/main.js"></script>-->
  	<%= javascript_include_tag 'mylogin/main.js', 'data-turbolinks-track': 'reload' %>
  
  </body>
</html>
~~~~~~~~


Abbiamo potuto mettere tutto il codice HTML compresi i tags <html></html> perché abbiamo un layout personalizzato praticamente vuoto

{title=".../app/views/layouts/my_login_page.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= yield %>
~~~~~~~~




## Copiamo i files richiesti sull'asset_pipeline

Copiamo dal tema all'asset-pipeline (da->a) i files che sono richiamate da index.html:

* vendor/bootstrap/css/bootstrap.min.css                -> .../assets/stylesheets/mylogin/bootstrap.min.css
* fonts/iconic/css/material-design-iconic-font.min.css  -> .../assets/stylesheets/mylogin/material-design-iconic-font.min.css
* css/main.css                                          -> .../assets/stylesheets/mylogin/main.css 

* vendor/jquery/jquery-3.2.1.min.js                     -> .../assets/javascripts/mylogin/jquery-3.2.1.min.js
* js/main.js                                            -> .../assets/javascripts/mylogin/main.js


Se proviamo adesso riceveremmo un errore perché l'asset_pipeline fa in automatico il precompile solo con i files application.css e application.js.
Per chiamate di files differenti sulle view dobbiamo aggiungerli nella configurazione della nostra applicazione. 

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
    # precompile assets stylesheets                                                             
    config.assets.precompile += ['mylogin/bootstrap.css',
                                'mylogin/main.css',
                                'mylogin/material-design-iconic-font.css'
                                ]

    # precompile assets javascripts                                                             
    config.assets.precompile += ['mylogin/jquery-3.2.1.min.js',
                                'mylogin/main.js'
                                ]
~~~~~~~~

Adesso abbiamo una pagina senza errori con lo stile del nuovo template ma che non permette di effettuare realmente il login perché gli manca il form corretto.
Prima di implementare il form puliamo la view spostando parte del codice al layout.




## Iniziamo a passare la struttura al layouts

passiamo la struttura di layouts/application commentando le chiamate di default all'asset_pipeline

{title=".../app/views/layouts/my_login_page.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!DOCTYPE html>
<html>
  <head>
    <title>Rebisworldbr Login</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%#= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%#= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
    <%= yield %>
  </body>
</html>
~~~~~~~~

Continuiamo passando il codice relativo dal file ".../app/views/users/sessions/new.html.erb"

{title=".../app/views/layouts/my_login_page.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!DOCTYPE html>
<html>
  <head>
    <title>Rebisworldbr Login</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

	  <%= stylesheet_link_tag 'mylogin/bootstrap', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="vendor/bootstrap/css/bootstrap.min.css">-->

  	<%= stylesheet_link_tag 'mylogin/material-design-iconic-font', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="fonts/iconic/css/material-design-iconic-font.min.css">-->

  	<%= stylesheet_link_tag 'mylogin/main', media: 'all', 'data-turbolinks-track': 'reload' %>
    <!--<link rel="stylesheet" type="text/css" href="css/main.css">-->

  </head>
  <body>
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
    <%= yield %>

    <!--===============================================================================================
    <script src="vendor/jquery/jquery-3.2.1.min.js"></script>-->
    <%#= javascript_include_tag 'mylogin/jquery-3.2.1.min', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'mylogin/jquery-3.2.1.min', 'data-turbolinks-track': 'reload' %>

    <!--===============================================================================================
    <script src="js/main.js"></script>-->
  	<%#= javascript_include_tag 'mylogin/main.js', 'data-turbolinks-track' => true %>
  	<%= javascript_include_tag 'mylogin/main.js', 'data-turbolinks-track': 'reload' %>

  </body>
</html>
~~~~~~~~

Vediamo come risulta la sessions/new implementandoci anche il codice rails preso da sessions/newOLD. In pratica fondiamo il form creato da devise (che abbiamo su users/sessions/newOLD) nel codice html del template.

{title=".../app/views/users/sessions/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="limiter">
  <div class="container-login100">
    <div class="wrap-login100">

      <h2>Entra nel sito</h2>
      </BR>
      
      <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>

        <div class="wrap-input100 validate-input" data-validate = "Valid email is: a@b.c">
          <%#= f.label :email %>
          <%= f.email_field :email, autofocus: true, autocomplete: "email", class: "input100" %>
          <span class="focus-input100" data-placeholder="Email"></span>
        </div>
      
        <div class="wrap-input100 validate-input" data-validate="Enter password">
          <span class="btn-show-pass">
            <i class="zmdi zmdi-eye"></i>
          </span>
          <%#= f.label :password %>
          <%= f.password_field :password, autocomplete: "off", class: "input100" %>
          <span class="focus-input100" data-placeholder="Password"></span>
        </div>
      
        <% if devise_mapping.rememberable? -%>
          <div class="field">
            <%= f.check_box :remember_me %>
            <%= f.label :remember_me %>
          </div>
        <% end -%>

        <div class="container-login100-form-btn">
          <div class="wrap-login100-form-btn">
            <div class="login100-form-bgbtn"></div>
            <button class="login100-form-btn">
              <%= f.submit "Log in", style: "background: none; border: none;" %>
            </button>
          </div>
        </div>
      
      <% end %>
      
      <%= render "users/shared/links" %>


    </div>
  </div>
</div>
~~~~~~~~

Adesso funziona!

Non ci resta che far funzionare il fonts per mostrare l'occhio che rivela la password.
Ma questo lo facciamo nel prossimo capitolo




## aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add template mylogin on devise view users/sessions/new"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku itm:master
~~~~~~~~



## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge itm
$ git branch -d itm
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
