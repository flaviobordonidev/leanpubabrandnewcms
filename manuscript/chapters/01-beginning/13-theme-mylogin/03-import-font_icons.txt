# I fonts

Non ci resta che importare i fonts sull'asset_pipeline ed associare le chiamate nel views




## Apriamo il branch "Import Font Icons"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ifi
~~~~~~~~




## importiamo i fonts dal tema all'asset_pipeline

abbiamo già impostato la chiamata allo stylesheet dei fonts su views/layout/my_login_page.html.erb.

{title=".../app/views/layout/my_login_page.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=14}
~~~~~~~~
  	<%= stylesheet_link_tag 'mylogin/material-design-iconic-font', media: 'all', 'data-turbolinks-track': 'reload' %>
~~~~~~~~

la abbiamo inserita nel config/application

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
    # precompile assets stylesheets                                                             
    config.assets.precompile += ['mylogin/bootstrap.css',
                                'mylogin/main.css',
                                'mylogin/material-design-iconic-font.css'
                                ]
~~~~~~~~

ed abbiamo copiato il file dal tema all'asset_pipeline (da -> a).

* .../theme-mylogin/fonts/iconic/css/material-design-iconic-font.css	->	.../app/assets/stylesheets/

Questo non è sufficiente. Per visualizzare le icone dobbiamo aggiornare il file css con chiamate per l'asset_pipeline
Verifichiamo le chiamate presenti:

{title=".../app/assets/stylesheets/mylogin/material-design-iconic-font.css", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  src: url('../fonts/Material-Design-Iconic-Font.woff2?v=2.2.0') format('woff2'), url('../fonts/Material-Design-Iconic-Font.woff?v=2.2.0') format('woff'), url('../fonts/Material-Design-Iconic-Font.ttf?v=2.2.0') format('truetype');
~~~~~~~~

Copiamo tutta la cartella "fonts" con i relativi files richiesti.
Importiamo i fonts dal tema alla nostra app Rails (da -> a).

* .../theme-mylogin/fonts/iconic/fonts/ 	->	.../app/assets/stylesheets/fonts/

in locale questo funziona. Ma non è sufficiente per la produzione su Heroku.




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://rebisworldbr1-flaviobordonidev.c9users.io/login





## Implementiamo i fonts per Heroku


Cambiamo tutte le chiamate url(...) con l'helper rails font-url(...)

I> ATTENZIONE: assicurati di usare **.scss**

Se lasciamo ".css" riceveremo un errore in fase di precompile di heroku perché l'helper font-url(...) non è riconosciuto come un comando css valido. Per usarlo dobbiamo usare SASS/scss quindi rinominare il file:

* da material-design-iconic-font.css
* a  material-design-iconic-font.scss


{title=".../app/assets/stylesheets/mylogin/material-design-iconic-font.scss", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  /*src: url('../fonts/Material-Design-Iconic-Font.woff2?v=2.2.0') format('woff2'), url('../fonts/Material-Design-Iconic-Font.woff?v=2.2.0') format('woff'), url('../fonts/Material-Design-Iconic-Font.ttf?v=2.2.0') format('truetype');*/
  src: font-url('mylogin/fonts/Material-Design-Iconic-Font.woff2?v=2.2.0') format('woff2'), font-url('mylogin/fonts/Material-Design-Iconic-Font.woff?v=2.2.0') format('woff'), font-url('mylogin/fonts/Material-Design-Iconic-Font.ttf?v=2.2.0') format('truetype');
~~~~~~~~

I> ATTENZIONE: usando font-url() dobbiamo ridare tutto il percorso a partire da .../assets/stylesheets perché usa l'approccio standard dell'asset_pipeline.

Adesso funziona!




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "implement material-design-iconic-font.scss for heroku"
~~~~~~~~




## Publichiamo su Heroku


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku icf:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge icf
$ git branch -d icf
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
