# Attiviamo l'internazionalizzazione statica

Invece di scrivere i contenuti statici (quelli non presi dal database) già tradotti è più elegante mettere dei "segnaposto" che saranno poi usati dai vari files di traduzione nelle varie lingue.
Questo permette di avere un'applicazione già pronta per essere tradotta in più lingue.

Il nome dei "segnaposto" li mettiamo in inglese per dare un'impronta world-wide al nostro applicativo che ci permetterà in futuro di assumere sviluppatori da tutto il mondo.




## Internationalizazione (i18n)

Per internazionalizzazione si intende la traduzione dell'applicazione nelle varie lingue.

L'internazionalizzazione si divide in due parti.
statica = traduzione delle stringhe usate nell'applicazione. Non traduce i dati del database.
dinamica = traduzione dei dati del database.

Al momento noi ci occupiamo solo di quella statica.




## I18n statico con YAML

Per tradurre in varie lingue il contenuto statico della nostra applicazione (quello che non è contenuto nel database) utilizziamo il file yaml che è disponibile di default su Rails. Non c'è necessità di installare una nuova gemma. Rimane comunque la possibilità di cambiare successivamente solo il backend ed usarne uno differente invece dei files yaml. Tutto il resto dell'interalizzazione resta invariato.

Usiamo l'helper "t" per tutte le stringhe che dobbiamo internazionalizzare.
la stringa che viene passata all'helper "t" è un segnaposto che si usa nel file yaml associandogli la stringa corretta nella lingua scelta.

[codice: homepage views 05](#code-homepage-views-05)

{title="views/homepage/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<h1> <%= t ".first_header" %> </h1>
<p> <%= t ".first_paragraph" %> </p>
~~~~~~~~

Se visualizziamo sul browser vediamo che si visualizzano i segnaposto.  
Per far apparire le descrizioni invece dei segnaposti implementiamo il backend Yaml. Iniziamo con il file en.yml perché l'inglese (en) è la lingua che viene selezionata di default.
Avendo usato il "." davanti al nome del segnaposto, per convenzione Rails cerca il segnaposto catalogato nella rispettiva view. In questo caso sotto en -> homepage -> index.


[codice: application config 02](#code-application-config-02)

{title="config/locales/en.yml", lang=yaml, line-numbers=on, starting-line-number=4}
~~~~~~~~
en:
  homepage:
    index:
      first_header: "Questa è l'homepage"
      first_paragraph: "il testo verrà preso dal database ma alcuni messaggi sono passati dall'applicazione ed è quindi bene che vengano tradotti per essere pronti a supportare più lingue."
~~~~~~~~

I> ATTENZIONE! i files YAML (.yml) sono sensibili all'indentatura. Per indentare usate gli "spazi" e non i "tabs".

I> Attenzione! C'è un bug e sui partials non mi funziona il "." come previsto quando uso i partials. Ho quindi scelto di usare tutto il percorso:

[codice: homepage views 06](#code-homepage-views-06)

{title="views/homepage/index/_breadcrumbs.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<h1> <%= t "homepage.index.first_header" %> </h1>
<p> <%= t "homepage.index.first_paragraph" %> </p>
~~~~~~~~


Adesso creiamo il file it.yml per implementare la lingua italiana (it).


[codice: application config 03](#code-application-config-03)

{title="config/locales/it.yml", lang=yaml, line-numbers=on, starting-line-number=4}
~~~~~~~~
it:
  homepage:
    index:
      first_header: "Questa è l'homepage"
      first_paragraph: "il testo verrà preso dal database ma alcuni messaggi sono passati dall'applicazione ed è quindi bene che vengano tradotti per essere pronti a supportare più lingue."
~~~~~~~~

Per cambiare il "locale" uso un before_action sul file application_controller.rb così si ripercuote su tutta l'applicazione.

[codice: application controllers 01](#code-application-controllers-01)

{title="controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
before_action :set_locale
~~~~~~~~

{title="controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=9}
~~~~~~~~
private

#set language for internationalization
def set_locale
  I18n.locale = "it"
~~~~~~~~


può essere necessario riavviare il webserver per permettere a Rails di caricare il file it.yml

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
CTRL+C        (per stoppare)
$ rails s     (per ripartire)
~~~~~~~~


verifichiamo sul browser http://localhost:3000




{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "set i18n static"
~~~~~~~~




## Cambio lingua sull'URL.

Mettiamo la selezione della lingua all'interno dell'URL. Così avremo
localhost:3000/it
localhost:3000/en
Per far questo mettiamo tutti i nostri percorsi "routes" dentro un blocco "scope".

[codice: application config 08](#code-application-config-08)

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
scope "(:locale)", locale: /en|it/ do
~~~~~~~~

potevo lasciare uno scope più ampio 

~~~~~~~~
scope "(:locale)" do
~~~~~~~~

ma questo mi creava un problema di sicurezza. Molto meglio verificare che sia passato un "locale" valido. Nel nostro caso o "it" o "en" che ho gestito nei miei files yml con la traduzione.




## Risolvo problema sui link_to

Avere un blocco "scope" su routes mi crea un problema sul comportamento di default di Rails di tutti i links. Per risolverlo:

[Codice: application controllers 02](#code-application-controllers-02)

{title="controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
def default_url_options(options = {})
  {locale: I18n.locale}
end
~~~~~~~~




## Scelgo lingua di default

sulla configurazione dell'applicazione imposto la lingua di default:

[Codice: application config 09](#code-application-config-09)

{title="config/application.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
config.i18n.default_locale = :it
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "set i18n static permanent"
~~~~~~~~







Questa user story è finita  

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "end of story homepage"
~~~~~~~~

Facciamo un "pull request" su github per fare il merge e chiudere il branch.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git pull origin master
$ git merge homepage
$ git push origin master
$ git branch -d homepage
$ git push origin :homepage
~~~~~~~~



