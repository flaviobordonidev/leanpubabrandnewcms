# tinymce

Tra i vari "text editor" Fla ha selezionato i seguenti:
  1. tinnymce
  2. wysihtml5-rails
  3. redactor

Valutando il sito web, il sito su github (se è aggiornato con frequenza e la data dell'ultima modifica e versione), il sito rubygems.org (se è aggiornato con frequenza, il numero di sviluppatori, i TOTAL DOWNLOADS, e la data dell'ultima versione).
Tra i tre ha poi scelto tinymce perché ha una gemma aggiornata, con un numero di download maggiore ed il sito web ufficiale ha anche una versione a pagamento con clienti d'eccellenza. Quindi si presuppone che si mantenga aggiornata nel tempo.



### Risorse web

I siti web di riferimento:
  * https://www.tinymce.com/docs/demo/basic-example/
  * https://github.com/spohlenz/tinymce-rails
  * https://rubygems.org/gems/tinymce-rails/versions/4.3.8
  * https://rubygems.org/gems/bootstrap-wysihtml5-rails
  * https://rubygems.org/gems/redactor-rails




## installazione

Fla implementa il text editor tinymce che gli permette di scrivere un rich text fatto di codice html sul campo text_field.
Per prima cosa aggiunge la gemma tinymce-rails (assicurandosi che sia sul gruppo globale e non nel gruppo assets)

[codice: application 07](#code-application-07)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=37}
~~~~~~~~
# text editor on text_field
gem 'tinymce-rails', '~> 4.3', '>= 4.3.8'
~~~~~~~~

Esegue l'installazione della gemma con bundle ed il refresh dell'ambiente rbenv (opzionale)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
$ rbenv rehash
~~~~~~~~

Crea il file di configurazione tinymce.yml con le opzioni globali:

[codice: application config 04](#code-application-config-04)

{title="config/tinymce.yml", lang=yaml, line-numbers=on, starting-line-number=1}
~~~~~~~~
toolbar:
  - styleselect | bold italic | undo redo
  - image | link
plugins:
  - image
  - link
~~~~~~~~


Include TinyMCE nell'assets pipeline modificando il file application.js

[codice: application assets 01](#code-application-assets-01)

{title="assets/javascripts/application.js", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
//= require tinymce-jquery
~~~~~~~~


Inizializza TinyMCE su posts view edit

I> For each textarea that you want to use with TinyMCE, add the "tinymce" class and ensure it has a unique ID.
I>
I> <%= f.text_area :content, :class => "tinymce", :rows => 40, :cols => 120 %>
I>
I> Then invoke the tinymce helper to initialize TinyMCE:
I>
I> <%= tinymce %>

{title="views/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="field">
  <%= f.label :content_second %><br>
  <%#= f.text_area :content_second %>
  <%= f.text_area :content_second, :class => "tinymce", :rows => 40, :cols => 120 %>
  <%= tinymce %>
</div>
~~~~~~~~

funziona.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add tinymce localhost"
~~~~~~~~




## Precompile per Heroku 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ RAILS_ENV=production bundle exec rake assets:precompile
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "precompile for heroku"
$ git push heroku master
~~~~~~~~




## fine della user-story

Faccio il merge e chiudo il branch.
