# select_realateds - HomePage Favorites Companies People

ATTENZIONE -> un nome migliore di select_realateds è ** selections **. Consideriamolo nella prossima versione.

in questo capitolo attiviamo la tabella select_realateds e la popoliamo con 5 entità: Favoriti, Persone, azienede, contatti, indirizzi.
Nell'homepage la scelta è invece solo tra le prime 3 entità (Favoriti, Persone, Aziende). Scegliendo una di queste entità si avrà in basso (sezione related) l'elenco della scelta fatta. (es: se scelgo persone avremo l'elenco delle persone). 

La tabella select_realateds avrà inoltre: le posizioni di un'offerta oppure la scelta tra intestazione, posizioni, condizioni generali, condizioni di pagamento, ecc...

Per far questo aggiungiamo delle colonne boolean per ogni entità.


## Apriamo il branch "select relateds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b sr
~~~~~~~~




## creiamo select_relateds


Una tabella con tutte le possibili scelte e vari campi boolean: 

bln_entities 

* bln_homepage
* Nessun campo per favorites perché non ha una sua pagina "main". E' solo un relateds.
* bln_people
* bln_companies
* Nessun campo per addresses perché non ha una sua pagina "main". E' solo un relateds.
* Nessun campo per contacts perché non ha una sua pagina "main". E' solo un relateds.
* bln_users
* bln_components
* bln_products

bln_documents

* bln_commission
* bln_offers (headers, footer, positions, condizioni, ...)
* bln_orders (headers, footer, positions, condizioni, ...)
* bln_confirmations (headers, footer, positions, condizioni, ...)
* bln_shipping_notes (headers, footer, positions, condizioni, ...)




## scaffold

Creiamo la tabella select_relateds mi servirà anche il Model, le Views ed il Controller quindi uso lo scaffold. Iniziamo con solo tre colonne bln ed in futuro, mano a mano che ne avremo bisogno, inseriremo le altre colonne.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold SelectRelated name:string metadata:string bln_homepage:boolean bln_people:boolean bln_companies:boolean
~~~~~~~~

questo crea il migrate

{title=".../db/migrate/xxx_create_select_relateds.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateSelectRelateds < ActiveRecord::Migration[5.0]
  def change
    create_table :select_relateds do |t|
      t.string :name
      t.string :metadata
      t.boolean :bln_homepage
      t.boolean :bln_people
      t.boolean :bln_companies

      t.timestamps
    end
  end
end
~~~~~~~~

* name: è quello che viene tradotto con [Globalize](https://github.com/globalize/globalize)
* meta_data: è il valore che viene usato per chiamare l'icona o il path o la selezione. Tutte le variazioni le faccio col codice con .singolarize .pluralize eval() etc...


Creiamo la tabelle sul db eseguendo il migrate.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~




## i18n - dynamic

prima ancora di iniziare i semi mi attivo per l'internazionalizzazione sul database (i18n dynamic).
Per la traduzione uso Globalize (gem 'globalize', '4.0.3') (https://github.com/globalize/globalize)




### Installiamo la gemma "Globalize"

Per gestire più lingue sul database installiamo la gemma Globalize.
Contenuto DINAMICO (sul database) con GLOBALIZE

Facciamo riferimenti al [sito ufficiale di GLOBALIZE](https://github.com/globalize/globalize).

Uno dei requisiti è che activerecord sia  >= 4.2.0 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle show activerecord

/usr/local/rvm/gems/ruby-2.3.0/gems/activerecord-5.0.0.1
~~~~~~~~

Al momento per installare su Rails 5 dobbiamo puntare sul loro branch master su github.[(codice: 01)](#code-homepage-select_realateds_seeds-01)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=54}
~~~~~~~~
# Internationalization (I18n) for ActiveRecord model/data translation.
gem 'globalize', git: 'https://github.com/globalize/globalize'
gem 'activemodel-serializers-xml'
~~~~~~~~

Installiamo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




### Parametri di default per l'internazionalizzazione

Lasciamo il default_locale su italiano.
Attiviamo il fallback sulla lingua di default in caso di mancanza di traduzione. (fallbacks)

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
config.i18n.default_locale = :it
config.i18n.fallbacks = true
~~~~~~~~




### Usiamo globalize

Attiviamo l'internazionalizzazione sul database usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title=".../app/models/select_related.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class SelectRelated < ApplicationRecord
  
  # globalize required
  translates :name, :fallbacks_for_empty_translations => true
  #---
end
~~~~~~~~

I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_select_relateds_translations
~~~~~~~~


Lavoriamo sulla migration usando il metodo .create_translation_table sul model "SelectRelated" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_select_relateds_transaltions.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateSelectRelatedsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      
      dir.up do
        SelectRelated.create_translation_table!({
          name: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        SelectRelated.drop_translation_table! migrate_data: true
      end
      
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "select_realateds" i campi con traduzione, ossia "name".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add SelectRelated I18n"
~~~~~~~~




## seed

Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo capitolo.

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

puts "setting the Select_Relateds data with I18n :en :it"
SelectRelated.new(name: "favorites", metadata: "favorites", bln_homepage: TRUE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
SelectRelated.last.update(name: "favoriti", locale: :it)

SelectRelated.new(name: "people", metadata: "people", bln_homepage: TRUE, bln_people: FALSE, bln_companies: TRUE, locale: :en).save
SelectRelated.last.update(name: "persone", locale: :it)

SelectRelated.new(name: "companies", metadata: "companies", bln_homepage: TRUE, bln_people: TRUE, bln_companies: FALSE, locale: :en).save
SelectRelated.last.update(name: "aziende", locale: :it)

SelectRelated.new(name: "contacts", metadata: "contacts", bln_homepage: FALSE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
SelectRelated.last.update(name: "contatti", locale: :it)

SelectRelated.new(name: "addresses", metadata: "addresses", bln_homepage: FALSE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
SelectRelated.last.update(name: "indirizzi", locale: :it)
~~~~~~~~

Per popolare il database con i seed si possono usare i comandi:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rake db:seed
o
$ rake db:setup
~~~~~~~~

I> il ** rake db:seed ** esegue nuovamente tutti i comandi quindi si devono commentare tutti quelli già eseguiti altrimenti si creano dei doppioni. Gli stessi comandi possono essere eseguiti manualmente sulla rails console e si lascia l'esecuzione del seed solo in fase di inizializzazione di tutto l'applicativo.
I>
I> il ** rake db:setup ** ricrea TUTTO il database e lo ripopola con db/seeds.rb. Quindi tutto il database è azzerato ed eventuali records presenti sono eliminati




## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c

> SelectRelated.new(name: "favorites", metadata: "favorites", bln_homepage: TRUE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
> SelectRelated.last.update(name: "favoriti", locale: :it)
> 
> SelectRelated.new(name: "people", metadata: "people", bln_homepage: TRUE, bln_people: FALSE, bln_companies: TRUE, locale: :en).save
> SelectRelated.last.update(name: "persone", locale: :it)
> 
> SelectRelated.new(name: "companies", metadata: "companies", bln_homepage: TRUE, bln_people: TRUE, bln_companies: FALSE, locale: :en).save
> SelectRelated.last.update(name: "aziende", locale: :it)
> 
> SelectRelated.new(name: "contacts", metadata: "contacts", bln_homepage: FALSE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
> SelectRelated.last.update(name: "contatti", locale: :it)
> 
> SelectRelated.new(name: "addresses", metadata: "addresses", bln_homepage: FALSE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
> SelectRelated.last.update(name: "indirizzi", locale: :it)

> SelectRelated.all
> exit
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed select_realateds"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## routes

aggiustiamo l'instradamento [(codice: 02)](#code-homepage-select_realateds_seeds-02) nel file routes

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=8}
~~~~~~~~
  resources :select_relateds, only: [:index]
~~~~~~~~

I se voglilamo verificare che funziona tutto da browser dobbiamo togliere dalla pagina index i links alle altre pagine perché abbiamo attivato l'instradamento per la sola pagina index. Altrimenti ci da errore.

{title=".../app/views/select_relateds/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<p id="notice"><%= notice %></p>

<h1>Select Relateds</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Metadata</th>
      <th>Bln homepage</th>
      <th>Bln people</th>
      <th>Bln companies</th>
    </tr>
  </thead>

  <tbody>
    <% @select_relateds.each do |select_related| %>
      <tr>
        <td><%= select_related.name %></td>
        <td><%= select_related.metadata %></td>
        <td><%= select_related.bln_homepage %></td>
        <td><%= select_related.bln_people %></td>
        <td><%= select_related.bln_companies %></td>
      </tr>
    <% end %>
  </tbody>
</table>
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?locale=en
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold select_related and populate"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku sr:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge sr
$ git branch -d sr
~~~~~~~~