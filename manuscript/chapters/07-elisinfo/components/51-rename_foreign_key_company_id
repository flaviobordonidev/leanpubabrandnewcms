# Rinominiamo la chiave esterna company_id

come anticipato nel capitolo precedente andiamo a rinominare il campo company_id in supplier_id per tenere traccia del fornitore del componente. 



## Apriamo il branch "rename foreign key"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b rfk
~~~~~~~~




## Change foreign key column name

Adesso che funziona tutto implementiamo il cambio della chiave esterna da company_id a supplier_id.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration RenameCompanyIdInComponents
~~~~~~~~

{title=".../db/migrate/xxx_rename_company_id_in_components.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
class RenameCompanyIdInComponents < ActiveRecord::Migration[5.0]
  def change
    rename_column :components, :company_id, :supplier_id
  end
end
~~~~~~~~

I> Non mi devo preoccupare di rinominare anche l'indice perché ci pensa già il comando **rename_column**.


Effettuiamo il migrate del database eseguire i cambiamenti

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "rename company_id to supplier_id in components"
~~~~~~~~

adesso cambiamo il nome anche nelle altre parti dell'applicazione


## Aggiorniamo la pagina components/edit -> _form

Iniziamo dal codice del pulsante per l'azienda nell'edit del componenete, nel partial "_form".

{title=".../app/views/components/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=41}
~~~~~~~~
   <div class="field">
      <%= f.label :supplier_id, class: "control-label" %>
      <%= f.number_field :supplier_id, class: 'form-control' %>
      <span class="help-block"></span>
    </div> <!-- /.field -->

    <div class="field">
      <% if component.supplier_id.blank? %>
        <div class="field">
          <%= f.label :supplier_id, class: "control-label" %><br>
          <%= link_to url_for(h_rear_params_path(path: "/companies")), :class => "list-group-item" do %>
            <span class="glyphiconmy ico_company right-pad"></span>
            <%= "Scegli un'azienda da inserire" %>
          <% end %>
        </div> <!-- /.field -->
      <% else %>
        <div class="field">
          <%= f.label :supplier_id, class: "control-label" %><br>
          <%= link_to url_for(h_rear_params_path(path: "/companies")), class: "list-group-item" do %>
          <%#= link_to companies_path(related: "companies", page: 1, search: ""), :class => "list-group-item" do %>
            <span class="glyphiconmy ico_company right-pad"></span> <%= "#{component.company.name}" %>
            <div><%= "#{component.company.building}" %></div>
          <% end %>
        </div> <!-- /.field -->
      <% end %>
      <span class="help-block"></span>
    </div> <!-- /.field -->
~~~~~~~~

Questo ancora non funziona perché ci manca la relazione uno-a-molti con l'azienda.




## Aggiorniamo la relazione uno-a-molti


Nel modello del componente mettiamo la relazione (== Relationships ===) di "appartiene a" (belongs_to) con il riferimento esplicito alla chiave esterna

{title=".../app/models/component.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
  # == Relationships ========================================================

  # ==== one-to-many
  belongs_to :company, foreign_key: :supplier_id
~~~~~~~~

A> Attenzione questo funziona ma per richiamare il fornitore dal componente ho ** @component.company.name ** invece noi vogliamo fare una chiamata distinta come supplier.

Per far questo usiamo

{title=".../app/models/component.rb", lang=ruby, line-numbers=on, starting-line-number=18}
~~~~~~~~
  belongs_to :supplier, class_name: 'Company'
~~~~~~~~

questo ci permette di usare la relazione in questo modo ** @component.supplier.name ** 

Nel modello dell'azienda aggiorniamo la relazione (== Relationships ===) di "ha molti" (has_many) con il riferimento esplicito alla chiave esterna

{title=".../app/models/company.rb", lang=ruby, line-numbers=on, starting-line-number=45}
~~~~~~~~
  # == Relationships ========================================================

  # ==== one-to-many
  has_many :components, foreign_key: :supplier_id
~~~~~~~~

* https://stackoverflow.com/questions/25047920/rails-belongs-to-with-custom-column-name
* https://stackoverflow.com/questions/27809342/rails-migration-add-reference-to-table-but-different-column-name-for-foreign-ke
* http://sevenseacat.net/2015/02/24/add_foreign_key_gotchas.html
* http://guides.rubyonrails.org/active_record_migrations.html#foreign-keys

la relazione è in piedi. Adesso resta solo da aggiornare come il controller components gestisce il link ** change_id: company.id ** passato da companies/index.




## Aggiorniamo components controller azione edit

Aggiorniamo quindi l'azione **edit** del controller. Cambiamo **:company_id** in **supplier_id**

{title=".../app/models/components_controller.rb", lang=ruby, line-numbers=on, starting-line-number=39}
~~~~~~~~
    if params[:change_id].present?
      @component.supplier_id = params[:change_id]
    end
~~~~~~~~

perfetto adesso abbiamo tutte le modifiche rispetto al capitolo precedente. Ci manca però la parte creata in atumatico con lo scaffold.




## Aggiorniamo components controller mass-assignment

cambiamo **:company_id** in **supplier_id**

{title=".../app/models/components_controller.rb", lang=ruby, line-numbers=on, starting-line-number=95}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def component_params
      params.require(:component).permit(:image, :part_number, :name, :supplier_id, :homonym, :memo, :description, :supplier_price_list, :currency, :currency_exchange, :currency_rounding, :discount_one_min_quantity, :discount_one_percentage, :discount_one_rounding, :discount_two_min_quantity, :discount_two_percentage, :discount_two_rounding, :discount_three_min_quantity, :discount_three_percentage, :discount_three_rounding, :discount_four_min_quantity, :discount_four_percentage, :discount_four_rounding, :discount_five_min_quantity, :discount_five_percentage, :discount_five_rounding, :discount_note)
    end
~~~~~~~~




## Aggiorniamo la pagina components/show

Anche se non abbiamo visualizzato il fornitore nella pagina show abbiamo lasciato l'id visibile nell'ambiente di sviluppo.

{title=".../app/views/components/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=84}
~~~~~~~~
    <strong>Supplier:</strong>
    <%= @component.supplier_id %>
~~~~~~~~

ed è tutto.

verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

![https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps](images/company_person_maps/cpmaps_index/cpmaps.png)

Aggiorno git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "rename company_id to supplier_id all changes in the application"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku rfk:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi per passare la modifica serve il db:migrate.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge rfk
$ git branch -d rfk
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~