# Aggiungiamo campi per sconto quantità

in questo capitolo modifichiamo e aggiungiamo i campi per gestire lo sconto sulle quantità. Non creiamo una nuova tabella con relazione uno a molti per gestire gli sconti sulle quantità ma aggiungiamo cinque possibili gestioni di quantità. I nuovi campi saranno:

*     t.decimal :discount_one_min_quantity
*     t.decimal :discount_one_percentage
*     t.integer :discount_one_rounding
*     t.decimal :discount_two_min_quantity
*     t.decimal :discount_two_percentage
*     t.integer :discount_two_rounding
*     t.decimal :discount_three_min_quantity
*     t.decimal :discount_three_percentage
*     t.integer :discount_three_rounding
*     t.decimal :discount_four_min_quantity
*     t.decimal :discount_four_percentage
*     t.integer :discount_four_rounding
*     t.decimal :discount_five_min_quantity
*     t.decimal :discount_five_percentage
*     t.integer :discount_five_rounding

Al posto di **supplier_discount** abbiamo i due nuovi campi **discount_one_min_quantity e discount_one_percentage**


## Apriamo il branch "Quantity Discount Seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b qds
~~~~~~~~




## Modifichiamo i campi discount


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration RenameSupplierDiscountInComponents
~~~~~~~~

questo mi crea il migration:

{title=".../db/migrate/xxx_rename_supplier_discount_in_components.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class RenameSupplierDiscountInComponents < ActiveRecord::Migration[5.0]
  def change
    rename_column :components, :supplier_discount, :discount_one_percentage
  end
end
~~~~~~~~


Effettuiamo il migrate del database per rinominare il campo sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "rename columns from supplier_discount to discount_one_percentage in components"
~~~~~~~~




## Aggiungiamo i nuovi campi


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddQuantityDiscountToComponents discount_one_min_quantity:decimal discount_one_rounding:integer discount_two_min_quantity:decimal discount_two_percentage:decimal discount_two_rounding:integer discount_three_min_quantity:decimal discount_three_percentage:decimal discount_three_rounding:integer discount_four_min_quantity:decimal discount_four_percentage:decimal discount_four_rounding:integer discount_five_min_quantity:decimal discount_five_percentage:decimal discount_five_rounding:integer discount_note:text 
~~~~~~~~

questo mi crea il migration:

{title=".../db/migrate/xxx_create_contacts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddQuantityDiscountToComponents < ActiveRecord::Migration[5.0]
  def change
    add_column :components, :discount_one_min_quantity, :decimal
    add_column :components, :discount_one_rounding, :integer
    add_column :components, :discount_two_min_quantity, :decimal
    add_column :components, :discount_two_percentage, :decimal
    add_column :components, :discount_two_rounding, :integer
    add_column :components, :discount_three_min_quantity, :decimal
    add_column :components, :discount_three_percentage, :decimal
    add_column :components, :discount_three_rounding, :integer
    add_column :components, :discount_four_min_quantity, :decimal
    add_column :components, :discount_four_percentage, :decimal
    add_column :components, :discount_four_rounding, :integer
    add_column :components, :discount_five_min_quantity, :decimal
    add_column :components, :discount_five_percentage, :decimal
    add_column :components, :discount_five_rounding, :integer
    add_column :components, :discount_note, :text
  end
end
~~~~~~~~

Non abbiamo messo **:discount_one_percentage** perché lo abbiamo fatto modificando il campo nel paragrafo precedente.

Effettuiamo il migrate del database per aggiungere i nuovi campi sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add columns for quantity discount to components"
~~~~~~~~




## I18n - dynamic

Non dobbiamo aggiungere nessuna traduzione perché sono tutti campi numerici. il discount_xxx_rounding ha valori interi che vengono tradotti staticamente da codice.




## seed

Per i nuovi campi aggiunti eseguiremo solo la procedura manuale descritta nel prossimo paragrafo.




## Popoliamo manualmente la tabella

(DA FARE -- AL MOMENTO SALTO QUESTO PARAGRAFO E MI DEDICO DIRETTAMENTE ALLE VIEWS)


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed quantity discount to components"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku qds:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente dove abbiamo popolato manualmente la tabella.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge qds
$ git branch -d qds
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~