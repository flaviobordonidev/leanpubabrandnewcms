# Creiamo nuovo componente




## Apriamo il branch "components new"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cn
~~~~~~~~




## Homepage nuovo componente

sulla lista di componenti della homepage abbiamo già implementato il pulsante di nuovo, abilitato se è fatta una ricerca o se sono presenti meno di 7 voci in elenco.




## Attiviamo la view components/new

Implementiamo la struttura del mockup nella pagina components/new

{title=".../app/views/components/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% provide(:title, "New component") %>

<div class="container-fluid rear_mode">
  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit' %>">
          <%= link_to "#pane_edit", "data-toggle" => "tab" do %>
            <%= content_tag :span,"", class: "glyphiconmy ico_edit" %>
          <% end %>
        </li>
      </ul>
    </div><!-- /.col -->
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%= render 'button_close' %>
    </div> <!-- /.col -->
  </div> <!-- /.row -->

  <div class="row">
    <div class="col-xs-12">
      <div class="tab-content">
        <div id="pane_edit" class="tab-pane <%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit'  %>">
          <div class="text-center bottom-pad">
            <h4><%= t(".pane_edit_header") %></h4>
          </div> <!-- /.text-center -->
          <%= render 'form', component: @component %>
        </div> <!-- /.tab-pane -->
      </div> <!-- /.tab-content -->
    </div> <!-- /.col -->
  </div> <!-- /.row -->
</div> <!-- /.rear_mode -->
~~~~~~~~


Impostiamo il passaggio di tutti i parametri nell'url nella creazione del nuovo componente. Quindi modifichiamo il redirect_to dell'azione **create** a seguito del corretto salvataggio dei dati nel database. Poiché dopo la creazione di un nuovo componente ci spostiamo direttamente sul suo show, impostiamo corrispondentemente anche il last_front_controller, last_front_action e last_front_id. Inoltre gli diciamo di presentare inizialmente l'elenco "favorites". 

{title=".../app/controllers/components_controller.rb", lang=ruby, line-numbers=on, starting-line-number=48}
~~~~~~~~
        format.html { redirect_to url_for(view_context.h_params_path(path: "/components/#{@component.id}", last_front_controller: "components", last_front_action: "show", last_front_id: "#{@component.id}", related: "favorites")), notice: 'Component was successfully created.' }
~~~~~~~~


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add component new"
~~~~~~~~



## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cn:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cn
$ git branch -d cn
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~