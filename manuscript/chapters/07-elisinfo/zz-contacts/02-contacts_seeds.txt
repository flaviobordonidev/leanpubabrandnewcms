# Creiamo le tabelle dei contatti

in questo capitolo lavoreremo principalmente lato database. Creeremo la tabella contatti e metteremo i seed iniziali ed alcuni dati di prova. Non avremo nessuna interazione lato views e quindi non apriremo il browser per usare la web gui su http://localhost:3000
Eseguendo gli scaffolds la web gui è creata in automatico ma in questo capitolo non la utilizzeremo. Utilizzeremo invece la console di rails "$ rails c".
Creiamo la parte (contact/contacts) ovvero come entrare in contatto e comunicare con le persone: Tel, email, skype, viber, mobile, canale irc, modo radio sul cellulare, ....




## Apriamo il branch "Contacts seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cs
~~~~~~~~




## contacts - scaffold

Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold Contact medium:string identifier:string
~~~~~~~~

  medium        | identifier
  ---------------------------------
  telephone     | number
  skype         | address
  email         | address
  irc           | channel
  whatsapp      | telephone number
  FTP           | IP
  radioamotore  | channel
  pager         | telephone number
  snapchat      | user name
  
  
questo crea il migrate:

{title=".../db/migrate/xxx_create_companies.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
class CreateContacts < ActiveRecord::Migration[5.0]
  def change
    create_table :contacts do |t|
      t.string :medium
      t.string :identifier

      t.timestamps
    end
  end
end
~~~~~~~~

Effettuiamo il migrate del database per creare la tabella "companies" sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold Contact"
~~~~~~~~




## Usiamo globalize - i18n - dynamic

prima ancora di iniziare i semi mi attivo per l'internazionalizzazione sul database (i18n dynamic).

Attiviamo l'internazionalizzazione sul database usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Contact < ApplicationRecord

  # globalize required
  translates :medium, :fallbacks_for_empty_translations => true
  #---
  
end
~~~~~~~~

I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_contacts_translations
~~~~~~~~

Lavoriamo sulla migration usando il metodo .create_translation_table sul model "Company" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_contacts_transaltions.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateContactsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      
      dir.up do
        Contact.create_translation_table!({
          medium: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        Contact.drop_translation_table! migrate_data: true
      end
      
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "contacts" i campi con traduzione, ossia "medium".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add Contact I18n"
~~~~~~~~




## seed 

Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo paragrafo.

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

puts "setting the Person data with I18n :en :it"
Person.new(title: "Mr.", first_name: "Jhon", last_name: "Doe", locale: :en).save
Person.find(1).update(title: "Sig.", locale: :it)


puts "setting the Company data with I18n :en :it"
Company.new(name: "ABB", sector: "Chemical", status: "Client", locale: :en).save
Company.first.update(sector: "Chimico", status: "Cliente", locale: :it)


puts "setting the CompanyPersonMap data with I18n :en :it"
CompanyPersonMap.new(person_id: 1, company_id: 1, summary: "purchase department", locale: :en).save
CompanyPersonMap.first.update(summary: "ufficio acquisti", locale: :it)


puts "setting the Contacts data with I18n :en :it"
Contact.new(medium: "Telephone", locale: :en).save
Contact.first.update(medium: "Telefono", locale: :it)
~~~~~~~~

I> Non usiamo nè "$ rake db:seed" nè "$ rake db:setup" perché popoliamo la tabella manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed contacts"
~~~~~~~~






## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> Contact.new(medium: "Telephone", identifier: "+39 0745239844", locale: :en).save
irb> Contact.last.update(medium: "Telefono", locale: :it)
~~~~~~~~


aggiungiamo un secondo contatto giocando un po' con la console...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ $ rails c
irb> Contact.all
irb> c1 = Contact.first
irb> c1.medium
irb> I18n.locale
irb> I18n.locale = :en
irb> c1.medium
irb> Contact.new(medium:"email", identifier:"pippo@franco.com").save
irb> c2 = Contact.find 2
irb> c2.medium
irb> I18n.locale = :it
irb> c2.medium
irb> c2.medium = "email personale"
irb> c2.medium
irb> c2.save

irb> exit
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed contacts"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.



## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cs:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cs
$ git branch -d cs
~~~~~~~~