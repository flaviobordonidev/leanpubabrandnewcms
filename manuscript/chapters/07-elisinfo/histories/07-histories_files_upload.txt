# Usiamo paperclip per importare file immagini (png o gif)

lo abbiamo già installato nei capitoli preceedenti. Quindi in questo capitolo saltiamo la parte dell'installazione.




## Apriamo il branch "Histories Files Upload "

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b hfu
~~~~~~~~




## Aggiungiamo il campo **attachment** alla tabella histories

Usiamo lo script di generazione di Paperclip per creare il migration.

A> Il nome della tabella va al SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate paperclip history attachment
~~~~~~~~

questo crea il migrate:

{title="db/migrate/xxx_add_attachment_attachment_to_histories.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAttachmentAttachmentToHistories < ActiveRecord::Migration
  def self.up
    change_table :histories do |t|
      t.attachment :attachment
    end
  end

  def self.down
    remove_attachment :histories, :attachment
  end
end
~~~~~~~~

è un migration che non è in stile rails 5 ma va benissimo ugualmente, quindi lo lasciamo così.

Come abbiamo già visto, Paperclip ha un suo proprio metodo **.attachment** che aggiunge alla tabella le seguenti colonne: 

* {attachment}_file_name
* {attachment}_file_size
* {attachment}_content_type
* {attachment}_updated_at

Aggiungiamo i campi/ le colonne al database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~




## Aggiungiamo paperclip attachment al model

Aggiungiamo l'informazione al modello di History che il campo "attachment" è per file uploaded ** has_attached_file :attachment **. Questa parte di codice la inserisco nella sezione **# == Extensions ====** nella sottosezione **# ==== paperclip required**

{title=".../app/models/history.rb", lang=ruby, line-numbers=on, starting-line-number=10}
~~~~~~~~
  # == Extensions ===========================================================

  # ==== paperclip required
  has_attached_file :attachment, styles: { thumb: ["128x128!", :png] }
~~~~~~~~

abbiamo dato anche uno stile all'immagine dicendogli di caricarla come png e di scalare l'immagine a 64x64px facendo uno stretch e quindi senza mantenere le proporzioni.




## Aggiungiamo validazione paperclip image al model

Aggiungo la validazione altrimenti ho un errore. questo è stato implementato per aumentare la sicurezza.

{title=".../app/models/history.rb", lang=ruby, line-numbers=on, starting-line-number=17}
~~~~~~~~
  # == Validations ==========================================================

  # ==== paperclip required
  validates_attachment :attachment,
                        content_type: { content_type: ["image/jpeg", "image/gif", "image/png", "application/pdf"] }
~~~~~~~~

come scelgo i mime types?
Ecco di seguito alcuni links ed una lista dei mime types:

* https://www.sitepoint.com/web-foundations/mime-types-complete-list/
* http://stackoverflow.com/questions/6554951/validate-extension-in-paperclip-ruby-on-rails
* http://stackoverflow.com/questions/8818251/how-to-validate-file-content-type-to-pdf-word-excel-and-plain-text-for-paperc
    "application/pdf",
    "application/vnd.ms-excel",     
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "application/msword", 
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document", 
    "text/plain"
* http://stackoverflow.com/questions/26347844/rails-paperclip-file-type-validation-add-pdf




## Aggiungiamo paperclip attachment al controller

Anche nel controller di histories aggiungiamo il campo "attachment" nella white-list del massive assign (strong-parameters). [02:](#code-histories-upload_images-02)

{title=".../app/controllers/histories_controller.rb", lang=ruby, line-numbers=on, starting-line-number=76}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def history_params
      params.require(:history).permit(:attachment, :historyable_id, :historyable_type, :title, :manual_date, :memo, :user_id)
    end
~~~~~~~~

I> Da notare che dobbiamo permettere solo "attachment" e non attachment_file_name o gli altri campi derivati (attachment_file_size, attachment_content_type, attachment_updated_at). Questi sono usati internamente da Paperclip.




## Aggiungiamo paperclip attachment alle views edit e new

{title=".../app/views/histories/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=55}
~~~~~~~~
    <div class="field">
      <%= f.label :attachment, class: "control-label" %><br>
      <%= f.file_field :attachment, class: "form-control image_upload_file_field" %>
    </div>
~~~~~~~~

Aggiungere il campo **attachment** al form è semplice, basta usare ** f.file_field :attachment ** per rendere il campo appropriato.

Se proviamo a fare l'upload adesso funziona e non riceveremo un messaggio di errore "exception will be raised" perché abbiamo già messo la validazione nel nostro modello.




## Aggiungiamo su views/show

Avendo implementato la validazione possiamo caricare il nostro primo file. Prima però implementiamo la sua visualizzazione sulla pagina show **<%= image_tag @person.attachment.url %>**.

{title="views/histories/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
    <% if history.attachment.present? %>
      <%= image_tag history.attachment.url(:thumb), class: "media-object" %><br>
    <% end %>
~~~~~~~~


verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

![components show](images/components/upload_images/components_show.png)

Come si vede in alto c'è l'immagine che è stata uploadata.

![uploaded image](images/components/upload_images/image_test.png)

l'immagine è sull'url ** https://elisinfo5-flaviobordonidev.c9users.io/system/components/images/000/000/003/original/flatest.png?1481018199 ** che a livello locale risulta su ** .../public/system/components/images/000/000/003/original/flatest.png **





## Mettiamo link per aprire il file su nuova finestra del browser

Rendiamo l'immagine cliccabile e sul click apriamo una nuova finestra del browser su cui carichiamo il pdf. Cliccando con il tasto destro e scegliendo "salva link come..." possiamo scaricarci il file; oppure una volta aperto su nuova finestra del browser clicchiamo pulsante di download.

{title="views/histories/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
    <% if history.attachment.present? %>
      <button onclick="myFunction<%= counter %>()">
        <%= image_tag history.attachment.url(:thumb), class: "media-object" %><br>
      </button>
      
      <script>
      function <%= "myFunction#{counter}()" %> {
          var myWindow = window.open("<%= history.attachment.url %>", "_blank", "toolbar=no,scrollbars=yes,resizable=yes,top=50,left=50,width=600,height=800");
      }
      </script>
    <% end %>
~~~~~~~~


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add histories upload attachment with paperclip"
~~~~~~~~




# Implementiamo Amazon S3

E' già stato implementato tutto nei capitoli precedenti e quindi già effettua upload delle immagini su aws.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku hfu:master
$ heroku run rake db:migrate
~~~~~~~~




## Debug?

Vedi capitoli passati in cui ho già affrontato questo problema. In locale mi funzionava tutto ma in remoto non funzionava. Ho fatto delle verifiche su AWS loggandomi sul sito web (console.aws.amazon.com) ed ho verificato su S3 che le immagini erano state caricate correttamente. Sono poi andato su **$ heroku run rails c ** ed ho verificato che sul database non erano riportate le informazioni riguardo le immagini. Dopo un po' di tempo e varie piccole modifiche tutto ha cominciato a funzionare. La sensazione è che ci sono voluti quei 10-15minuti di attesa affinché la situazione Heroku ed aws con paperclip si assestasse. Perché i cambi effettuati non mi sono sembrati significativi.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge hfu
$ git branch -d hfu
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
