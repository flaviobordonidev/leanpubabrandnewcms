# Elenco delle storie di una specifica persona

in questo capitolo tratteremo l'elenco delle storie (sul partial histories/_index) che è visualizzato come related della pagina people/show.




## Apriamo il branch "Histories Index Side Person"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b hisp
~~~~~~~~




## Select_relateds histoy side people show

Non abbiamo la voce "histoy" nella tabella select_realateds quindi l'aggiungiamo manualmente.
Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c

> SelectRelated.new(name: "histories", metadata: "histories", bln_homepage: FALSE, bln_people: TRUE, bln_companies: TRUE, locale: :en).save
> SelectRelated.last.update(name: "storie", locale: :it)

> SelectRelated.all
> exit
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed histories to select_realateds"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Select_relateds histoy icon

Aggiungiamo l'icona icon_history allo style sheet

Mettiamo l'immagine **hystory.png** nella cartella .../app/assets/images/my_style_images/icons/

Ed aggiorniamo i css

{title=".../app/assets/stylesheets/application_front.scss", lang=ruby, line-numbers=on, starting-line-number=114}
~~~~~~~~
  .ico_history
  {
    background-image: url(image_path("my_style_images/icons/history.png"));
  }
~~~~~~~~


{title=".../app/assets/stylesheets/application_rear.scss", lang=ruby, line-numbers=on, starting-line-number=127}
~~~~~~~~
  .ico_history
  {
    background-image: url(image_path("my_style_images/icons/history.png"));
  }
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed histories icon to select_realateds"
~~~~~~~~




## Routes

Nel capitolo precedente abbiamo usato lo scaffold quindi abbiamo già i vari instradamenti nel file routes. Semplicemente li sistemiamo meglio. [(codice: 01)](#code-contact_person_maps-cpmaps_index_side_person-01)

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
    resources :histories
~~~~~~~~




## Come approcciamo

Prepariamo un elenco di storie per quando siamo su people/show con related="histories". Sul controller di people azione show visualizziamo @person.histories.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> p = Person.find 1
irb> u = User.first
irb> p.histories.new(title: "Mr. Pip ha notizie di una ripresa del progetto X che mi conferma Jhon Doe", when: Date.today, user_id: u.id).save
irb> p.histories
irb> p.histories[0].title
irb> p.histories[0].when
irb> p.histories[1].title
irb> p.histories[1].when
~~~~~~~~




## La pagina show di People con relateds: histories

Aggiungiamo **histories** nell'azione **show** del controller **people_controller**. [(codice: 02)](#code-contact_person_maps-cpmaps_index_side_person-02)

{title=".../app/controllers/people_controller.rb", lang=ruby, line-numbers=on, starting-line-number=12}
~~~~~~~~
    when "histories"
      @relateds = @person.histories.order('updated_at DESC').page(params[:page])
      @relateds_path = "histories"
~~~~~~~~

Sul view people/show abbiamo già implementato il ** <%= render "#{params[:related]}/index", related_list: @relateds %> ** 




## Il partial _index

Il partial _index visualizza la lista delle storie.
 
{title=".../app/views/histories/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="list-group left-pad right-pad">
  <% related_list.each do |history| %>
    <%= link_to url_for(h_front_params_path(path: "/histories/#{history.id}/edit")), :class => "list-group-item" do %>
      <p><strong> <%= history.title %> </strong></p>
      <p> <%= "#{history.manual_date} - #{history.memo}" %> </p>
    <% end %> <!-- /link_to -->
  <% end %> <!-- /related_list.each -->
</div> <!-- /.list-group -->
~~~~~~~~


verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

![People show - related histories](images/histories/histories_index_side_person/related_histories.png)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add People Show - related histories _index"
~~~~~~~~




## Pagination

Già abbiamo implementato nel controller il metodo di Kaminari ".page(params[:page])"

e già abbiamo attivato il render sul views/people/show.html.erb. (il partial è su views/application)




## Search

Implementiamo il search sul model history.

{title=".../app/models/history.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
  # == Scopes ===============================================================

  scope :search, -> (query) {with_translations(I18n.locale).where("medium ILIKE ? OR identifier ILIKE ?", "%#{query.strip}%", "%#{query.strip}%")}
~~~~~~~~

Attiviamo il search sull'azione **show** del controller **people_controller**

{title=".../app/controllers/people_controller.rb", lang=ruby, line-numbers=on, starting-line-number=34}
~~~~~~~~
      @relateds = @person.histories.search(params[:search]).order('updated_at DESC').page(params[:page])
~~~~~~~~

abbiamo già attivato il render su views/people/show.html.erb. (il partial è su views/application)

verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

![https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps](images/company_person_maps/cpmaps_index/cpmaps.png)


sta funzionando quindi facciamo un commit

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add people/show histories search"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku hisp:master
$ heroku run rake db:migrate <-- per l'aggiunta di un record nella tabella select_realateds questo NON serve. Si usa solo se cambio la struttura del db (migrates).
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi non risulta la nuova voce sulla tabella select_realateds.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente per popolare la tabella con il nuovo record/seed "histories"




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge hisp
$ git branch -d hisp
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
