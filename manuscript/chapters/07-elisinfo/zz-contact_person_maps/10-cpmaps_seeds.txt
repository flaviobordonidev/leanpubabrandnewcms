# Creiamo la tabella che associa le persone ai contatti e viceversa

in questo capitolo lavoreremo principalmente lato database. 
Creeremo la tabella "ponte" tra contatti e persone ** contact_person_maps **, prepareremo i semi (seeds) ed inseriremo in tabella alcuni dati di prova.
La tabella ** contact_person_maps ** ci permette di:

* Sapere per un contatto x l'elenco delle persone che può raggiungere. (es: il centralino di un'azienda può raggiungere tutte le persone che ci lavorano.)
* Sapere per una persona x l'elenco dei contatti con cui possiamo entrare in contatto. (es: telefono, cellulare, emails, skype, cerca persone, whatsup, facebook, linkedin, ...) 

Non avremo nessuna interazione lato views e quindi non apriremo il browser per usare la web gui su http://localhost:3000
Eseguendo gli scaffolds la web gui è creata in automatico ma in questo capitolo non la utilizzeremo. Utilizzeremo invece la console di rails ** $ rails c **.




## Apriamo il branch "contact_person_maps seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cpms
~~~~~~~~



## Una persona molti contatti e viceversa

Implementiamo la relazione molti-a-molti tra la tabella ** contacts ** e ** people ** facendo due relazioni uno-a-molti con contact_person_maps.

* Una person ha molte contact_person_maps. Aggiungiamo la chiave esterna che va nel lato "molti" quindi nella tabella contact_person_maps.
* Un contact ha molte contact_person_maps. Aggiungiamo la chiave esterna che va nel lato "molti" quindi nella tabella contact_person_maps.

Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold ContactPersonMap contact:references person:references summary:string
~~~~~~~~

questo crea il migrate:

{title=".../db/migrate/xxx_create_contact_person_maps.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateContactPersonMaps < ActiveRecord::Migration[5.0]
  def change
    create_table :contact_person_maps do |t|
      t.references :contact, foreign_key: true
      t.references :person, foreign_key: true
      t.string :summary

      t.timestamps
    end
  end
end
~~~~~~~~

Da Rails 5 il **.references ..., foreign_key: true** aggiunge già le chiavi esterne e l'indice (come si può vedere su .../db/schema.rb dopo il migrate del database).


Effettuiamo il migrate del database per creare la tabella "contact_person_maps" sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold ContactPersonMap"
~~~~~~~~




## Models uno-a-molti + uno-a-molti = molti-a-molti 

adesso finalizziamo la relazione molti-a-molti con le due realazioni uno-a-molti lato models.

{title=".../app/models/contact_person_map.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ContactPersonMap < ApplicationRecord
  
  # many-to-many ---------------------------------------------------------------
  belongs_to :contact
  belongs_to :person
  #-----------------------------------------------------------------------------
end
~~~~~~~~

inseriamo sul model di contact [(codice: 01)](#code-contact_person_maps-cpmaps_seeds-01)

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=29}
~~~~~~~~
  has_many :contact_person_maps
  has_many :people, :through => :contact_person_maps
  accepts_nested_attributes_for :people
  #-----------------------------------------------------------------------------
~~~~~~~~

inseriamo sul model di person [(codice: 02)](#code-contact_person_maps-cpmaps_seeds-02)

{title=".../app/models/person.rb", lang=ruby, line-numbers=on, starting-line-number=29}
~~~~~~~~
  has_many :contact_person_maps
  has_many :contacts, :through => :contact_person_maps
  accepts_nested_attributes_for :contacts
  #-----------------------------------------------------------------------------
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "update models ContactPersonMap Contact Person"
~~~~~~~~




## I18n - dynamic

Attiviamo l'internazionalizzazione sul database (I18n dynamic) usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title="models/contact_person_map.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ContactPersonMap < ApplicationRecord
  
  # many-to-many ---------------------------------------------------------------
  belongs_to :contact
  belongs_to :person
  #-----------------------------------------------------------------------------

  # globalize required ---------------------------------------------------------
  translates :summary, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------
end
~~~~~~~~


I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_contact_person_map_translations
~~~~~~~~


Lavoriamo sulla migration usando il metodo .create_translation_table sul model "ContactPersonMap" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_contact_person_map_translations.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateContactPersonMapTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|

      dir.up do
        ContactPersonMap.create_translation_table!({
          summary: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        ContactPersonMap.drop_translation_table! migrate_data: true
      end
      
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "contact_person_maps" i campi con traduzione, ossia "summary".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add ContactPersonMap I18n"
~~~~~~~~




## seed

Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo paragrafo. [(codice: 03)](#code-contact_person_maps-cpmaps_seeds-03)

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=34}
~~~~~~~~
puts "setting the ContactPersonMap data with I18n :en :it"
ContactPersonMap.new(contact_id: 1, person_id: 1, summary: "cellulare di lavoro", locale: :en).save
ContactPersonMap.last.update(summary: "work mobile", locale: :it)
~~~~~~~~

I> Non usiamo nè "$ rake db:seed" nè "$ rake db:setup" perché popoliamo la tabella manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed contact_person_maps"
~~~~~~~~




## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> ContactPersonMap.new(contact_id: 1, person_id: 1, summary: "work mobile", locale: :en).save
irb> ContactPersonMap.last.update(summary: "cellulare di lavoro", locale: :it)
~~~~~~~~


aggiungiamo un secondo contatto alla prima persona giocando un po' con la console...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> ContactPersonMap.all
irb> Person.find 1
irb> Person.find 2
irb> Contact.find 1
irb> Contact.find 2
irb> Contact.find 3
irb> I18n.locale
irb> ContactPersonMap.new(contact_id: 2, person_id:1, summary: "quando è in ferie").save
irb> cpm = ContactPersonMap.last
irb> cpm.update(summary: "when on holidays", locale: :en)
irb> cpm.summary
irb> I18n.locale
irb> I18n.locale = :en
irb> cpm.summary
irb> p = Person.find(1)
irb> p.contact_person_maps
irb> p.contact_person_maps.new(contact_id: 3, summary: "for emergencies").save
irb> p.contact_person_maps
irb> p.contact_person_maps[0]
irb> p.contact_person_maps[0].summary
irb> p.contact_person_maps[1]
irb> p.contact_person_maps[1].summary
irb> p.contact_person_maps[1].update(summary: "when on holidays", locale: :en)
irb> p.contact_person_maps[1].summary
irb> p.contact_person_maps[0].person
irb> p.contact_person_maps[0].person.first_name
irb> p.contact_person_maps[1].person
irb> p.contact_person_maps[1].person.first_name
irb> cn = Contact.find(1)
irb> cn.contact_person_maps
irb> cn.contact_person_maps.new(people_id: 2, summary: "cellulare").save
irb> exit
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add data manually contact_person_maps"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cpms:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
irb> ContactPersonMap.new(contact_id: 1, person_id: 1, summary: "work mobile", locale: :en).save
irb> ContactPersonMap.last.update(summary: "cellulare di lavoro", locale: :it)
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cpms
$ git branch -d cpms
~~~~~~~~




## Backup su github

facciamo un backup del ns progetto su github:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
