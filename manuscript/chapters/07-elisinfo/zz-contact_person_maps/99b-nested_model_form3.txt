# Gestire su un form più models. - Parte 3

introduciamo javascript per rendere più usabile l'editing del questionario. Permettiamo l'eliminazione delle domande e delle risposte tramite un link senza dover dare il submit del form. Inoltre aggiungiamo un link per inserire delle nuove domande e risposte.




## Iniziamo con il link

Iniziamo a trasformare il check_box in un link_to. Abbiamo messo dentro <fieldset> invece di <p> perché è più comodo chiamarlo con javascript. Ci serve comunque un campo nascosto per passare **_destroy** come params.

{title=".../app/views/surveys/_answer_fields.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=20}
~~~~~~~~
<fieldset>
  <%= f.label :content, "Answer" %>
  <%= f.text_field :content %>
  <%= f.hidden_field :_destroy %>
  <%= link_to "Remove", "#", class: "remove_fields" %>
</fieldset>
~~~~~~~~

Adesso scriviamo il codice javascript

{title=".../app/assets/javascripts/survey.js.coffe", lang=CoffeeScript, line-numbers=on, starting-line-number=5}
~~~~~~~~
$(document).on "turbolinks:load", ->
  $('form').on 'click', '.remove_fields', (event) ->
    $(this).prev('input[type=hidden]').val('1')
    $(this).closest('fieldset').hide()
    event.preventDefault()
~~~~~~~~

Funziona!!!
Analizziamo il codice. 




### La prima riga 
è necessaria per caricare il DOM di jQuery quando è attivo **turbolinks**

sulla [guida di rails al capitolo 5.2](http://guides.rubyonrails.org/working_with_javascript_in_rails.html) è riportato che con turbolinks dobbiamo chiamare in modo diverso il codice jquery.

5.2 Page Change Events
When writing CoffeeScript, you'll often want to do some sort of processing upon page load. With jQuery, you'd write something like this:

~~~~~~~~
$(document).ready ->
  alert "page has loaded!"
~~~~~~~~

or

~~~~~~~~
jQuery ->
  alert "page has loaded!"
~~~~~~~~

However, because Turbolinks overrides the normal page loading process, the event that this relies on will not be fired. If you have code that looks like this, you must change your code to do this instead:

~~~~~~~~
$(document).on "turbolinks:load", ->
  alert "page has loaded!"
~~~~~~~~

For more details, including other events you can bind to, check out the [Turbolinks README.](https://github.com/turbolinks/turbolinks/blob/master/README.md)




### La seconda riga

si mette in ascolto dentro il <form> per un evento 'click' fatto su un tag con class='remove_fields'. Viene usata questa sintassi invece di chiamare direttamente il click sul link '.remove_fields' perché quando aggiungeremo le risposte più avanti nel capitolo dovremo rifarci al link in maniera dinamica.




### La terza riga

Nella terza riga abbiamo il codice da eseguire a seguito del click. Quindi prendiamo il link che è stato cliccato ed andiamo al precedente campo di input nascosto e ne impostiamo il valore ad 1 che equivale a 'true'. Quindi è come quando mettevamo il segno di spunta al check_box prima di creare il link.



### La quarta riga

Nella quarta riga continuiamo con il codice a seguito del click. Una volta impostato il campo nascosto ad 1, andiamo a nascondere tutto il fieldset che racchiude campo nascosto, campo di input della risposta e link di remove.
Non abbiamo ancora eliminato la risposta, quello avviene solo se si da update nel submit del form, ma visivamente la risposta sparisce.



### La quinta ed ultima riga

L'ultima riga di codice previene il comportamento di default sulla pressione del link che sarebbe quello di ricaricare la pagina essendo il ref="#"




## Link per aggiungere una nuova risposta


{title=".../app/views/surveys/_question_fields.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=20}
~~~~~~~~
<fieldset>
  <%= f.label :content, "Question" %><br/>
  <%= f.text_area :content, :rows => 3 %><br/>
  <%= f.check_box :_destroy %>
  <%= f.label :_destroy, "Remove Question" %>
  <%= f.fields_for :answers do |builder| %>
    <%= render "answer_fields", f: builder %>
  <% end %>
  <%= link_to_add_fields "Add Answer", f, :answers %>
</fieldset>
~~~~~~~~

Siccome il link per aggiungere una nuova risposta ha molta logica che deve essere scritta, invece del **link_to** usiamo l'helper che chiamiamo **link_to_add_fields**. A quest'helper passiamo tre parametri. Il primo parametro è il testo da visualizzare sul link. Il secondo parametro è la variabile "f" che è la form builder della "Question". Il terzo parametro è il nome dell'associazione che vogliamo aggiungere; nel nostro caso ":answers"

Creiamo l'helper sull'application_helper che è richiamabile da tutta l'applicazione.

{title=".../app/helpers/application_helper.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
module ApplicationHelper
  
  def link_to_add_fields(name, f, association)
    new_object = f.object.send(association).klass.new
    id = new_object.object_id
    fields = f.fields_for(association, new_object, child_index: id) do |builder|
      render(association.to_s.singularize + "_fields", f: builder)
    end
    link_to(name, "#", class: "add_fields", data: {id: id, fields: fields.gsub("\n", "")})
  end
end
~~~~~~~~

Analizziamo il codice.
https://forum.upcase.com/t/dynamically-creating-fields-in-a-nested-form/968/2
 It's creating an HTML link that has as a data attribute HTML that represents the fields needed for the nested model. When the link is clicked, JavaScript grabs that html from the data attribute and puts it into the form (incrementing the id, I believe, so that it's always unique as you keep clicking 'add').
 
http://mendelk.github.io/blog/2013/07/18/patterns-for-saving-associated-model-data-in-rails/
In a nutshell, this creates a link that embeds the Song form in its data attribute the way it exists in a _?_fields.html.erb partial, where ? is what you passed in as the third param, i.e. songs. We created this partial already, but this method will work for any nested resource, so long that you name the partial correctly.

(un altro esempio: http://stackoverflow.com/questions/32179661/how-to-pass-variables-down-to-partial)


### Riga 1
name -> testo da visualizzare sul link
f -> la form builder 
association -> nome dell'associazione che vogliamo aggiungere


### Riga 2
    new_object = f.object.send(association).klass.new

f.object is the object that the form is for. In your case, @job_sheet.

f.object.send(association) is then equivalent to @job_sheet.products, which this code then calls klass.new on, which says "get me the class of that association and call the initializer".

So all of the above lines just gave you a new object for the association and assigns it to new_object. 


### Riga 3
    id = new_object.object_id

id -> variabile a cui diamo un identificativo unico (new_object.object_id simply it's a convenient unique identifier). Potevamo prendere il timestamp now().

Then the code goes about the call to fields_for. It sets the child_index to new_object.object_id simply because it's a convenient unique identifier. 



### Righe 4,5,6
    fields = f.fields_for(association, new_object, child_index: id) do |builder|
      render(association.to_s.singularize + "_fields", f: builder)
    end

Within the fields_for block there's the call to render a partial which will follow the convention of the association singularized appended with _fields. So in your case, it'd be _product_fields.html.erb.



### Riga 7
    link_to(name, "#", class: "add_fields", data: {id: id, fields: fields.gsub("\n", "")})

The code ends with the call to link_to to tie all of this together.


You can play with the non-form related things in a console without a problem. To use the form stuff (form_for, fields_for, etc), you'll need to include ActionView::Helpers in your console session.




## il javascript

una volta preparato il codice lato view andiamo a scrivere il jquery lato assets. Di seguito a quanto scritto in precedenza aggiungiamo il seguente codice:

{title=".../app/assets/javascripts/survey.js.coffe", lang=CoffeeScript, line-numbers=on, starting-line-number=5}
~~~~~~~~
$(document).on "turbolinks:load", ->
~~~~~~~~

...

{title=".../app/assets/javascripts/survey.js.coffe", lang=CoffeeScript, line-numbers=on, starting-line-number=11}
~~~~~~~~
  $('form').on 'click', '.add_fields', (event) ->
    time = new Date().getTime()
    regexp = new RegExp($(this).data('id'), 'g')
    $(this).before($(this).data('fields').replace(regexp, time))
    event.preventDefault()
~~~~~~~~

nella prima riga rispondiamo all'evento click sul link con **class=add_fields**.
nella seconda riga prendiamo data e ora attuali in modo da avere un valore univoco da passare ai vari campi.
nella terza riga prepariamo un'espressione regex per identificare il campo che ha nel parametro **data** l'id creato nell'helper.
nella quarta riga inseriamo il nuovo campo prima del link e rimpiazziamo il suo id da regexp con time per rendere unici i successivi campi creati sempre con lo stesso oggetto. Ossia se clicco di creare un nuovo campo più di una volta avrò sempre dei campi con id univoco.
nella quinta preveniamo il comportamento di default del link.

Siccome sul click viene fatto il rendere del partial xxx_fields con tutto il <fieldset>...</fieldset> con i vari campi all'interno (label, hidden_input, text_field, delete_link) con il codice javascript appendo tutto il partial prima del link "add Answer" che ho cliccato. in pratica basterebbe questo codice javascript:

{title=".../app/assets/javascripts/survey.js.coffe", lang=CoffeeScript, line-numbers=on, starting-line-number=11}
~~~~~~~~
  $('form').on 'click', '.add_fields', (event) ->
    $(this).before($(this).data('fields'))
    event.preventDefault()
~~~~~~~~

Attenzione! Questo va bene se aggiungo una sola risposta. Perché quando aggiungo la seconda risposta non ho più campi univoci perché hanno lo stesso **new_object.object_id**
I campi vengono creati senza problemi ma quando clicco il sumbit del form mi viene salvato nel database solo l'ultimo campo answer creato. Per ovviare a questo mi creo un numero univoco prendendo data ed ora e lo salvo nella variabile "time" poi carico un'espressione regex nella variabile "regexp". Questa espressione regex la uso per ritrovare il valore di **new_object.object_id** dentro i parametri dei campi creati dentro il <fieldset>...</fieldset>. Una volta trovato l'identificativo fatto con l'id dell'oggetto lo sostituisco con il valore univoco della variabile time --> ** .replace(regexp, time) **. In questo modo quando aggiungo la seconda risposta continuo ad avere dei campi univoci e quando faccio il submit del form mi vengono salvate tutte le risposte.


Fine.
