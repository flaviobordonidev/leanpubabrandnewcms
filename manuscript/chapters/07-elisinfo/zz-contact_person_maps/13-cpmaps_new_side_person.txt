# Pagina di creazione nuova associazione contatti-persone lato Persona 

contact_people_maps/new lato person -- Dalla pagina di una persona (people/show) creiamo una nuova associazione di un contatto.

La pagina di creazione nuova associazione ha il solo tab:

- edit : per modificare la relazione del contatto per la persona x.




## Apriamo il branch "contact_people_maps/new side person"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cpmnsp
~~~~~~~~




## Sulla pagina dellla persona attiviamo il pulsante per associare un nuovo contatto.

people/show -> new_button for related contacts.

Abbiamo già scritto il codice per questa azione ed abbiamo anche aggiunto il codice per saltare direttamente sulla pagina di terzo livello. Aggiungiamo alla condizione if..else..end anche la gestione dei contatti per la persona. Solo che per il momento non gli implementiamo il salto.

{title="views/people/_related_button_new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% if params[:search].present? or (list_to_add.size == 0)%>

  <div class="btn-group pull-right right-pad"> <!-- btn-group -->

    <%# jump to list %>
    <% if params[:related] == "people" %>
      <%= link_to url_for(h_front_params_path(path: "/contact_person_maps/new")), :class => "btn btn-default" do %>
        <span class="glyphiconmy ico_new"></span>
      <% end %>
    <% elsif params[:related] == "contacts" %>
        <%= raise "#TODO" %>
    <% else %>
      <% raise "#ERROR unexpected" %>
    <% end %>
  </div> <!-- /btn-group -->

<% else %>

  <div class="btn-group pull-right right-pad">  <!-- btn-group -->
    <a href="#" class="btn btn-primary disabled">
      <span class="glyphiconmy ico_new"></span>
    </a>
  </div> <!-- /btn-group -->

<% end %>
~~~~~~~~




## Attiviamo views NEW

Il pulsante new apre la pagina contact_person_maps/new 

{title="views/company_contact_maps/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container-fluid rear_mode">

  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active].nil? or params[:tab_active] == 'edit' %>">
          <%= link_to "#pane_edit", "data-toggle" => "tab" do %>
            <%= content_tag :span,"", class: "glyphiconmy ico_edit" %>
          <% end %>
        </li>
      </ul>
    </div><!-- /.col -->
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%= render 'button_close' %>
    </div> <!-- /.col -->
  </div> <!-- /.row -->

  <div class="row">
    <div class="col-xs-12">

      <div class="tab-content">
        <div id="pane_edit" class="tab-pane active">
          <div class="text-center bottom-pad">
            <h4>Nuova</h4>
          </div><!-- /.text-center -->
          <%= render 'form', contact_person_map: @contact_person_map %>
        </div><!-- /.pane_edit -->

      </div><!-- /.tab-content -->
    </div><!-- /.col -->
  </div><!-- /.row -->
</div><!-- /.rear_mode -->
~~~~~~~~

Abbiamo la pagina vuota.




## Associamo un contatto 

Dal partial _form cliccando il pulsante contatto si apre la pagina contacts/index con l'elenco di tutti i contatti tra cui sceglierne uno. Selezionato il contatto torniamo alla company_contact_maps/new con il nuovo contact_id impostato. [(codice: 01)](#code-contact_person_maps-cpmaps_new_side_person-01)

{title="views/contacts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=39}
~~~~~~~~
              <% if params[:last_rear_action] == "new" %>
                <div class="list-group left-pad right-pad">
                  <% @contacts.each do |contact| %>
                    <%= link_to url_for(h_params_path(path: "/#{params[:last_rear_controller]}/new", change_id: contact.id)), :class => "list-group-item" do %>
                      <p> <%= contact.medium %> </p>
                      <p><strong> <%= "#{contact.identifier}"%> </strong></p>
                    <% end %>
                  <% end %>
                </div>
~~~~~~~~

Non ci resta che implementare il controller per acquisire l'id.




## Acquisiamo l'id del contatto

Sull'azione **new** del controller **contact_person_maps** acquisiamo l'id che ci viene passato dalla selezione fatta sulla pagina di terzo livello (contacts/index).

{title=".../app/controllers/contact_person_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=15}
~~~~~~~~
  # GET /contact_person_maps/new
  def new
    @contact_person_map = ContactPersonMap.new
    # il new mi apre la maschera di contacts/index o people/index per scegliere l'id mancante
    if params[:last_front_controller] == "people"
      @contact_person_map.person_id = params[:last_front_id]
      @contact_person_map.contact_id = params[:change_id] if params[:change_id].present?
    elsif params[:last_front_controller] == "contacts"
      @contact_person_map.contact_id = params[:last_front_id]
      @contact_person_map.person_id = params[:change_id] if params[:change_id].present?
    else
      raise "error"
    end
  end
~~~~~~~~

sull'helper h_xxx_params_path abbiamo già aggiungiamo :change_id.


Ed infine sull'azione **create** reinstradiamo su contacts/show (invece del comportamento di default company_contact_maps/show).

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=49}
~~~~~~~~
        format.html { redirect_to url_for(view_context.h_params_path(path: "/#{params[:last_front_controller]}/#{params[:last_front_id]}", related: params[:last_front_related], page: params[:last_front_page], search: params[:last_front_search])), notice: 'Contact Person Map was successfully created.' }
~~~~~~~~

Vedi tutto nel [(codice: 02)](#code-contact_person_maps-cpmaps_new_side_person-02)








## Implementiamo la ricerca sull'elenco dei contatti da associare

La abbiamo già attiva nei capitoli precedenti.

Implementiamo la ricerca su contacts/index: Basta fare un render del partial application/_related_search.html.erb, 

{title=".../app/views/contacts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=29}
~~~~~~~~
              <%= render 'related_search' %>
~~~~~~~~

implementare il search nel model contact.rb

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=13}
~~~~~~~~
  # scope filters --------------------------------------------------------------
  scope :search, -> (query) {with_translations(I18n.locale).where("medium ILIKE ? OR identifier ILIKE ?", "%#{query.strip}%", "%#{query.strip}%")}
  #-----------------------------------------------------------------------------
~~~~~~~~

 ed implementare il search nel controller contacts_controller.rb

{title=".../app/controllers/contacts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  # GET /contacts
  # GET /contacts.json
  def index
    @contacts = Contact.search(params[:search]).order('created_at DESC')
  end
~~~~~~~~




## Implementiamo la paginazione sull'elenco dei contatti da associare

Già attivata nei capitoli precedenti.

Implementiamo la ricerca su contacts/index: Basta fare un render del partial application/_related_pagination.html.erb, 

{title=".../app/views/contacts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=29}
~~~~~~~~
                <%= render 'related_pagination', list_to_paginate: @contacts %>
~~~~~~~~

 ed implementare il pagination nel controller contacts_controller.rb

{title=".../app/controllers/contacts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  # GET /contacts
  # GET /contacts.json
  def index
    @contacts = Contact.search(params[:search]).order('created_at DESC').page(params[:page]).per_page(2)
  end
~~~~~~~~




## Validiamo il model

Siccome è fondamentale che ci siano entrambi contact_id e person_id mettiamo una validazione sul model contact_person_map.rb [(codice: 03)](#code-contact_person_maps-cpmaps_new_side_person-03)

{title=".../app/models/contact_person_map.rb", lang=ruby, line-numbers=on, starting-line-number=12}
~~~~~~~~
  # validations ----------------------------------------------------------------
  validates :contact_id,         :presence   => true
  validates :person_id,          :presence   => true
  #-----------------------------------------------------------------------------
~~~~~~~~




## Salviamo i dati

Adesso che è tutto predisposto implementiamo sul controller company_person_maps_controller.rb il redirect della pagina.

Mi sembra di averlo già fatto... Devo rivedere questa parte del libro

{title="controllers/company_person_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=38}
~~~~~~~~
  # POST /contacts
  # POST /contacts.json
  def create
    @contact = Contact.new(contact_params)

    respond_to do |format|
      if @contact.save
        #format.html { redirect_to @contact, notice: 'Contact was successfully created.' }
        format.html { redirect_to url_for(view_context.h_params_path(path: "/contacts/#{@contact.id}", last_front_controller: "contacts", last_front_action: "show", last_front_id: "#{@contact.id}", related: "favorites")), notice: 'Contatto was successfully created.' }
        format.json { render :show, status: :created, location: @contact }
      else
        format.html { render :new }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end
~~~~~~~~

Workaround bug: sul controller ho dovuto mettere un redirect_to invece del renderd di default perché non mi ripopolava la variabile @relateds e me la lasciava nil. Invece con il redirect_to viene popolata correttamente      


Aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add contact_person_maps/new side person"
~~~~~~~~




## Manca la parte delle traduzioni statiche...





## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cpmnsp:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cpmnsp
$ git branch -d cpmnsp
~~~~~~~~




## Backup su github

facciamo un backup del ns progetto su github:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
