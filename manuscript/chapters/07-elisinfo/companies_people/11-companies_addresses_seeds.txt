# Aggiungiamo campi per indirizzo e contatti della **sede aziendale**

Durante lo sviluppo di questa applicazione abbiamo spostato varie volte i contatti e gli indirizzi per cercare il giusto equilibrio tra bestpractise di codice, normalizzazione del database, usabilità utente.
Avere indirizzi e contatti come entità separate era molto bello ed elegante ma l'usabilità era compromessa. Diventava troppo arzigogolato riassociare i contatti e gli indirizzi alle aziende ed alle persone. Siamo poi passati a gestirli come una relazione uno-a-molti.
[...]
Facendo delle prove di usabilità ci siamo resi conto che la relazione molti-a-molti è eccessiva per l'inserimento di nuovi indirizzi. Si creano troppi passaggi; troppi clicks. Quindi optiamo per una relazione uno-a-molti (che sarà anche la base per fare le posizioni delle offerte nello sviluppo dell'applicazione).

(In una futura versione più evoluta metterò un elenco che si presenta mano a mano che digiti come fa google nel suo motore di ricerca ed implementeremo del codice più complesso che permetterà di gestire il molti-a-molti in modo semplice e trasparenete per l'utente.)

Usare la relazione uno-a-molti o molti-a-molti è indipendente dall'uso del polimorfismo. Posso continuare ad usare una sola tabella polimorfica con relazione di tipo uno-a-molti.
[...]

Ma anche la relazione uno a molti ha i suoi problemi di usabilità nella scelta della visualizzazione di informazioni utili essenziali. Si tendevano ad avere delle pagine di show super-affollate di informazioni.

Oggi facciamo un passo "indietro" per focalizzarci sull'usabilità ossia creiamo un solo indirizzo fisso per ogni azienda e quindi se un'azienda ha più indirizzi si creano più aziende tanto non ci sono problemi se ho più aziende con la stess  PIVA o CF. Questo forza l'utente a creare delle associazioni con le persone che sono effettivamente nella sede dove solitamente stanno. Ad esempio il sig. Rossi è nello stabilimento di padova della Peroni mentre il sig. Bianchi è nello stabilimento di Roma. Posso anche avere il sig. Verdi che fa il pendolare tra i due stablimenti e non ho problemi ad associargli entrambe le aziende: "Peroni stabilimento PD" e "Peroni stabilimento RM".
Quindi i campi indirizzo sono:

* building : edificio (stabilimento, ufficio, casa)
* full_address : (indirizzo completo)
* address_tag : (Provincia per trasferte o visite clienti in zona)

Il campo full_address ha max 175 characters. Come da direttive della posta britannica allegata che precisa anche Max 35 per linea e max 5 linee.  http://webarchive.nationalarchives.gov.uk/+/http://www.cabinetoffice.gov.uk/media/254290/GDS%20Catalogue%20Vol%202.pdf

Altri contatti che metto fissi per l'azienda sono:

* telephone (centralino, main phone, contact center)
* fax
* email_one o email_general (es: info@azienda.com, azienda@azienda.com, global@azienda.com)
* email_two o email_support (es: support@azienda.com, commerciale@azienda.com, magazzino@azienda.com, spedizioni@azienda.com, gruppo_x_y@azienda.com)
* email_three
* note_contacts (un campo di testo in cui appuntare altri eventuali contatti ad esempio la "fan page facebook aziendale" o su linkedin o su altro social)
* web_site

Metto solo **email** perché è quella che useremo per le news letters generiche. Le altre eventuali emails si scrivono su **note_contacts**.




## Apriamo il branch "Companies Addresses Seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cas
~~~~~~~~




## Aggiungiamo i nuovi campi


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddAddressContactsToCompanies building:string full_address:string address_tag:string telephone:string fax:string email:string web_site:string note_contacts:text 
~~~~~~~~

questo mi crea il migration:

{title=".../db/migrate/xxx__add_address_contacts_to_companies.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAddressContactsToCompanies < ActiveRecord::Migration[5.0]
  def change
    add_column :companies, :building, :string
    add_column :companies, :full_address, :string
    add_column :companies, :address_tag, :string
    add_column :companies, :telephone, :string
    add_column :companies, :fax, :string
    add_column :companies, :email, :string
    add_column :companies, :web_site, :string
    add_column :companies, :note_contacts, :text
  end
end
~~~~~~~~

Effettuiamo il migrate del database per aggiungere i nuovi campi sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add columns address and contacts to companies"
~~~~~~~~




## I18n - dynamic

Non dobbiamo aggiungere nessuna traduzione. L'unico che si potrebbe tradurre è il campo note ma ai fini dell'usabilità non è importante.




## seed

Per i nuovi campi aggiunti eseguiremo solo la procedura manuale descritta nel prossimo paragrafo.




## Popoliamo manualmente la tabella

(DA FARE -- AL MOMENTO SALTO QUESTO PARAGRAFO E MI DEDICO DIRETTAMENTE ALLE VIEWS)


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed address and contacts to companies"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cas:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente dove abbiamo popolato manualmente la tabella.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cas
$ git branch -d cas
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~