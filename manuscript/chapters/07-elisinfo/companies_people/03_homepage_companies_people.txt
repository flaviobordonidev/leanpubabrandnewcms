# Visualizziamo dinamicamente l'elenco delle persone e quello delle aziende sulla homepage



## Apriamo il branch "Homepage People Companies"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b hpc
~~~~~~~~




## Homepage show ed i partials related_list_group

Quando il params[:related] == **people** allora visualizziamo in homepage l'elenco delle persone (related_list_group with people).  
Quando il params[:related] == **companies** allora visualizziamo in homepage l'elenco delle aziende (related_list_group with companies).
Quando il params[:related] == **favorites** allora visualizziamo in homepage l'elenco dei preferiti (related_list_group with favorites). 

Piuttosto di avere vari partials in views/homepage chiamati:

* related_list_group_with_people
* related_list_group_with_people
* related_list_group_with_favorites
* related_list_group_with_...

Sfrutto i rispettivi views dei "related". Nel caso delle persone normalmente l'elenco è su people/index quindi creiamo un partial nella cartella people e lo chamiamo **_index.html.erb**. Nel caso delle aziende normalmente l'elenco è su companies/index quindi creiamo un partial nella cartella companies e lo chamiamo **_index.html.erb**. Nel caso dei preferiti creiamo la cartella views/favorites e dentro creiamo il partial **_index.html.erb**.

Nella pagina homepage/show implementiamo un render dinamico che cambia in funzione di params[:related]

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=30}
~~~~~~~~
  <div class="row">
    <div class="col-xs-12">
      <p>related_list_group</p>
      <%= render "#{@relateds_path}/index", related_list: @relateds %>
    </div> <!-- /col -->
  </div> <!-- /row -->
~~~~~~~~




## Aggiorniamo il controller di homepage

Usiamo la variabile d'istanza @relateds e gli passiamo tutte le persone ** @relateds = Person.all **. Siccome l'istanza è per varie entità metto un ** case params[:related] ** per passare di volta in volta l'entità richiesta. Cominciamo con la sola entità People.

{title=".../app/controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  def show
    # current_user is generated by the gem "devise" and contain the logged user. esempio: User.find(current_user.id)
    @user = current_user
    
    # gestiamo l'elenco dei relateds
    params[:related] = "favorites" if params[:related].blank?
    case params[:related]
    when "favorites"
      # TODO
      @relateds_path = "favorites"
    when "people"
      @relateds = Person.all
      @relateds_path = "people"
    when "companies"
      @relateds = Company.all
      @relateds_path = "companies"
    else
      raise "#TODO"
    end
  end
~~~~~~~~




## Creiamo i partials

e creiamo il partial nell'entità di competenza. Iniziamo con i preferiti. Siccome ancora non esiste nulla creiamo manualmente la cartella **favorites** dentro **views** e creiamo un partial come segnalibro da riempire nei prossimi capitoli.

{title=".../app/views/favorites/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<p> partial _index di favorites </p>
~~~~~~~~

Ora il partial per l'elenco delle persone.

{title=".../app/views/people/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<div class="list-group left-pad right-pad">
  <% @relateds.each do |person| %>
    <%= link_to "", :class => "list-group-item" do %>
      <p> <%= person.title %> </p>
      <p><strong> <%= "#{person.first_name} #{person.last_name}"%> </strong></p>
    <% end %>
  <% end %>
</div>
~~~~~~~~

Ora il partial per l'elenco delle aziende.

{title=".../app/views/companies/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=4}
~~~~~~~~
<div class="list-group left-pad right-pad">
  <% @relateds.each do |company| %>
    <%= link_to "", :class => "list-group-item" do %>
      <p> <%= "#{h_company_status(company.status)} #{company.taxation_number_first}" %> </p>
      <p><strong> <%= "#{company.name}"%> </strong></p>
    <% end %>
  <% end %>
</div>
~~~~~~~~

abbiamo anche l'helper per visualizzare il testo invece dei numeri

{title=".../app/helpers/application_helper.rb", lang=ruby, line-numbers=on, starting-line-number=46}
~~~~~~~~
  def h_company_status(status)
    status = 6 if status.blank?
    case status
    when 1
      return "cliente"
    when 2
      return "fornitore"
    when 3
      return "cliente e fornitore"
    when 4
      return "cliente e fornitore (potenziale)"
    when 5
      return "fornitore e cliente (potenziale)"
    when 6
      return "cliente (potenziale) e fornitore (potenziale)"
    else
      raise "NON DOVEVI ARRIVARE QUI. Cosa succede?"
    end
  end
~~~~~~~~




## implementiamo I18n per status

{title=".../app/helpers/application_helper.rb", lang=ruby, line-numbers=on, starting-line-number=46}
~~~~~~~~
  def h_company_status(status)
    status = 6 if status.blank?
    case status
    when 1
      return t("application.company_status.one")
    when 2
      return t("application.company_status.two")
    when 3
      return t("application.company_status.three")
    when 4
      return t("application.company_status.four")
    when 5
      return t("application.company_status.five")
    when 6
      return t("application.company_status.six")
    when 7
      return t("application.company_status.seven")
    when 8
      return t("application.company_status.eight")
    else
      raise "NON DOVEVI ARRIVARE QUI. Cosa succede?"
    end
  end
~~~~~~~~

implementiamo la traduzione in italiano

{title="config/locales/it.yml", lang=yaml, line-numbers=on, starting-line-number=17}
~~~~~~~~
    company_status:
      one: "cliente"
      two: "fornitore"
      three: "cliente e fornitore"
      four: "cliente (potenziale)"
      five: "fornitore (potenziale)"
      six: "cliente (potenziale) e fornitore (potenziale)"
      seven: "cliente e fornitore (potenziale)"
      eight: "fornitore e cliente (potenziale)"
~~~~~~~~

implementiamo la traduzione in inglese

{title="config/locales/en.yml", lang=yaml, line-numbers=on, starting-line-number=17}
~~~~~~~~
  application:
    company_status:
      one: "customer"
      two: "supplier"
      three: "customer and supplier"
      four: "customer (potential)"
      five: "supplier (potential)"
      six: "customer (potential) and supplier (potential)"
      seven: "customer and supplier (potential)"
      eight: "supplier and customer (potential)"
~~~~~~~~


verifichiamo che funziona tutto 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add homepage related people and companies"
~~~~~~~~




## Homepage search companies

Sul model di company implementiamo la ricerca delle aziende.

{title="models/company.rb", lang=ruby, line-numbers=on, starting-line-number=41}
~~~~~~~~
  # == Scopes ===============================================================

  scope :search, -> (query) {with_translations(I18n.locale).where("name ILIKE ?", "%#{query.strip}%")}
~~~~~~~~

I>il ** -> (query){... ** è un altro modo di scrivere ** scope :search_people, lambda {|query| joins(:person).merge(Person.search(query))} **


Attiviamo il search sul controller di homepage

{title="controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=29}
~~~~~~~~
    when "companies"
      #@relateds = Company.all
      @relateds = Company.search(params[:search]).order('created_at DESC').page(params[:page])
      @relateds_path = "companies"
~~~~~~~~

su **views/homepage/show.html.erb** implementiamo **render 'related_form_search'**

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=30}
~~~~~~~~
      <%= render 'related_form_search' %>
~~~~~~~~




## Homepage search people

Sul model di person implementiamo la ricerca delle persone.

{title="models/person.rb", lang=ruby, line-numbers=on, starting-line-number=36}
~~~~~~~~
  # == Scopes ===============================================================

  scope :search, -> (query) {with_translations(I18n.locale).where("title ILIKE ? OR last_name ILIKE ? OR first_name ILIKE ?", "%#{query.strip}%", "%#{query.strip}%", "%#{query.strip}%")}
~~~~~~~~

I>il ** -> (query){... ** è un altro modo di scrivere ** scope :search_people, lambda {|query| joins(:person).merge(Person.search(query))} **


Attiviamo il search sul controller di homepage

{title="controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=26}
~~~~~~~~
    when "people"
      @relateds = Person.search(params[:search]).order('created_at DESC').page(params[:page])
      @relateds_path = "people"
~~~~~~~~

su **views/homepage/show.html.erb** abbiamo già implementato **render 'related_form_search'**




## Homepage pagination companies

abbiamo già implementato il pagination sul controller di homepage **.../app/controllers/homepage_controller.rb** con il **.page(params[:page])**

su **views/homepage/show.html.erb** implementiamo **render 'related_form_search'**

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=47}
~~~~~~~~
        <%= render 'related_pagination', list_to_paginate: @relateds %>
~~~~~~~~




## Homepage pagination people

abbiamo già implementato il pagination sul controller di homepage **.../app/controllers/homepage_controller.rb** con il **.page(params[:page])**
ed abbiamo già implementato su **views/homepage/show.html.erb** il **render 'related_form_search'**




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku hpc:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge hpc
$ git branch -d hpc
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~