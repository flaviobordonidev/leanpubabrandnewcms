# Creiamo nuova persona e azienda




## Apriamo il branch "companies people new"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cpn
~~~~~~~~




## Homepage nuova persona

sulla lista di contatti della homepage mostriamo disabilitato il pulsante di nuovo. Lo abilitiamo solo se è fatta una ricerca o se sono presenti meno di 7 records perché il pagination lo imposterò con 6 records per pagina, quindi il settimo record potrebbe essere sulla seconda pagina.

{title=".../app/views/homepage/_related_button_new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% if params[:search].present? or (list_to_add.size < 7)%>

  <div class="btn-group pull-right right-pad"> <!-- btn-group -->
   <%= link_to url_for(h_front_params_path(path: "/#{params[:related]}/new")), :class => "btn btn-default" do %>
      <span class="glyphiconmy ico_new"></span>
    <% end %>
  </div> <!-- /btn-group -->

<% else %>

  <div class="btn-group pull-right right-pad">  <!-- btn-group -->
    <a href="#" class="btn btn-primary disabled">
      <span class="glyphiconmy ico_new"></span>
    </a>
  </div> <!-- /btn-group -->

<% end %>
~~~~~~~~

in alternativa a

{title="", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% if params[:search].present? or (list_to_add.size == 0)%>
~~~~~~~~

si poteva usare

{title="", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<% unless params[:search].blank? or not (list_to_add.size == 0)%>
~~~~~~~~




## Attiviamo la view people/new

Implementiamo la struttura del mockup nella pagina people/new

{title=".../app/views/people/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container-fluid rear_mode">
  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit' %>">
          <%= link_to "#pane_edit", "data-toggle" => "tab" do %>
            <%= content_tag :span,"", class: "glyphiconmy ico_edit" %>
          <% end %>
        </li>
      </ul>
    </div><!-- /.col -->
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%= render 'button_close' %>
    </div> <!-- /.col -->
  </div> <!-- /.row -->

  <div class="row">
    <div class="col-xs-12">
      <div class="tab-content">
        <div id="pane_edit" class="tab-pane <%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit'  %>">
          <div class="text-center bottom-pad">
            <h4><%= t("people.new.title_pane_edit") %></h4>
          </div> <!-- /.text-center -->
          <%= render 'form', person: @person %>
        </div> <!-- /.tab-pane -->
      </div> <!-- /.tab-content -->
    </div> <!-- /.col -->
  </div> <!-- /.row -->
</div> <!-- /.rear_mode -->
~~~~~~~~


Nel controller impostiamo alcuni valori predefiniti nel form. Mettiamo "Sig." o "Mr." a seconda della lingua nel campo person.title, e mettiamo sia a person.first_name che a person.last_name il valore che abbiamo usato nel campo di ricerca. Questo ci facilita l'inserimento

{title=".../app/controllers/people_controller.rb", lang=ruby, line-numbers=on, starting-line-number=16}
~~~~~~~~
  def new
    @person = Person.new
    @person.title =  t "people.new.title"
    @person.first_name = params[:last_front_search]
    @person.last_name = params[:last_front_search]
  end
~~~~~~~~

implementiamo la traduzione in italiano

{title="config/locales/it.yml", lang=yaml, line-numbers=on, starting-line-number=27}
~~~~~~~~
  people:
    show:
      breadcrumbs: "Persona"
    new:
      title: "Sig."
~~~~~~~~

implementiamo la traduzione in inglese

{title="config/locales/en.yml", lang=yaml, line-numbers=on, starting-line-number=27}
~~~~~~~~
  people:
    show:
      breadcrumbs: "Person"
    new:
      title: "Mr."
~~~~~~~~


Impostiamo il passaggio di tutti i parametri nell'url nella creazione della nuova persona. Quindi modifichiamo il redirect_to dell'azione **create** a seguito del corretto salvataggio dei dati nel database. Poiché dopo la creazione di una nuova persona ci spostiamo direttamente sul suo show, impostiamo corrispondentemente anche il last_front_controller, last_front_action e last_front_id. Inoltre gli diciamo di presentare inizialmente l'elenco "favorites". 

{title=".../app/controllers/people_controller.rb", lang=ruby, line-numbers=on, starting-line-number=34}
~~~~~~~~
        format.html { redirect_to url_for(view_context.h_params_path(path: "/people/#{@person.id}", last_front_controller: "people", last_front_action: "show", last_front_id: "#{@person.id}", related: "favorites")), notice: 'Person was successfully created.' }
~~~~~~~~


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add people new"
~~~~~~~~




## Passiamo al lato Aziende




## Homepage nuova azienda

Sulla lista di contatti della homepage mostriamo disabilitato il pulsante di nuovo. Lo abilitiamo solo se è fatta una ricerca o se sono presenti meno di 7 records perché il pagination lo imposterò con 6 records per pagina, quindi il settimo record potrebbe essere sulla seconda pagina. Questa implementazione la abbiamo già fatta per le persone all'inizio di questo capitolo ed è già generica sufficientemente per gestire anche una nuova azienda.




## Attiviamo la view companies/new

Implementiamo la struttura del mockup nella pagina companies/new. 

{title=".../app/views/companies/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<div class="container-fluid rear_mode">
  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit' %>">
          <%= link_to "#pane_edit", "data-toggle" => "tab" do %>
            <%= content_tag :span,"", class: "glyphiconmy ico_edit" %>
          <% end %>
        </li>
      </ul>
    </div><!-- /.col -->
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%= render 'button_close' %>
    </div> <!-- /.col -->
  </div> <!-- /.row -->

  <div class="row">
    <div class="col-xs-12">
      <div class="tab-content">
        <div id="pane_edit" class="tab-pane <%= 'active' if params[:tab_active] == 'default' or params[:tab_active] == 'edit'  %>">
          <div class="text-center bottom-pad">
            <h4><%= t("companies.new.title_pane_edit") %></h4>
          </div> <!-- /.text-center -->
          <%= render 'form', company: @company %>
        </div> <!-- /.tab-pane -->
      </div> <!-- /.tab-content -->
    </div> <!-- /.col -->
  </div> <!-- /.row -->
</div> <!-- /.rear_mode -->
~~~~~~~~

E' praticamente identica a quella delle persone. Cambiano solo due righe

{title="...", lang=HTML+Mako, line-numbers=on, starting-line-number=22}
~~~~~~~~
            <h4><%= t("companies.new.title_pane_edit") %></h4>
~~~~~~~~

{title="...", lang=HTML+Mako, line-numbers=on, starting-line-number=24}
~~~~~~~~
          <%= render 'form', company: @company %>
~~~~~~~~




## Implementiamo il controller

Nel controller impostiamo alcuni valori predefiniti nel form. Mettiamo a company.name il valore che abbiamo usato nel campo di ricerca.

{title=".../app/controllers/companies_controller.rb", lang=ruby, line-numbers=on, starting-line-number=16}
~~~~~~~~
  def new
    @company = Company.new
    @company.name = params[:last_front_search]
  end
~~~~~~~~


Impostiamo il passaggio di tutti i parametri nell'url nella creazione della nuova persona. Quindi modifichiamo il redirect_to dell'azione **create** a seguito del corretto salvataggio dei dati nel database. Poiché dopo la creazione di una nuova persona ci spostiamo direttamente sul suo show, impostiamo corrispondentemente anche il last_front_controller, last_front_action e last_front_id. Inoltre gli diciamo di presentare inizialmente l'elenco "favorites". 

{title=".../app/controllers/companies_controller.rb", lang=ruby, line-numbers=on, starting-line-number=34}
~~~~~~~~
        format.html { redirect_to url_for(view_context.h_params_path(path: "/companies/#{@company.id}", last_front_controller: "companies", last_front_action: "show", last_front_id: "#{@company.id}", related: "descriptions")), notice: 'Company was successfully created.' }
~~~~~~~~


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add companies new"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cpn:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cpn
$ git branch -d cpn
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~