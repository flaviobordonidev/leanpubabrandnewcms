## Contatti

in questo capitolo lavoreremo principalmente lato database. Creeremo la tabella contatti e metteremo i seed iniziali ed alcuni dati di prova. Non avremo nessuna interazione lato views e quindi non apriremo il browser per usare la web gui su http://localhost:3000
Eseguendo gli scaffolds la web gui è creata in automatico ma in questo capitolo non la utilizzeremo. Utilizzeremo invece la console di rails "$ rails c".
Creiamo la parte (contact/contacts) ovvero come entrare in contatto e comunicare con le persone: Tel, email, skype, viber, mobile, canale irc, modo radio sul cellulare, ....




## Apriamo il branch "Polimorphic Contacts Seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pcs
~~~~~~~~




## Creiamo la tabella contacts

La tabella degli indirizzi avrà i seguenti campi:

  medium        | identifier
  ---------------------------------
  telephone     | number
  skype         | address
  email         | address
  irc           | channel
  whatsapp      | telephone number
  FTP           | IP
  radioamotore  | channel
  pager         | telephone number
  snapchat      | user name

Inoltre avrà i due campi per il polimorfismo:

* contactable_id per la chiave esterna (lato molti della relazione uno-a-molti)
* contactable_type per identificare la tabella esterna 

Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold Contact contactable_id:integer contactable_type:string medium:string identifier:string
~~~~~~~~


questo mi crea il migration:

{title=".../db/migrate/xxx_create_contacts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateContacts < ActiveRecord::Migration[5.0]
  def change
    create_table :contacts do |t|
      t.integer :contactable_id, foreign_key: true
      t.string :contactable_type
      t.string :medium
      t.string :identifier

      t.timestamps
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold Contact"
~~~~~~~~




## Usiamo globalize - Internazionalizzazione I18n - dynamic

prima ancora di iniziare i semi mi attivo per l'internazionalizzazione sul database (i18n dynamic).

Attiviamo l'internazionalizzazione sul database usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Contact < ApplicationRecord

  # == Constants ============================================================

  # == Attributes ===========================================================

  # globalize required ---------------------------------------------------------
  translates :medium, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------
  
  # == Extensions ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
end
~~~~~~~~

I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_contacts_translations
~~~~~~~~

Lavoriamo sulla migration usando il metodo .create_translation_table sul model "Company" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_contacts_transaltions.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateContactsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      
      dir.up do
        Contact.create_translation_table!({
          medium: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        Contact.drop_translation_table! migrate_data: true
      end
      
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "contacts" i campi con traduzione, ossia "medium".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add Contact I18n"
~~~~~~~~




## Creiamo le associazioni polimorfiche ed aggiungiamo il nested models per i forms annidati

andiamo sul model ed aggiungiamo il polymorphic

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=13}
~~~~~~~~
  # == Relationships ========================================================

  # polymorphic ----------------------------------------------------------------
  belongs_to :contactable, polymorphic: true
  #-----------------------------------------------------------------------------
~~~~~~~~

andiamo sugli altri modelli ed aggiungiamo l'altro lato dell'associazione polimorfica

{title=".../app/models/company.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
  # == Relationships ========================================================
  
  # polymorphic ----------------------------------------------------------------
  has_many :addresses, as: :addressable
  has_many :contacts, as: :contactable
  #-----------------------------------------------------------------------------
~~~~~~~~


{title=".../app/models/person.rb", lang=ruby, line-numbers=on, starting-line-number=16}
~~~~~~~~
  # == Relationships ========================================================
  
  # polymorphic ----------------------------------------------------------------
  has_many :addresses, as: :addressable
  has_many :contacts, as: :contactable
  #-----------------------------------------------------------------------------
~~~~~~~~





Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo paragrafo.

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
puts "setting the Contacts data with I18n :en :it"
p = Person.first
p.contacts.new(medium: "Telephone", identifier: "+39 02 134562", locale: :en).save
p.contacts.last.update(medium: "Telefono", locale: :it)
p.contacts.new(medium: "Mobile", identifier: "+39 346 010203", locale: :en).save
p.contacts.last.update(medium: "Cellulare", locale: :it)
c = Company.first
c.contacts.new(medium: "Main office", identifier: "+39 02 134111", locale: :en).save
c.contacts.last.update(medium: "Centralino", locale: :it)
c.contacts.new(medium: "email", identifier: "info@azienda.it", locale: :en).save
c.contacts.last.update(medium: "email", locale: :it)
~~~~~~~~

I> Non usiamo nè "$ rake db:seed" nè "$ rake db:setup" perché popoliamo la tabella manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed contacts"
~~~~~~~~




## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

Usiamo la tabella contacts per dare due contatti sia alla prima persona (Person.first) che alla prima azienda (Company.first). 

- Inseriamo il telefono "+39 02 134562" alla prima persona (Person.first).
- Inseriamo il cellulare "+39 346 010203" alla prima persona (Person.first).
- Inseriamo il centralino "+39 02 134111" alla prima azienda (Company.first).
- Inseriamo l'email generale "info@azienda.it" alla prima azienda (Company.first).

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
irb> p = Person.first
irb> p.contacts.new(medium: "Telephone", identifier: "+39 02 134562", locale: :en).save
irb> p.contacts.last.update(medium: "Telefono", locale: :it)
irb> p.contacts
irb> pc1 = p.contacts.last
irb> p.contacts.new(medium: "Mobile", identifier: "+39 346 010203", locale: :en).save
irb> p.contacts.last.update(medium: "Cellulare", locale: :it)
irb> p.contacts
irb> pc2 = p.contacts.last

irb> c = Company.first
irb> c.contacts.new(medium: "Main office", identifier: "+39 02 134111", locale: :en).save
irb> c.contacts.last.update(medium: "Centralino", locale: :it)
irb> c.contacts
irb> cc1 = c.contacts.last
irb> c.contacts.new(medium: "email", identifier: "info@azienda.it", locale: :en).save
irb> c.contacts.last.update(medium: "email", locale: :it)
irb> c.contacts
irb> cc2 = c.contacts.last

irb> Contact.all
irb> p.contacts
irb> c.contacts
~~~~~~~~

Per vedere l'altro lato dell'associazione non possiamo chiamare "pf.person" o "cf.company" perché sono creati dinamicamente a partire dalla stessa tabella polimorfica "favorites". Invece possiamo chiamare:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
irb> pc1.contactable
irb> pc2.contactable
irb> cc1.contactable
irb> cc2.contactable
~~~~~~~~

Dal punto di vista del polimorfismo abbiamo finito.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add popolate contacts"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pcs:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pcs
$ git branch -d pcs
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
