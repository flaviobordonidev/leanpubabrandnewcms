# Creiamo le tabelle dei prodotti

in questo capitolo lavoreremo principalmente lato database. Creeremo la tabella prodotti e metteremo i seed iniziali ed alcuni dati di prova. Non avremo nessuna interazione lato views e quindi non apriremo il browser per usare la web gui su http://localhost:3000
Eseguendo gli scaffolds la web gui è creata in automatico ma in questo capitolo non la utilizzeremo. Utilizzeremo invece la console di rails "$ rails c".

I prodotti sono quello che noi presentiamo/vendiamo ai ns clienti



## Apriamo il branch "Products Seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ps
~~~~~~~~




## Products - scaffold

La tabella dei prodotti avrà i seguenti campi:

* part_number (string) : Il part_number dato da Noi (possiamo usare lo stesso del fornitore).
* commercial_number (string) : Ci permette di differenziare prodotti con stesso part number ma con componenti presi tramite fornitori diversi. (Un po' come il campo **building** per companies). Può essere riempito con la somma dei part_number dei componenti.
* name (string) : Il nome del prodotto (a.k.a.: **model** o **short_description**). Descrizione che va sul DDT o nella tabellina in testa offerta.
* image (useremo paperclip) : L'immagine del componente, utile in fase d'ordine

* memo (text) : Appunti interni sul prodotto. (a.k.a.: notifica). (es: la XY inc. ha un prodotto analogo che chiama Xzvolo)
* description (text) : Descrizione dettagliata per l'offerta

dati sul prezzo:

* supplier_price_list (decimal) : prezzo di listino fornitore
* currency (string) : valuta (es: EUR, USD, CHF, BRL, ...)
* currency_exchange (decimal) : fattore di cambio (es: EUR/valuta se la nostra applicazione ha come settaggio di default EUR)
* currency_rounding (integer + enum array-of-string-values) : arrotondamento dopo il cambio valuta. elenco a cascata in cui scegli: centinaia, decine, unità, decimi, centesimi. 
* -> prezzo di listino fornitore EUR (questo valore viene calcolato)
* supplier_discount (decimal) : sconto che il forntore fa a noi espresso in percentuale (%)
* discount_rounding (integer + enum array-of-string-values) : arrotondamento dopo lo sconto. Elenco a cascata.
* -> prezzo base di acquisto EUR (questo valore viene calcolato)

dati per dogana:

* country_of_origin : CH
* custom_tariff_no : 9027.900
* net_weight : 0.054 Kg

Informazioni per composizione prodtotto:

* to_be_used_with: elenco di sistemi dove viene usato (es: CFL30, CFL30 by-pass, CFL30S in-line, CFLJ, CFLJS, KFL30(M), KFL30S(M), KFLJ(S)(M) 


http://www.justinweiss.com/articles/creating-easy-readable-attributes-with-activerecord-enums/
https://stackoverflow.com/questions/36487900/rails-using-enum-in-a-where-query


Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold Component part_number:string name:string company_id:integer memo:text description:text supplier_price_list:decimal currency:string currency_exchange:decimal currency_rounding:integer supplier_discount:decimal discount_rounding:integer
~~~~~~~~

questo crea il migrate:

{title=".../db/migrate/xxx_create_components.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
class CreateComponents < ActiveRecord::Migration[5.0]
  def change
    create_table :components do |t|
      t.string :part_number
      t.string :name
      t.integer :company_id, foreign_key: true
      t.text :memo
      t.text :description
      t.decimal :supplier_price_list
      t.string :currency
      t.decimal :currency_exchange
      t.integer :currency_rounding
      t.decimal :supplier_discount
      t.integer :discount_rounding

      t.timestamps
    end
  end
end
~~~~~~~~


Effettuiamo il migrate del database per creare la tabella "people" sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold Components"
~~~~~~~~




## Usiamo globalize - i18n - dynamic

prima ancora di iniziare i semi mi attivo per l'internazionalizzazione sul database (i18n dynamic).

Attiviamo l'internazionalizzazione sul database usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title=".../app/models/component.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Component < ApplicationRecord

  # == Constants ============================================================

  # == Attributes ===========================================================

  # ==== globalize required
  translates :name, :description, :fallbacks_for_empty_translations => true

  # == Extensions ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
end
~~~~~~~~

I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_components_translations
~~~~~~~~

Lavoriamo sulla migration usando il metodo .create_translation_table sul model "Person" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_components_transaltions.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateComponentsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      
      dir.up do
        Component.create_translation_table!({
          name: :string,
          description: :text
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        Component.drop_translation_table! migrate_data: true
      end
      
    end
  end
end

~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "companies" i campi con traduzione, ossia "name, description".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add components I18n"
~~~~~~~~




## seed

Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo paragrafo.

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=25}
~~~~~~~~
puts "setting the Component data with I18n :en :it"
Component.new(part_number: "PNP1234", name: "Plastic black pen", description: "This pen made of transparent plastic has a very good black ink", locale: :en).save
Component.last.update(name: "Penna nera di plastica", description: "Questa penna di plastica trasparente ha un ottimo inchiostro nero", locale: :it)
~~~~~~~~

I> Non usiamo nè "$ rake db:seed" nè "$ rake db:setup" perché popoliamo la tabella manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed component"
~~~~~~~~




## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
irb> Component.new(part_number: "PNP1234", name: "Plastic black pen", description: "This pen made of transparent plastic has a very good black ink", locale: :en).save
irb> Component.last.update(name: "Penna nera di plastica", description: "Questa penna di plastica trasparente ha un ottimo inchiostro nero", locale: :it)
~~~~~~~~

aggiungiamo un secondo componente giocando un po' con la console...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c

irb> I18n.locale
  => :it
irb> Component.all
  => TRUE
irb> Component.count
  => 1
irb> Component.new(part_number: "GDC-34I1-REW12", name: "Gomma da cancellare", description: "Con queste cancelli senza aloni").save
  => TRUE
irb> Component.count
  => 2
irb> Component.find(2).name
  => Gomma da cancellare

irb> I18n.locale = :en
  => :en
irb> Component.count
  => 2 (perché GDC-34I1-REW12 è comunque presente anche se non ha ancora nessuna traduzione in inglese)
irb> Component.find(2).name
  => Gomme da cancellare (perché è attivo il fallback)
irb> Component.find(2).update(name: "Rubber")
irb> Component.find(2).name
  => Rubber


irb> I18n.locale = :it
  => :it
irb> Component.find(2).title
  => Gomma da cancellare

irb> exit
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add popolate components"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cs:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cs
$ git branch -d cs
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~