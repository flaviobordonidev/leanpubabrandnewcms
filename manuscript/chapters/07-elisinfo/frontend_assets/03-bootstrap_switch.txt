# Bootstrap Switch

Per avere check-box in stile "interrutore" come quelli sull'iphone.
Replace Bootstrap’s checkboxes and radio buttons by an elegant switch… a Bootstrap Switch.

Riferimenti sul web:
* http://www.bootstrap-switch.org/
* https://github.com/manuelvanrijn/bootstrap-switch-rails
* https://rubygems.org/gems/bootstrap-switch-rails




## Apriamo il branch "BootStrap Switch"


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b bss
~~~~~~~~




## La gemma bootstrap-switch-rails

Per Rails uso la gemma bootstrap-switch-rails

[codice frontend_assets bootstrap_switch 01](#code-frontend_assets-bootstrap_switch-01)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=47}
~~~~~~~~
# bootstrap-switch-rails – Twitter Bootstrap Switch
gem 'bootstrap-switch-rails', '>= 3.3.3'
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~


Aggiungiamo **@import "bootstrap3-switch ";** su application.scss 

{title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, vendor/assets/stylesheets,
 * or any plugin's vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */

// "bootstrap-sprockets" must be imported before "bootstrap" and "bootstrap/variables"
@import "bootstrap-sprockets"; //this allow the gliphicon to work
@import "bootstrap";
@import "bootstrap3-switch ";

@import "application_global";
@import "application_front";
@import "application_rear";
~~~~~~~~


Aggiungiamo **//= require bootstrap-switch** su application.js

{title=".../app/assets/javascripts/application.js", lang=ruby, line-numbers=on, starting-line-number=16}
~~~~~~~~
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require bootstrap-sprockets
//= require bootstrap-switch
//= require turbolinks
//= require_tree .
~~~~~~~~




## Testiamo lo switch sul file test

[codice frontend_assets bootstrap_switch 02](#code-frontend_assets-bootstrap_switch-02)

{title=".../app/views/mocks/test.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
<input type="checkbox" name="my-checkbox" checked>

<script type="text/javascript">
  $("[name='my-checkbox']").bootstrapSwitch();
</script>
~~~~~~~~




## Refactoring

Mettiamo il javascript su application.html.erb in modo che sia disponibilie in qualsiasi punto del nostro applicativo. Lo inseriamo dopo il <body> così verrà attivato dopo che la pagina si è caricata completamente.
Per far questo inseriamo il partial **<%= render 'layouts/bootstrap_switch' %>**

{title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=14}
~~~~~~~~
<!DOCTYPE html>
<html>
<head>
  <title><%= content_for?(:title) ? yield(:title) : "Yesnormalis" %></title>
  <meta name="description" content="<%= content_for?(:description) ? yield(:description) : "Yesnormalis" %>">
  <%= csrf_meta_tags %>

  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= render 'layouts/workaround_ie' %>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  <%= render 'layouts/flash_messages' %>

  <%= yield %>
  
  <% if Rails.env.development? %>
      <div class='debug_layout'>
        <%= render 'layouts/debug' %>
      </div>
  <% end %>
</body>
<%= render 'layouts/bootstrap_switch' %>
</html>
~~~~~~~~

Questo javascript intercetta tutti i campi input con type="checkbox" e gli applica bootstrapSwitch()

{title=".../app/views/layouts/_bootstrap_switch.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<script type="text/javascript">
  $('input:checkbox').bootstrapSwitch();
</script>
~~~~~~~~


Verifichiamo adesso su test togliendo la parte javascript

[codice frontend_assets bootstrap_switch 03](#code-frontend_assets-bootstrap_switch-03)

{title=".../app/views/mocks/test.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
<input type="checkbox" name="my-checkbox" checked>
~~~~~~~~




## Più formattazione

Proviamo una versione con più opzioni di formattazione

[codice frontend_assets bootstrap_switch 04](#code-frontend_assets-bootstrap_switch-04)

{title=".../app/views/mocks/test.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
<input type="checkbox" id="person-favorite" name="person-favorite" data-size = "medium" data-on-color = "primary" data-on-text = "SI" data-off-color = "default" data-off-text = "NO" />
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "verify bootstrap-switch on mockups test"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku bss:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge bss
$ git branch -d bss
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~