# Favorites Company Contacts

implementiamo i favoriti delle aziende o dei contatti sulla view edit di company_contact_maps

- Voglio settare come preferita, per una data azienda, un contatto
- Voglio settare come preferita, per una dato contatto, una delle azienda a cui si riferisce (normalmente è solo una ma esistono casi in cui un numero è associato a più aziende. Ad esempio il numero 060606 che permette di parlare con varie aziende municipalizzate di Roma.)




## Apriamo il branch "Favorites Company Contacts"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b fcc
~~~~~~~~




## Aggiungiamo i campi favorites_ids su company_contact_maps edit

Li aggiungiamo sul partial _tab_edit(_form) di company_contact_maps [(codice: 01)](#code-company_contact_maps-favorites_ccmaps_edit_destroy-01) dentro la struttura if...elsif...end.
Per il lato company

{title=".../app/views/company_contact_maps/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=29}
~~~~~~~~
    <% if params[:last_front_controller] == "companies" %>
~~~~~~~~

{title="...", lang=HTML+Mako, line-numbers=on, starting-line-number=49}
~~~~~~~~
      <div class="field">
        <%= f.label :favorite_cb_contact, class: "control-label" %><br>
        <%= f.check_box :favorite_cb_contact, class: "form-control", "data-size" => "medium", "data-on-color" => "primary", "data-on-text" => "SI", "data-off-color" => "default", "data-off-text" => "NO" %>
      </div>
~~~~~~~~

Invece Per il lato contact

{title=".../app/views/company_contact_maps/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=54}
~~~~~~~~
    <% elsif params[:last_front_controller] == "contacts" %>
~~~~~~~~

{title="...", lang=HTML+Mako, line-numbers=on, starting-line-number=64}
~~~~~~~~
      <div class="field">
        <%= f.label :favorite_cb_company, class: "control-label" %><br>
        <%= f.check_box :favorite_cb_company, class: "form-control", "data-size" => "medium", "data-on-color" => "primary", "data-on-text" => "SI", "data-off-color" => "default", "data-off-text" => "NO" %>
      </div>
~~~~~~~~

e mettiamo dei campi di verifica utili allo sviluppo. Poi li nascondiamo/togliamo.

{title="...", lang=HTML+Mako, line-numbers=on, starting-line-number=81}
~~~~~~~~
    <div class="field">
      <%= f.label :favorite_id_company, class: "control-label" %><br>
      <%= f.text_field :favorite_id_company, class: "form-control" %>
    </div>
    
    <div class="field">
      <%= f.label :favorite_id_contact, class: "control-label" %><br>
      <%= f.text_field :favorite_id_contact, class: "form-control" %>
    </div>
~~~~~~~~

Si può vedere che sulla persona id 1 (Jhon Doe) c'è il valore su favorite_id_person ed inoltre il combo-box favorite_cb_person risulta su ON. Questo perché nel precedente paragrafo abbiamo popolato la tabella tramite rails consolle.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "update company_contact_maps edit for favorites"
~~~~~~~~




## Aggiungiamo i favorites sul controller di company_contact_maps 

Dobbiamo adesso lavorare sul controller. Innanzitutto dobbiamo abilitare la white list altrimenti non vengono passate le modifiche.

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=94}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def company_contact_map_params
      params.require(:company_contact_map).permit(:company_id, :contact_id, :summary, :favorite_id_company, :favorite_cb_company, :favorite_id_contact, :favorite_cb_contact)
    end
~~~~~~~~


Ora dedichiamoci al codice per gestire i preferiti.

* Quando modifico un record della company_contact_maps:

1. se il check_box favorite_cb nel tab option è ON:
  1a. se favorite_id è blank -> creo il record nella tabella favorite
  1b. se favorite_id non è blank -> aggiorno il corrispondente record nella tabella favorite
2. se il check_box favorite_cb nel tab option è OFF:
  2a. se favorite_id è blank -> non faccio nulla
  2b. se favorite_id non è blank -> elimino il corrispondente record nella tabella favorites

* Quando elimino un record dalla company_contact_maps elimino anche il corrispondente record della tabella favorites se presente.

A> Inoltre quando eliminiamo una azienda o un contatto dovremmo cancellare anche l'eventuale relativo record su company_contact_map e quindi a cascata cancellare anche l'eventuale relativo preferito. Ma questo lo implementiamo successivamente.




Attiviamo i due nuovi metodi private

sull'azione update esplodiamo il format.html{...} ed attiviamo l'azione privata manage_favorite_contact o manage_favorite_company a seconda di chi ha chiamato company_contact_map

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=64}
~~~~~~~~
        format.html do
          redirect_to url_for(view_context.h_params_path(path: "/#{params[:last_front_controller]}/#{params[:last_front_id]}", related: params[:last_front_related], page: params[:last_front_page], search: params[:last_front_search])), notice: 'Company contact map was successfully updated..'
          if params[:last_front_controller] == "companies"
            #"seleziona contatto da associare"
            manage_contact_favorite_of_company # private action
          elsif params[:last_front_controller] == "contacts"
            #"seleziona azienda da associare"
            manage_company_favorite_of_contact # private action
          else
            raise "ERROR"
          end
        end
~~~~~~~~

sull'azione destroy attiviamo l'azione privata manage_favorite_destroy

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=88}
~~~~~~~~
    manage_favorite_destroy # private action
~~~~~~~~

creiamo i metodi nella sezione privata

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=97}
~~~~~~~~
  #-----------------------------------------------------------------------------
  private
~~~~~~~~

...

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=97}
~~~~~~~~
    def manage_contact_favorite_of_company
      #raise "->#{@company_contact_map.favorite_cb_company}" # questo prende il valore dal database
      #raise "->#{params[:company_contact_map][:favorite_cb_company]}" # questo prende il valore dalla view
      if params[:company_contact_map][:favorite_cb_contact] == "0"  # if combo-box-favorite is OFF
        if @company_contact_map.favorite_id_contact.blank?
          #raise "don't do anything"
        else
          #raise "delete favorite"
          Favorite.find(@company_contact_map.favorite_id_contact).destroy
          @company_contact_map.update(favorite_id_contact: nil)
        end
      else  # if combo-box-favorite is ON
        if @company_contact_map.favorite_id_contact.blank?
          #raise "crea nuovo favorite"
          f = Company.find(@company_contact_map.company_id).favorites.new(copy_table: "company_contact_map", copy_table_id: @company_contact_map.id, copy_normal: @company_contact_map.summary, copy_bold: "#{@company_contact_map.contact.medium} #{@company_contact_map.contact.identifier}")
          f.save
          @company_contact_map.update(favorite_id_contact: f.id)
        else
          #raise "aggiorna favorite esistente"
          f = Favorite.find(@company_contact_map.favorite_id_contact)
          f.update(copy_table: "company_contact_map", copy_table_id: @company_contact_map.id, copy_normal: @company_contact_map.summary, copy_bold: "#{@company_contact_map.contact.medium} #{@company_contact_map.contact.identifier}")
          f.save
        end
      end
    end
~~~~~~~~

lato contact (DA RIVEDERE PER TENERLI SU CAPITOLI DISTINTI)

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=97}
~~~~~~~~
    def manage_company_favorite_of_contact
      #raise "->#{@company_contact_map.favorite_cb_contact}" # questo prende il valore dal database
      #raise "->#{params[:company_contact_map][:favorite_cb_contact]}" # questo prende il valore dalla view
      if params[:company_contact_map][:favorite_cb_company] == "0"  # if combo-box-favorite is OFF
        if @company_contact_map.favorite_id_company.blank?
          #raise "don't do anything"
        else
          #raise "delete favorite"
          Favorite.find(@company_contact_map.favorite_id_company).destroy
          @company_contact_map.update(favorite_id_company: nil)
        end
      else  # if combo-box-favorite is ON
        if @company_contact_map.favorite_id_company.blank?
          #raise "crea nuovo favorite"
          f = Contact.find(@company_contact_map.contact_id).favorites.new(copy_table: "company_contact_map", copy_table_id: @company_contact_map.id, copy_normal: @company_contact_map.summary, copy_bold: "#{@company_contact_map.company.name} - #{@company_contact_map.company.status}")
          f.save
          @company_contact_map.update(favorite_id_company: f.id)
        else
          raise "aggiorna favorite esistente"
          f = Favorite.find(@company_contact_map.favorite_id_company)
          f.update(copy_table: "company_contact_map", copy_table_id: @company_contact_map.id, copy_normal: @company_contact_map.summary, copy_bold: "#{@company_contact_map.company.name} - #{@company_contact_map.company.status}")
          f.save
        end
      end
    end
~~~~~~~~

Adesso gestiamo il cancellamento del link

{title=".../app/controllers/company_contact_maps_controller.rb", lang=ruby, line-numbers=on, starting-line-number=97}
~~~~~~~~
    def manage_favorite_destroy
      # se il record company_contact_map ha dei favoriti li elimino prima di eliminare il record.
      Favorite.find(@company_contact_map.favorite_id_company).destroy unless @company_contact_map.favorite_id_company.blank?
      Favorite.find(@company_contact_map.favorite_id_contact).destroy unless @company_contact_map.favorite_id_contact.blank?
    end
~~~~~~~~


Adesso ho tutto quello che serve per mettere e togliere i preferiti.




## Mettiamo l'asterisco ai record della lista che sono preferiti

Su companies/show e people/show la lista delle aziende o dei contatti relazionate avranno un asterisco se sono delle preferite.


{title="views/company_contact_map/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
~~~~~~~~
<% unless company_contact_map.favorite_id_contact.blank? %>
  <span class="badge"><span class="glyphicon glyphicon-star"></span></span>
<% end %>
~~~~~~~~

{title="views/company_contact_map/_index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=15}
~~~~~~~~
<% unless company_contact_map.favorite_id_company.blank? %>
  <span class="badge"><span class="glyphicon glyphicon-star"></span></span>
<% end %>
~~~~~~~~


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add favorites company_contact_maps edit"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku fcc:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge fcc
$ git branch -d fcc
~~~~~~~~




## Backup su github

facciamo un backup del ns progetto su github:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
