# Creiamo la tabella company_contact_maps

in questo capitolo lavoreremo principalmente lato database. 
Creeremo la tabella "ponte" tra aziende e contatti ** company_contact_maps ** e metteremo i seed iniziali ed alcuni dati di prova.
La tabella ** company_contact_maps ** ci permette di:

* Sapere per l'azienda y l'elenco dei contatti. Ossia tutti i mezzi per entrare in contatto con l'azienda. 
* Sapere per un contatto l'elenco delle aziende che può raggiungere. (es: il numero 060606 su Roma permette di contattare l'AMA, la circoscrizione, l'ospedale, ...)

Non avremo nessuna interazione lato views e quindi non apriremo il browser per usare la web gui su http://localhost:3000
Eseguendo gli scaffolds la web gui è creata in automatico ma in questo capitolo non la utilizzeremo. Utilizzeremo invece la console di rails ** $ rails c **.

Creiamo la tabella che associa le aziende ai contatti e viceversa. Un'azienda può avere più contatti (mezzi per entrare in contatto). Un contatto può riguardare più aziende.




## Apriamo il branch "company_contact_maps seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ccms
~~~~~~~~



## Una azienda molti contatti e viceversa

Implementiamo la relazione molti-a-molti tra la tabella ** companies ** e ** contacts ** facendo due relazioni uno-a-molti con company_contact_maps.

* Una company ha molte company_contact_maps. Aggiungiamo la chiave esterna che va nel lato "molti" quindi nella tabella company_contact_maps.
* Un contact ha molte company_contact_maps. Aggiungiamo la chiave esterna che va nel lato "molti" quindi nella tabella company_contact_maps.

Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold CompanyContactMap company:references contact:references summary:string
~~~~~~~~

questo crea il migrate:

{title=".../db/migrate/xxx_create_company_person_maps.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateCompanyContactMaps < ActiveRecord::Migration[5.0]
  def change
    create_table :company_contact_maps do |t|
      t.references :company, foreign_key: true
      t.references :contact, foreign_key: true
      t.string :summary

      t.timestamps
    end
  end
end
~~~~~~~~

Da Rails 5 il **.references ..., foreign_key: true** aggiunge già le chiavi esterne e l'indice (come si può vedere su .../db/schema.rb dopo il migrate del database)  e mi risparmia di fare:

{title="", lang=ruby, line-numbers=off}
~~~~~~~~
def change
  create_table :company_contact_maps do |t|
    t.integer :company_id
    t.integer :contact_id
    t.string :summary

    t.timestamps null: false
  end
  add_index :company_contact_maps, [:company_id, :contact_id]
end
~~~~~~~~


Effettuiamo il migrate del database per creare la tabella "company_contact_maps" sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add scaffold CompanyContactMap"
~~~~~~~~




## Models uno-a-molti + uno-a-molti = molti-a-molti 

adesso finalizziamo la relazione molti-a-molti con le due realazioni uno-a-molti lato models.

{title=".../app/models/company_contact_map.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CompanyContactMap < ApplicationRecord

  # many-to-many ---------------------------------------------------------------
  belongs_to :company
  belongs_to :contact
  #-----------------------------------------------------------------------------
end
~~~~~~~~

inseriamo sul model di company

{title=".../app/models/company.rb", lang=ruby, line-numbers=on, starting-line-number=29}
~~~~~~~~
  has_many :company_contact_maps
  has_many :contacts, :through => :company_contact_maps
  accepts_nested_attributes_for :contacts
~~~~~~~~

tutto il model

{title=".../app/models/company.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Company < ApplicationRecord

  # paperclip remove logo ------------------------------------------------------
  attr_accessor :remove_logo
  #-----------------------------------------------------------------------------

  # virtual attribute ---------------------------------------------------------
  attr_writer :favorite_cb_user
  
  # getter method (non creo il setter method)
  def favorite_cb_user
    if favorite_id_user.blank?
      false
    else
      true
    end
  end
  #-----------------------------------------------------------------------------
  
  # polymorphic ----------------------------------------------------------------
  has_many :favorites, as: :favoritable
  #-----------------------------------------------------------------------------
  
  # many-to-many ---------------------------------------------------------------
  has_many :company_person_maps
  has_many :people, :through => :company_person_maps
  accepts_nested_attributes_for :people

  has_many :company_contact_maps
  has_many :contacts, :through => :company_contact_maps
  accepts_nested_attributes_for :contacts
  #-----------------------------------------------------------------------------

  # globalize required ---------------------------------------------------------
  translates :sector, :status, :memo, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------

  # paperclip required ---------------------------------------------------------
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }
  validates_attachment :logo,
                        content_type: { content_type: ["image/jpeg", "image/gif", "image/png"] }
  #-----------------------------------------------------------------------------
  
  # scope filters --------------------------------------------------------------
  scope :search, -> (query) {with_translations(I18n.locale).where("name ILIKE ?", "%#{query}%")}
  #-----------------------------------------------------------------------------

end
~~~~~~~~


inseriamo sul model di contact

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=29}
~~~~~~~~
  has_many :company_contact_maps
  has_many :companies, :through => :company_contact_maps
  accepts_nested_attributes_for :companies
~~~~~~~~

tutto il model

{title=".../app/models/contact.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Contact < ApplicationRecord

  # globalize required
  translates :medium, :fallbacks_for_empty_translations => true
  #---

  # many-to-many ---------------------------------------------------------------
  has_many :company_contact_maps
  has_many :companies, :through => :company_contact_maps
  accepts_nested_attributes_for :companies
  #-----------------------------------------------------------------------------

  # scope filters --------------------------------------------------------------
  scope :search, -> (query) {with_translations(I18n.locale).where("medium ILIKE ? OR identifier ILIKE ?", "%#{query}%", "%#{query}%")}
  #-----------------------------------------------------------------------------
end
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "update models CompanyContactMap Comapny Contact"
~~~~~~~~




## I18n - dynamic

Attiviamo l'internazionalizzazione sul database (I18n dynamic) usando la gemma globalize installata precedentemente.
Indichiamo sul modello i campi della tabella che vogliamo tradurre. 

{title="models/company_contact_map.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CompanyContactMap < ApplicationRecord

  # many-to-many ---------------------------------------------------------------
  belongs_to :company
  belongs_to :contact
  #-----------------------------------------------------------------------------
  
  # globalize required ---------------------------------------------------------
  translates :summary, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------
end
~~~~~~~~


I> il "translates ..." dentro il model va messo prima di fare il db:migrate altrimenti ci da errore!

adesso creiamo un migration vuoto perché useremo il metodo di globalize ".create_translation_table"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration create_company_contact_maps_translations
~~~~~~~~


Lavoriamo sulla migration usando il metodo .create_translation_table sul model "CompanyContactMap" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_create_company_contact_maps_transaltions.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateCompanyContactMapsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|

      dir.up do
        CompanyContactMap.create_translation_table!({
          summary: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do 
        CompanyContactMap.drop_translation_table! migrate_data: true
      end
      
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~

E' fondamentale cancellare dalla tabella principale "company_contact_maps" i campi con traduzione, ossia "summary".
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add CompanyContactMap I18n"
~~~~~~~~




## seed

Di seguito mostriamo come popolare la tabella in automatico ma noi eseguiremo la procedura manuale descritta nel prossimo paragrafo.


{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

puts "setting the Person data with I18n :en :it"
Person.new(title: "Mr.", first_name: "Jhon", last_name: "Doe", locale: :en).save
Person.find(1).update(title: "Sig.", locale: :it)


puts "setting the Company data with I18n :en :it"
Company.new(name: "ABB", sector: "Chemical", status: "Client", locale: :en).save
Company.last.update(sector: "Chimico", status: "Cliente", locale: :it)


puts "setting the CompanyPersonMap data with I18n :en :it"
CompanyPersonMap.new(person_id: 1, company_id: 1, summary: "purchase department", locale: :en).save
CompanyPersonMap.last.update(summary: "ufficio acquisti", locale: :it)


puts "setting the Contacts data with I18n :en :it"
Contact.new(medium: "Telephone", locale: :en).save
Contact.last.update(medium: "Telefono", locale: :it)


puts "setting the CompanyContactMap data with I18n :en :it"
CompanyContactMap.new(company_id: 1, contact_id: 1, summary: "contact center", locale: :en).save
CompanyContactMap.last.update(summary: "centralino", locale: :it)
~~~~~~~~

I> Non usiamo nè "$ rake db:seed" nè "$ rake db:setup" perché popoliamo la tabella manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed company_contact_maps"
~~~~~~~~




## Popoliamo manualmente la tabella

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> CompanyContactMap.new(company_id: 1, contact_id: 1, summary: "contact center", locale: :en).save
irb> CompanyContactMap.last.update(summary: "centralino", locale: :it)
~~~~~~~~


aggiungiamo una seconda azienda al primo contatto giocando un po' con la console...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> CompanyContactMap.all
irb> Company.find 1
irb> Company.find 2
irb> Company.find 3
irb> Contact.find 1
irb> Contact.find 2
irb> Contact.find 3
irb> I18n.locale
irb> CompanyContactMap.new(company_id: 1, contact_id: 2, summary: "centralino").save
irb> cpm = CompanyContactMap.last
irb> cpm.update(summary: "contact center", locale: :en)
irb> cpm.summary
irb> I18n.locale
irb> I18n.locale = :en
irb> cpm.summary
irb> CompanyContactMap.new(company_id: 1, contact_id: 3, summary: "purchase department").save
irb> CompanyContactMap.last.update(summary: "ufficio acquisti", locale: :it)
irb> c = Company.find(1)
irb> c.company_contact_maps
irb> c.company_contact_maps[0]

irb> c.company_contact_maps.new(contact_id: 4, summary: "ufficio tecnico").save
irb> c.company_contact_maps[0]
irb> c.company_contact_maps[0].summary
irb> c.company_contact_maps[0].person
irb> c.company_contact_maps[0].person.first_name
irb> c.company_contact_maps.new(person_id: 2, summary: "ufficio tecnico").save
irb> c.company_contact_maps[1].person
irb> c.company_contact_maps[1].person.first_name
   ATTENZIONE! potrebbe non funzionare perché manca un "refresh" nel database. Si può forzare un refresh ma non mi ricordo come. :( In alternativa esci dalla console e rientra.

irb> c.company_contact_maps[0].update(person_id: 1)
  Cambio la persona per il primo collegamento.

irb> cn = Contact.find(1)
irb> cn.company_contact_maps
irb> cn.company_contact_maps.new(company_id: 3, summary: "ufficio tecnico").save

irb> exit
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed company_contact_maps"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ccms:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
irb> CompanyContactMap.new(company_id: 1, contact_id: 1, summary: "contact center", locale: :en).save
irb> CompanyContactMap.last.update(summary: "centralino", locale: :it)
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ccms
$ git branch -d ccms
~~~~~~~~