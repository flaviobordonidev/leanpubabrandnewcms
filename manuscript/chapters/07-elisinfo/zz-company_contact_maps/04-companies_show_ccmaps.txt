## Companies show related contacts via company_contact_maps




## Apriamo il branch "companies-show via company_contact_maps"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cs_ccm
~~~~~~~~




## Companies show relateds contacts

prepariamo companies/show per mostrare i suoi relateds.

[01:](#code-company_contact_maps-companies_show_ccmaps-01)

{title="controllers/companies_controller.rb", lang=ruby, line-numbers=on, starting-line-number=11}
~~~~~~~~
  # GET /companies/1
  # GET /companies/1.json
  def show
    # gestiamo l'elenco dei relateds
    case params[:related]
    when "favorites"
      @relateds = @company.favorites.page(params[:page]).per_page(3).order('created_at DESC')
      #@relateds = Favorite.all.page(params[:page]).per_page(6)
      @relateds_path = "favorites"
    when "people"
      #@relateds = @company.company_person_maps.all
      @relateds = @company.company_person_maps.search_people(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_person_maps"
    when "companies"
      # TODO
      @relateds = Company.all
    when "contacts"
      @relateds = @company.company_contact_maps.all.page(params[:page]).per_page(2)
      #@relateds = @company.company_contact_maps.search_contacts(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_contact_maps"
    else
      raise "Errore da gestire"
    end
  end
~~~~~~~~

Sul view companies show abbiamo già implementato il ** <%= render "#{params[:related]}/index" %> ** 

Anche il breadcrumbs/select_related lo abbiamo già implementato nei capitoli precedenti

verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps

![https://elisinfo5-flaviobordonidev.c9users.io/company_contact_maps](images/company_contact_maps/cpmaps_index/cpmaps.png)


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add CompanyContactMap index"
~~~~~~~~




## Search

Implemento il search sul model di company_contact_maps.

{title=".../app/models/company_contact_map.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CompanyContactMap < ApplicationRecord

  # many-to-many ---------------------------------------------------------------
  belongs_to :company
  belongs_to :contact
  #-----------------------------------------------------------------------------
  
  # globalize required ---------------------------------------------------------
  translates :summary, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------

  #scope filters ---------------------------------------------------------------
  # sfrutto lo scope: search del model contact 
  scope :search_contacts, -> (query) {joins(:contact).merge(Contact.search(query))}
  # sfrutto lo scope: search del model Company 
  scope :search_companies, -> (query) {joins(:company).merge(Company.search(query))}
  #-----------------------------------------------------------------------------
end
~~~~~~~~


Attiviamo il search sul controller di companies

{title=".../app/controllers/companies_controller.rb", lang=ruby, line-numbers=on, starting-line-number=11}
~~~~~~~~
  # GET /companies/1
  # GET /companies/1.json
  def show
    # gestiamo l'elenco dei relateds
    case params[:related]
    when "favorites"
      @relateds = @company.favorites.page(params[:page]).per_page(3).order('created_at DESC')
      #@relateds = Favorite.all.page(params[:page]).per_page(6)
      @relateds_path = "favorites"
    when "people"
      #@relateds = @company.company_person_maps.all
      @relateds = @company.company_person_maps.search_people(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_person_maps"
    when "companies"
      # TODO
      @relateds = Company.all
    when "contacts"
      #@relateds = @company.company_contact_maps.all.page(params[:page]).per_page(2)
      @relateds = @company.company_contact_maps.search_contacts(params[:search]).page(params[:page]).per_page(2).order('created_at DESC')
      @relateds_path = "company_contact_maps"
    else
      raise "Errore da gestire"
    end
  end
~~~~~~~~

testiamo che funziona la ricerca usando il campo search già implementato nei precedenti capitoli oppure passando il parametro search=xy direttamente sull'URL
http://localhost:3000/it/companies/2?page=1&related=people&search=xy

Il searhc form ed il pagination sono già stati implementati nei precedenti capitoli


verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps

![https://elisinfo5-flaviobordonidev.c9users.io/company_person_maps](images/company_person_maps/cpmaps_index/cpmaps.png)


sta funzionando quindi facciamo un commit

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add companies show company_contact_maps search and pagination"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cs_ccm:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cs_ccm
$ git branch -d cs_ccm
~~~~~~~~