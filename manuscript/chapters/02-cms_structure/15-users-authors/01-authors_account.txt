# Gestiamo l'account dell'autore

Gli autori non sono altro che users con il ruolo di autore (role="authors")
Come gestire un account per gli autori:

* Possiamo fare come abbiamo già fatto per posts creando un modulo Authors::Posts per gestire in maniera differenziata gli autori.
* Possiamo utilizzare users_controller che è già in piedi. Usiamo la pagina users/show per visualizzare l'account
* Possiamo creare un controller completamente sganciato es: accounts_controller e puntare alla tabella users con le "azioni" da dentro il controller.

Analiziamo cosa ci serve per l'utente che si è loggato con ruolo di autore:

1. Nella dashboard una view di modifica dei dati dell'autore che chiamiamo pagina di "account". Questa è praticamente users/edit del current_user.
2. Nel "tema" una view con l'elenco di tutti gli autori. Creiamo l'azione authors_index in users_controller.
3. Nel "tema" una view con l'informazione dettagliata del singolo autore. Usiamo l'azione "show" o creiamo l'azione authors_show in users_controller.

Dall'analisi la scelta più semplice è utilizzare users_controller.
La scelta di avere un modulo Authors::Users è interessante ma ci complica la vita. Le views dentro authors, per mantenere la stessa logica di posts, sarebbero quelle della dashboard e quindi quelle che permettono le modifiche.
Dovremmo poi creare un'altra struttura per la visualizzazione che non puà essere Posts perché è già usata dall'amministratore per gestire tutti gli utenti.
La scelta di un controller sganciato la puoi vedere al capitolo zz01-accounts. Didatticamente interessante ma si allontana un po' dalle convenzioni Rails.



## Aggiungiamo il campo Bio

Alla tabella "users" aggiungiamo la colonna "bio"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddBioToUsers bio:text
~~~~~~~~

questo crea il migrate:

{title=".../db/migrate/xxx_add_bio_to_users.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddBioToUsers < ActiveRecord::Migration[5.2]
  def change
    add_column :users, :bio, :text
  end
end
~~~~~~~~

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Aggiungiamo il campo Image

Poiché usiamo ActiveStorage non aggiungiamo nessuna colonna alla tabella users ma interveniamo lato model.
Attiviamo upload immagine per il model User nella sezione "# == Attributes"

{id="02-15-01_01", title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  ## ActiveStorage
  has_one_attached :account_image
~~~~~~~~

[Codice 01](#02-15-01_01all)





## Aggiorniamo il controller

Inseriamo i nostri nuovi campi "bio" e "account_image" nella whitelist

{id="02-15-01_02", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=74}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at, :role, :bio, :account_image)
    end
~~~~~~~~

[Codice 02](#02-15-01_02all)




## Implementiamo la view

{id="02-15-01_03", title=".../app/views/users/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=42}
~~~~~~~~
  <div class="field">
    <%= form.label :bio %>
    <%= form.text_area :bio, rows: "3" %>
  </div>

  <div class="field">
    <%= form.label :account_image %>
    <%= form.file_field :account_image %>
  </div>
~~~~~~~~

[Codice 03](#02-15-01_03all)


Aggiorniamo la pagina "show"

{id="02-15-01_04", title=".../app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=23}
~~~~~~~~
<p>
  <strong>Biography:</strong>
  <%= @user.bio %>
</p>

<p>
  <strong>Image:</strong>
  <% if @user.account_image.attached? %>
    <%= image_tag @user.account_image %>
  <% else %>
    Nessuna immagine presente
  <% end %>
</p>
~~~~~~~~

[Codice 04](#02-15-01_04all)

INFO:
non usiamo ".present?" perché darebbe sempre "true". Per verificare la presenza del file allegato dobbiamo usare ".attached?"




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

andiamo alla pagina con l'elenco degli articoli ossia sull'URL:

* https://mycloud9path.amazonaws.com/users







## Il codice del capitolo




[Codice 01](#02-15-01_01)

{id="02-15-01_01all", title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class User < ApplicationRecord
  # == Constants ============================================================
  
  # == Extensions ===========================================================

  # == Attributes ===========================================================

  enum role: {user: 0, admin: 1, moderator:2, author:3}

  ## ActiveStorage
  has_one_attached :account_image

  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :registerable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable,
         :recoverable, :rememberable, :validatable

  # == Relationships ========================================================

  has_many :example_posts
  has_many :posts

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================

end
~~~~~~~~




[Codice 02](#02-15-01_02)

{id="02-15-01_02all", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class UsersController < ApplicationController
  before_action :authenticate_user!
  before_action :set_user, only: [:show, :edit, :update, :destroy]

  # GET /users
  # GET /users.json
  def index
    @users = User.all
    authorize @users
  end

  # GET /users/1
  # GET /users/1.json
  def show
  end

  # GET /users/new
  def new
    @user = User.new
    authorize @user
  end
  
  # GET /users/1/edit
  def edit
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(user_params)
    authorize @user

    respond_to do |format|
      if @user.save
        format.html { redirect_to @user, notice: 'User was successfully created.' }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /users/1
  # PATCH/PUT /users/1.json
  def update
    if params[:user][:password].blank?
      params[:user].delete(:password)
      params[:user].delete(:password_confirmation)
    end
    current_user_temp = current_user
    respond_to do |format|
      if @user.update(user_params)
        format.html do
          # Logghiamoci di nuovo automaticamente bypassando le validazioni
          sign_in(@user, bypass: true) if @user == current_user_temp
          redirect_to @user, notice: 'User was successfully updated.'
        end
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user.destroy unless @user == current_user
    respond_to do |format|
      format.html do 
        redirect_to users_url, notice: 'User was successfully destroyed.' unless @user == current_user
        redirect_to users_url, notice: 'Non posso eliminare utente loggato.' if @user == current_user
      end
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_user
      @user = User.find(params[:id])
      authorize @user
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at, :role, :bio, :account_image)
    end

end
~~~~~~~~




[Codice 03](#02-15-01_03)

{id="02-15-01_03all", title=".../app/views/users/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_with(model: user, local: true) do |form| %>
  <% if user.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(user.errors.count, "error") %> prohibited this example_user from being saved:</h2>

      <ul>
      <% user.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :name %>
    <%= form.text_field :name %>
  </div>

  <div class="field">
    <%= form.label :email %>
    <%= form.text_field :email %>
  </div>

  <div class="field">
    <%= form.label :password %>
    <%= form.text_field :password %>
  </div>

  <div class="field">
    <%= form.label :password_confirmation %>
    <%= form.text_field :password_confirmation %>
  </div>

  <% if current_user.present? and current_user.admin? and @user != current_user %>
    <div class="field">    
      <%= form.label :role %>
      <%#= form.text_field :role %>
      <%= form.select(:role, User.roles.keys.map {|role| [role.titleize,role]}) %>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :bio %>
    <%= form.text_area :bio, rows: "3" %>
  </div>

  <div class="field">
    <%= form.label :account_image %>
    <%= form.file_field :account_image %>
  </div>

  
  <div class="actions">
    <%#= form.submit 'Save changes', :class => 'button-xs' %>
    <%= form.submit %>
  </div>
<% end %>
~~~~~~~~



[Codice 04](#02-15-01_04)

{id="02-15-01_04all", title=".../app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @user.name %>
</p>

<p>
  <strong>Email:</strong>
  <%= @user.email %>
</p>

<p>
  <strong>Encrypted password:</strong>
  <%= @user.encrypted_password %>
</p>

<p>
  <strong>Remember created at:</strong>
  <%= @user.remember_created_at %>
</p>

<p>
  <strong>Biography:</strong>
  <%= @user.bio %>
</p>

<p>
  <strong>Image:</strong>
  <% if @user.account_image.attached? %>
    <%= image_tag @user.account_image %>
  <% else %>
    Nessuna immagine presente
  <% end %>
</p>

<%= link_to 'Edit', edit_user_path(@user) %> |
<%= link_to 'Back', users_path %>
~~~~~~~~
