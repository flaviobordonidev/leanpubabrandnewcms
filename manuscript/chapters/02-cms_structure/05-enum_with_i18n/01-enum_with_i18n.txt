## Il menu a cascata internazionalizzato

Nella generazione della tabella abbiamo indicato il campo :type per la scelta del tipo di articolo visualizzato; se è immagine, video, audio...
Lo abbiamo definito semplicemente come :integer perché lo avremmo poi trattato con ENUM.
In questo capitolo implementiamo il tutto fino a visualizzare il menu a cascata (drop-down list) nella view di modifica dell'articolo.
Rendere il menu a cascada multilingua (Enum with i18n)

Risorse web:

* [Easily make enum compatible with i18n without gem in Rails](https://qiita.com/daichirata/items/9495e2548417a4507fec)
* [Rails i18n - How to translate enum of a model](https://stackoverflow.com/questions/43116134/rails-i18n-how-to-translate-enum-of-a-model/43156292)
* [Guida Rails per i18n](http://guides.rubyonrails.org/i18n.html)




## Apriamo il branch "Type Enum I18n"

{title="terminale", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b tei
~~~~~~~~




## Implementiamo nel Model

Attiviamo il campo ENUM nel Model Post per il campo :type

{title=".../models/post.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  enum content_type: {image: 0, video_youtube: 1, video_vimeo:2, audio:3}
~~~~~~~~

il campo "content_type" è già presente nella whitelist del controller perché lo abbiamo inserito durante il "generate scaffold"




### Miglioriamo la colonna "type" per ENUM

Però nella generazione iniziale non abbiamo impostato al meglio la colonna "type" per ENUM. Recuperiamo.
Creiamo un migrate di modifica per mettere un valore di "default" ed un indice per velocizzare queries che usano "type"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration ChangeContentTypeAndAddIndexToPosts
~~~~~~~~

aggiorniamo il migrate

{title=".../db/migrate/xxx_add_index_to_lab_to_testers.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ChangeTypeAndAddIndexToTypeInPosts < ActiveRecord::Migration[5.2]
  def change
    change_column :posts, :content_type, :integer, default: 0
    add_index :posts, :content_type, unique: false
  end
end
~~~~~~~~

eseguiamo il migrate

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails db:migrate
~~~~~~~~

Il nostro db/schema passa da

{title=".../db/schema.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
  create_table "posts", force: :cascade do |t|
    t.string "title"
    t.text "incipit"
    t.text "content"
    t.integer "type"
    t.string "video_youtube"
    t.string "video_vimeo"
    t.text "seocontent"
    t.date "date_chosen"
    t.bigint "user_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "slug"
    t.index ["slug"], name: "index_posts_on_slug", unique: true
    t.index ["user_id"], name: "index_posts_on_user_id"
  end
~~~~~~~~

a

{title=".../db/schema.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
  create_table "posts", force: :cascade do |t|
    t.string "title"
    t.text "incipit"
    t.text "content"
    t.integer "type", default: 0
    t.string "video_youtube"
    t.string "video_vimeo"
    t.text "seocontent"
    t.date "date_chosen"
    t.bigint "user_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "slug"
    t.index ["slug"], name: "index_posts_on_slug", unique: true
    t.index ["type"], name: "index_posts_on_type"
    t.index ["user_id"], name: "index_posts_on_user_id"
  end
~~~~~~~~




### Aggiorniamo la view

Implementiamo il menu a cascata per permettere di selezionare un tipo di articolo

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
  <div class="field">    
    <%= form.label :content_type %>
    <%= form.select(:content_type, Post.content_types.keys.map {|content_type| [content_type.titleize,content_type]}) %>
  </div>
~~~~~~~~




### Rendere il menu a cascada multilingua (Enum with i18n)

Per impostare la lingua italiana lavoriamo nei files yaml. Istintivamente ci verrebbe da inserirli in questo modo:


{title=".../config/locales/it.yml", lang=yaml, line-numbers=on, starting-line-number=7}
~~~~~~~~
  activerecord:
    models:
      post: "articolo"
    attributes:
      post:
        content_type:
          image: "immagine" 
          video_youtube: "filmato YouTube" 
          video_vimeo: "filmato Vimeo"
          audio: "audio"
~~~~~~~~

Ma in questo caso è necessario definirlo nella stessa gerarchia del modello nella seguente forma:

{title=".../config/locales/it.yml", lang=yaml, line-numbers=on, starting-line-number=7}
~~~~~~~~
  activerecord:
    models:
      post: "articolo"
    attributes:
      post:
        content_type: "tipologia"
      post/content_type:
        image: "immagine" 
        video_youtube: "filmato YouTube" 
        video_vimeo: "filmato Vimeo"
        audio: "audio"
~~~~~~~~

Con questa struttura possiamo usare i metodi:

* Model.model_name.human 
* Model.human_attribute_name("attribute")
* Model.human_attribute_name("attribute.nested_attribute")

per cercare in modo trasparente le traduzioni per il modello e i nomi degli attributi. Nel caso in cui sia necessario accedere ad attributi nidificati all'interno di un determinato modello, è necessario nidificarli sotto modello / attributo a livello di modello del file di traduzione.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
-> Post.model_name.human
-> Post.human_attribute_name("content_type")
-> Post.human_attribute_name("content_type.image")
-> Post.human_attribute_name("content_type.video_youtube")


2.4.1 :001 > Post.model_name.human
 => "articolo" 
2.4.1 :002 > Post.human_attribute_name(:content_type)
 => "tipologia"
2.4.1 :003 > Post.human_attribute_name("content_type.image")
 => "immagine" 
2.4.1 :004 > Post.human_attribute_name("content_type.video_youtube")
 => "video YouTube"
~~~~~~~~

Vediamo come gestire la traduzione

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
-> Post.content_types
-> Post.content_types.map
-> Post.content_types.map{ |k,v| [k, Post.human_attribute_name("content_type.#{k}")]}
-> Post.content_types.map{ |k,v| [k, Post.human_attribute_name("content_type.#{k}")]}.to_h

2.4.1 :013 > Post.content_types
 => {"image"=>0, "video_youtube"=>1, "video_vimeo"=>2, "audio"=>3} 
2.4.1 :014 > Post.content_types.map
 => #<Enumerator: {"image"=>0, "video_youtube"=>1, "video_vimeo"=>2, "audio"=>3}:map> 
2.4.1 :015 > Post.content_types.map{ |k,v| [k, Post.human_attribute_name("type.#{k}")]}
 => [["image", "immagine"], ["video_youtube", "video YouTube"], ["video_vimeo", "video Vimeo"], ["audio", "audio"]] 
 2.4.1 :016 > Post.content_types.map{ |k,v| [k, Post.human_attribute_name("type.#{k}")]}.to_h
 => {"image"=>"immagine", "video_youtube"=>"video YouTube", "video_vimeo"=>"video Vimeo", "audio"=>"audio"} 
~~~~~~~~

I> al posto di xxx.to_h si poteva usare Hash[xxx]
I>
I> quindi avremmo avuto Hash[Post.content_types.map{ |k,v| [k, Post.human_attribute_name("content_type.#{k}")]}]

Ora che conosciamo la definizione e come accedervi possiamo inserirli nel view

al posto di 

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
  <div class="field">    
    <%= form.label :content_type %>
    <%= form.select(:content_type, Post.content_types.keys.map {|content_type| [content_type.titleize, content_type]}) %>
  </div>
~~~~~~~~
    
possiamo avere

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
  <div class="field">    
    <%= form.label :content_type %>
    <%= form.select(:content_type, Post.content_types.keys.map {|content_type| [Post.human_attribute_name("content_type.#{content_type}"), content_type]}) %>
  </div>
~~~~~~~~

oppure visualizzarli come radio_buttons

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
  <div class="field">    
    <%= form.label :content_type %>
    <%= form.collection_radio_buttons :content_type, Hash[Post.content_types.map { |k,v| [k, Post.human_attribute_name("content_type.#{k}")] }], :first, :second %>
  </div>
~~~~~~~~

volendo si può creare un helper

{title=".../app/helpers/posts_helper.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
module PostsHelper
  def h_human_attribute_types
    Hash[Post.content_types.map { |k,v| [k, Post.human_attribute_name("content_type.#{k}")] }]
  end
end
~~~~~~~~

in modo da avere un view più "dry"

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=12}
~~~~~~~~
  <div class="field">    
    <%= form.label :content_type %>
    <%= form.collection_radio_buttons :content_type, h_human_attribute_content_types, :first, :second %>
  </div>
~~~~~~~~

Un altro modo è quello di creare una variabile virtuale nel Model.



## Implementiamo nel Model

{title=".../models/post.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~

(vedi virtual attribute con get_read, get_write ....)

  Post.content_types.map{ |k,v| [k, Post.human_attribute_name("content_type.#{k}")]}.to_h
~~~~~~~~

  # def self.human_attribute_enum_value(attr_name, value)
  #   human_attribute_name("#{attr_name}.#{value}")
  # end

  # def human_attribute_enum(attr_name)
  #   self.class.human_attribute_enum_value(attr_name, self[attr_name])
  # end
