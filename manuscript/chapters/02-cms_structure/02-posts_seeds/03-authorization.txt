# Implementiamo le autorizzazioni per posts

Usiamo il seguente schema per le autorizzazioni

Legenda:
 * per "records" si intendono gli "articoli" (posts)
 * per "propri records" si intendono gli "articoli di cui l'utente è proprietario". Ossia dove ha una relazione uno-a-molti.

index
 * Utente non loggato           : autorizzato su tutti i records
 * Utente con ruolo "user"      : autorizzato su tutti i records
 * Utente con ruolo "author"    : autorizzato su tutti i records
 * Utente con ruolo "moderator" : autorizzato su tutti i records
 * Utente con ruolo "admin"     : autorizzato su tutti i records

show
 * Utente non loggato           : NON autorizzato su tutti i records
 * Utente con ruolo "user"      : autorizzato su tutti i records
 * Utente con ruolo "author"    : autorizzato su tutti i records
 * Utente con ruolo "moderator" : autorizzato su tutti i records
 * Utente con ruolo "admin"     : autorizzato su tutti i records

new/create
 * Utente non loggato           : NON autorizzato su tutti i records
 * Utente con ruolo "user"      : NON autorizzato su tutti i records
 * Utente con ruolo "author"    : autorizzato SOLO sui propri records
 * Utente con ruolo "moderator" : autorizzato SOLO sui propri records
 * Utente con ruolo "admin"     : autorizzato SOLO sui propri records


edit/update
 * Utente non loggato           : NON autorizzato su tutti i records
 * Utente con ruolo "user"      : NON autorizzato su tutti i records
 * Utente con ruolo "author"    : autorizzato SOLO sui propri records
 * Utente con ruolo "moderator" : autorizzato SOLO sui propri records
 * Utente con ruolo "admin"     : autorizzato su tutti i records

destroy
 * Utente non loggato           : NON autorizzato su tutti i records
 * Utente con ruolo "user"      : NON autorizzato su tutti i records
 * Utente con ruolo "author"    : autorizzato SOLO sui propri records
 * Utente con ruolo "moderator" : autorizzato su tutti i records
 * Utente con ruolo "admin"     : autorizzato su tutti i records





## Apriamo il branch "Authorization Post"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ap
~~~~~~~~




## Aggiungiamo policy per Post ed implementiamo le policies per tutte le azioni

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g pundit:policy Post
~~~~~~~~

{id="02-02-03_01", title=".../app/policies/post_policy.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  def index?
    if @user.present?
      case @user.role
      when 'user'
        true
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      true
    end
  end

  def show?
    if @user.present?
      case @user.role
      when 'user'
        true
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
  
  def create?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
  
  def update?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        @user.id == @record.user_id
      when 'moderator'
        @user.id == @record.user_id
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end

  def destroy?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        @user.id == @record.user_id
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
~~~~~~~~

[Codice 01](#02-02-03_01all)





## Implementiamo nel controller

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=6}
~~~~~~~~
  def index
    @posts = Post.all
    authorize @posts
~~~~~~~~

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=17}
~~~~~~~~
  def new
    @post = Post.new
    authorize @post
~~~~~~~~

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=28}
~~~~~~~~
  def create
    @post = Post.new(post_params)
    authorize @post
~~~~~~~~

Per le azioni [:show, :edit, :update, :destroy], che chiamano la funzione "set_user" con il before_action, inserisco l'autorizzazione direttamente sulla funzione "set_user"

{id="02-02-03_02", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=71}
~~~~~~~~
    def set_post
      @post = Post.find(params[:id])
      authorize @post
~~~~~~~~

[Codice 02](#02-02-03_02all)




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser all'URL:

* https://mycloud9path.amazonaws.com/posts

e ci logghiamo come Ann che è amministratore, ed impostiamo i seguenti ruoli ai vari utenti:

- Bob    : author
- Carl   : moderator
- Elvis  : user

e facciamo le prove di autorizzazione andando all'URL:

* https://mycloud9path.amazonaws.com/posts




## aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add pundit authorization on all actions of post"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ap:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ap
$ git branch -d ap
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-02-03_01)

{id="02-02-03_01all", title=".../app/policies/post_policy.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class PostPolicy < ApplicationPolicy
  
  def index?
    if @user.present?
      case @user.role
      when 'user'
        true
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      true
    end
  end

  def show?
    if @user.present?
      case @user.role
      when 'user'
        true
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
  
  def create?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        true
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
  
  def update?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        @user.id == @record.user_id
      when 'moderator'
        @user.id == @record.user_id
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end

  def destroy?
    if @user.present?
      case @user.role
      when 'user'
        false
      when 'author'
        @user.id == @record.user_id
      when 'moderator'
        true
      when 'admin'
        true
      else
        false #se arrivo qui c'è un errore quindi non autorizzo
      end
    else
      false
    end
  end
    
  class Scope < Scope
    def resolve
      scope.all
    end
  end
end
~~~~~~~~




[Codice 02](#02-02-03_02)

{id="02-02-03_02all", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class PostsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_post, only: [:show, :edit, :update, :destroy]

  # GET /posts
  # GET /posts.json
  def index
    @posts = Post.all
    authorize @posts
  end

  # GET /posts/1
  # GET /posts/1.json
  def show
  end

  # GET /posts/new
  def new
    #@post = Post.new
    @post = current_user.posts.new
    authorize @post
  end

  # GET /posts/1/edit
  def edit
  end

  # POST /posts
  # POST /posts.json
  def create
    @post = Post.new(post_params)
    authorize @post

    respond_to do |format|
      if @post.save
        format.html { redirect_to @post, notice: 'Post was successfully created.' }
        format.json { render :show, status: :created, location: @post }
      else
        format.html { render :new }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /posts/1
  # PATCH/PUT /posts/1.json
  def update
    respond_to do |format|
      if @post.update(post_params)
        format.html { redirect_to @post, notice: 'Post was successfully updated.' }
        format.json { render :show, status: :ok, location: @post }
      else
        format.html { render :edit }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /posts/1
  # DELETE /posts/1.json
  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to posts_url, notice: 'Post was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.friendly.find(params[:id])
      authorize @post
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :type, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id)
    end
end
~~~~~~~~
