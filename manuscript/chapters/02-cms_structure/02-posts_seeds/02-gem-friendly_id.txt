# Friendly_id gem - Slug dello id

Questa gemma mette una frase che descriva meglio al posto del numero per l'id. In gergo fa lo "slug" dello "id".
FriendlyId is the “Swiss Army bulldozer” of slugging and permalink plugins for ActiveRecord. It allows you to create pretty URL’s and work with human-friendly strings as if they were numeric ids for ActiveRecord models.




## Apriamo il branch "friendly_id"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b fi
~~~~~~~~




## installiamo la gemma friendly_id

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/friendly_id)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/norman/friendly_id)

{id="02-02-02_01", title=".../Gemfile", lang=ruby, line-numbers=on, starting-line-number=53}
~~~~~~~~
# slugging and permalink for Active Record. For creating human-friendly strings URLs and use as if they were numeric ids.
gem 'friendly_id', '~> 5.2', '>= 5.2.5'
~~~~~~~~

[Codice 01](#02-02-02_01all)

Eseguiamo l'installazione della gemma con bundle

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Lanciamo lo script di installazione di friendly_id

lanciamo lo script di installazione

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate friendly_id


ec2-user:~/environment/myapp (fi) $ rails generate friendly_id
Running via Spring preloader in process 4574
      create  db/migrate/20190121105655_create_friendly_id_slugs.rb
      create  config/initializers/friendly_id.rb
~~~~~~~~

Questo ci crea un file di migrate ed un file di inizializzazione.


Curiosità sul migrate

Lo script non crea direttamente un migrate con la versione di rails esplicitata "[5.2.]" come ci aspetteremmo:

{title=".../db/migrate/xxx_create_friendly_id_slugs.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateFriendlyIdSlugs < ActiveRecord::Migration[5.2]
~~~~~~~~

Per mantenere la retrocompatibilità con le varie versioni di rails invece di esprimere direttamente la versione nella definizione della classe, hanno preferito mettere del codice iniziale che imposta la variabile "MIGRATION_CLASS":

{id="02-02-02_02", title=".../db/migrate/xxx_create_friendly_id_slugs.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
MIGRATION_CLASS =
  if ActiveRecord::VERSION::MAJOR >= 5
    ActiveRecord::Migration["#{ActiveRecord::VERSION::MAJOR}.#{ActiveRecord::VERSION::MINOR}"]
  else
    ActiveRecord::Migration
  end

class CreateFriendlyIdSlugs < MIGRATION_CLASS
~~~~~~~~

[Codice 02](#02-02-02_02all)


eseguiamo il migrate

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Aggiungiamo **slug:string:uniq** alla tabella posts

Per usare la gemma friendly_id dobbiamo aggiungere alla nostra tabella, la colonna "slug" di tipo stringa e con indice univoco.
Potevamo aggiungerla subito al comando dello scaffold "$ rails g scaffold Post title:string ... slug:string:uniq" ma aggiungerla dopo è didatticamente più interessante.
Il campo slug è usato da friendly_id ed è una stringa univoca usata per ritrovare il post.id dall'URL human-readable. Creiamo un nuovo migration in cui aggiungiamo la colonna slug:string e l'indice uniq.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddSlugUniqToPosts slug:string:uniq
~~~~~~~~

questo crea il migrate:

{id="02-02-02_03", title=".../db/migrate/xxx_add_slug_uniq_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
    add_column :posts, :slug, :string
    add_index :posts, :slug, unique: true
~~~~~~~~

[Codice 03](#02-02-02_03all)

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Implementiamo il model per friendly_id

Come richersto da friendly_id inseriamo due linee di codice nel nostro model per dire che l'URL "human-readable" è basato sul campo "title". 

{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=14}
~~~~~~~~
  # == Extensions ===========================================================

  extend FriendlyId
  
  # == Attributes ===========================================================

  friendly_id :title, use: :slugged
~~~~~~~~

Inoltre implementiamo/definiamo un metodo per aggiornare lo slug in automatico ogni volta che cambiamo il titolo

{id="02-02-02_04", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  # == Instance Methods =====================================================

  def should_generate_new_friendly_id?
    title_changed?
  end
~~~~~~~~

[Codice 04](#02-02-02_04all)

* il codice "should_generate_new_friendly_id?" è della gemma friendly_id. 
* il codice "title_changed?" è di Rails.




## Implementiamo friendly_id nel controller degli articoli

nel metodo "set_post" ricerchiamo tramite ":id" ma in modo "friendly" ^_^

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=68}
~~~~~~~~
    def set_post
      @post = Post.friendly.find(params[:id])
    end
~~~~~~~~




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamolo sul browser all'URL:

* https://mycloud9path.amazonaws.com/posts

Creiamo nuovo post (senza riempire il campo slug) e su submit ottengo il nuovo post con URL human-readable ed il campo slug automaticamente riempito. Se faccio edit, cambio il titolo e rifaccio submit, ottengo nuovo URL ed automaticamente nuovo slug.
Per gli articoli già inseriti basta modificare un poco il nome del titolo e gli verrà applicato lo "slug" e quindi sull'URL si avrà il titolo dell'articolo invece del numero identificativo "id".




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Implement friendly_id gem"
~~~~~~~~




## Se avessimo inserito lo "slug" in fase di scaffold...

Se avessimo inserito lo "slug" in fase di scaffold adesso avremmo dovuto pulire un po' il codice: 

nel form non ci sarebbe servito il campo slug perché viene gestito automaticamente. Avremmo dovuto eliminare le linee di codice corrispondenti.

{title=".../app/views/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=29}
~~~~~~~~
  <div class="field">
    <%= form.label :slug %>
    <%= form.text_field :slug, id: :post_slug %>
  </div>
~~~~~~~~

nel posts_controller non ci serve autorizzare il passaggio del parametro slug attraverso mass-assignment quindi lo avremmo dovuto togliere.

{title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=66}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :body, :description)
    end
~~~~~~~~

Avremmo salvato su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Clean up a little"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku fi:master
$ heroku run rails db:migrate
~~~~~~~~




## Popoliamo manualmente

Editiamo i due articoli (posts) e cambiamo leggermente il titolo. Una volta salvato possiamo vedere friendly_id in azione con lo slug. Ossia nell'url non ci sarà più il numero ad indicare l'articolo ma al suo posto apparirà il titolo dell'articolo, opportunamente formattato per l'url.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge fi
$ git branch -d fi
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-02-02_01)

{id="02-02-02_01all", title=".../Gemfile", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '2.4.1'

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 5.2.1', '>= 5.2.1.1'
# Use postgresql as the database for Active Record
gem 'pg', '>= 0.18', '< 2.0'
# Use Puma as the app server
gem 'puma', '~> 3.11'
# Use SCSS for stylesheets
gem 'sass-rails', '~> 5.0'
# Use Uglifier as compressor for JavaScript assets
gem 'uglifier', '>= 1.3.0'
# See https://github.com/rails/execjs#readme for more supported runtimes
# gem 'mini_racer', platforms: :ruby

# Use CoffeeScript for .coffee assets and views
gem 'coffee-rails', '~> 4.2'
# Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
gem 'turbolinks', '~> 5'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
gem 'jbuilder', '~> 2.5'
# Use Redis adapter to run Action Cable in production
# gem 'redis', '~> 4.0'
# Use ActiveModel has_secure_password
# gem 'bcrypt', '~> 3.1.7'

# Use ActiveStorage variant
gem 'mini_magick', '~> 4.8'

# API clients for AWS S3 services. Comunicazione con Amazon Web Service S3 per ActiveStorage
gem "aws-sdk-s3", require: false

# Use Capistrano for deployment
# gem 'capistrano-rails', group: :development

# Reduces boot times through caching; required in config/boot.rb
gem 'bootsnap', '>= 1.1.0', require: false

# Flexible authentication solution for Rails with Warden 
gem 'devise', '~> 4.5'

# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0'

# The most popular HTML, CSS, and JavaScript framework. http://getbootstrap.com
gem 'bootstrap', '~> 4.2', '>= 4.2.1'
# Use jquery as the JavaScript library
gem 'jquery-rails'

# slugging and permalink for Active Record. For creating human-friendly strings URLs and use as if they were numeric ids.
gem 'friendly_id', '~> 5.2', '>= 5.2.5'

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
end

group :test do
  # Adds support for Capybara system testing and selenium driver
  gem 'capybara', '>= 2.15'
  gem 'selenium-webdriver'
  # Easy installation and use of chromedriver to run system tests with Chrome
  gem 'chromedriver-helper'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
~~~~~~~~




[Codice 02](#02-02-02_02)

{id="02-02-02_02all", title=".../db/migrate/xxx_create_friendly_id_slugs.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
MIGRATION_CLASS =
  if ActiveRecord::VERSION::MAJOR >= 5
    ActiveRecord::Migration["#{ActiveRecord::VERSION::MAJOR}.#{ActiveRecord::VERSION::MINOR}"]
  else
    ActiveRecord::Migration
  end

class CreateFriendlyIdSlugs < MIGRATION_CLASS
  def change
    create_table :friendly_id_slugs do |t|
      t.string   :slug,           :null => false
      t.integer  :sluggable_id,   :null => false
      t.string   :sluggable_type, :limit => 50
      t.string   :scope
      t.datetime :created_at
    end
    add_index :friendly_id_slugs, [:sluggable_type, :sluggable_id]
    add_index :friendly_id_slugs, [:slug, :sluggable_type], length: { slug: 140, sluggable_type: 50 }
    add_index :friendly_id_slugs, [:slug, :sluggable_type, :scope], length: { slug: 70, sluggable_type: 50, scope: 70 }, unique: true
  end
end
~~~~~~~~




[Codice 03](#02-02-02_03)

{id="02-02-02_03all", title=".../db/migrate/xxx_add_slug_uniq_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddSlugUniqToPosts < ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :slug, :string
    add_index :posts, :slug, unique: true
  end
end
~~~~~~~~




[Codice 04](#02-02-02_04)

{id="02-02-02_04all", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Post < ApplicationRecord
  # == Constants ============================================================

  # == Attributes ===========================================================
  
  # == Extensions ===========================================================

  ## friendly_id
  extend FriendlyId
  friendly_id :title, use: :slugged

  # == Relationships ========================================================

  belongs_to :user

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
  
  def should_generate_new_friendly_id?
    title_changed?
  end
end
~~~~~~~~
