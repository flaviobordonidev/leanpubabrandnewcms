# Nuova app Rails 5 utilizzando Cloud9 workspace




## Che cos'è Cloud9

Cloud9 è un ambiente di sviluppo sul cloud. Ruby on rails è standardizzato per l’ambiente di sviluppo cloud9. L’ambiente di lavoro cloud9 si presenta pre-configurato con la maggior parte del software necessario per lo sviluppo professionale in Rails e include Ruby, RubyGems e Git. La Cloud IDE include anche tre componenti essenziali per sviluppare applicazioni web: un editor di testo, un navigatore del filesystem e un terminale per la riga di comando. Cloud9 consente agli sviluppatori di collaborare tra loro in team con caratteristiche che amplificano il supporto di ogni sviluppatore, anche real time. Inoltre garantisce la possibilità di verificare l’andamento dello sviluppo con anteprime  in tempo reale e test di compatibilità dei browser. Cloud9 usa per i suoi workspaces Docker ed è osteggiato su Google Compute Engine. Docker è un progetto open-source che automatizza lo sviluppo di applicazioni all’interno di contenitori software. I contenitori di Docker hanno parti di software in un completo filesystem che prevedono l’uso di tutto ciò che occorre per lo sviluppo e il deployment di una web application: codice, runtime, tools di sistema, librerie di sistema. Docker fornisce un addizionale layer astratto dall’hardware del sistema operativo virtualizzato su Linux.




## Nuovo workspace su Cloud9

Su cloud9 non partiamo dal workspace con template Rails precaricato perché c'è una versione rails più vecchia e non ha postgreSQL presettato. Quindi iniziamo con un workspace "blank" ed installiamo tutto rails.

* create a new workspace
* Workspace name    : rebisworld1
* Description       : gioco basato sul frontend Canvas
* Hosted workspace  : Public
* Choose a template : Blank

![fig. 1](images/beginning/new_app/c9_create_new_workspace.png)

Il file README.md lo lasciamo stare così com'è perché il readme di nostro interesse starà nella cartella dell'applicativo elisinfo




## Installiamo Rails 5

In produzione Heroku utilizza postgreSQL quindi lo installiamo anche localmente.
Possiamo gestire postgreSQL localmente nell'ambiente di sviluppo e test perché su cloud9 è già preinstallato postgreSQL e dobbiamo solo farlo partire. Un'alternativa era quella di caricare la gemma "pg" solo per l'ambiente di produzione. Ma se possibile è preferibile usare nell'ambiente di sviluppo le stesse risorse usate in produzione.

Risorse web:

* [Michael Hartl - Rails Tutorial 1.2.2 Installing Rails](https://www.railstutorial.org/book/beginning)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd ~/workspace
$ gem install rails -v 5.1.4
~~~~~~~~




## Creiamo l'applicazione

Una volta installato Rails passiamo a creare l'applicazione

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd ~/workspace
$ rails _5.1.4_ new rebisworld --database=postgresql
~~~~~~~~




## Apriamo l'applicazione localmente

Per aprire la nuova applicazione entriamo nella cartella elisinfo5 e facciamo partire il web server

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ cd rebisworld
$ rails s -b $IP -p $PORT
~~~~~~~~

su cloud9 andiamo sul link "Share" in alto a destra e clicchiamo sul link di "application" per aprire l'applicazione.

![Share link](images/beginning/new_app/c9_share_link.png)

![application: link](images/beginning/new_app/c9_application_link.png)


I> se stiamo lavorando su un workspace "shared" non avremo il link "Share" in alto a destra. Per capire quale è l'URL da mettere sul browser dobbiamo fare **<<nome del workspace>>-<<nomeutente>>.c9users.io**
I>
I> Nel nostro caso l'url è https://rebisworld-flaviobordonidev.c9users.io/

L'applicazione è pronta. Ci manca ancora la connessione a postgreSQL.






Abbiamo un errore causato da postgreSQL che non è attivo sul nostro ambiente.

![errore di connessione](images/beginning/new_app/web_error.png)

lo risolviamo nel capitolo 3 perché la prima cosa da fare dopo la creazione di una nuova applicazione è implementare Git. 

