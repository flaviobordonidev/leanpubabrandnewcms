# Ricerca su pagina di selezione entità (search)

implementiamo il search. Questa sarà un'ulteriore query che concateneremo a quella della pagina chiamante (al momento **for_homepage**).




## Apriamo il branch "Select Related Search"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b srs
~~~~~~~~




## Implementiamo la ricerca

Creiamo lo ** scope :search ** nel model per la query di ricerca

{title=".../app/models/select_related.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  scope :search, -> (query) {with_translations(I18n.locale).where("name ILIKE ?", "%#{query.strip}%")}
~~~~~~~~

scope   : permette di usare la query nel controller concatenando 
:search : nome della query da usare nel controller in catena (es: SelectRelated.search)
->      : nuovo modo di esprimere il lambda
(query) : nome della variabile che contiene il parametro da passare alla query. Posso scrivere qualsiasi nome
with_translations(I18n.locale). : metodo introdotto dalla gemma globalize per effettuare la ricerca nella lingua selezionata
where(...) : accetta la query
"%#{query.strip}%" : invece di passare il solo parametro tolgo eventuali spazi avanti ed indietro con lo **.strip** ed aggiungo i caratteri jolly **%** per estendere la ricerca. Senza il parametro .strip avevo problema con i nomi completi. Ad esempio se cercavo "Flavio Bordoni" non mi trovava nulla.

I> http://guides.rubyonrails.org/active_record_querying.html#scopes
I>
I>  scope :search, lambda {|query| with_translations(I18n.locale).where(["name ILIKE ? ", "%#{query}%"])}
I>
I>  è equivalente a: 
I>
I>  scope :search, -> (query) {with_translations(I18n.locale).where(["name ILIKE ?", "%#{query}%"])}
I>
I> il ** lambda ** può essere sostituito da "->"
I>
I> esempio old style ** scope :find_lazy, lambda {|id| where(:id => id)} **
I>
I> esempio new style: ** scope :find_lazy, -> (id) { where(id: id)} **
I> 
I> To support associations: ** scope :find_lazy, -> (object) { where(object_id: object.id) } **
I>
I> scope :in_daterange, ->(start_date, end_date) { where(created_at: start_date.to_date.beginning_of_day..end_date.to_date.end_of_day) }


informiamo il controller di usare lo "scope search:" [01:](#code-companies_people-select_relateds_search-01)

{title=".../app/controllers/select_relateds_controller.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
@select_relateds = SelectRelated.for_homepage.search(params[:search])
~~~~~~~~

 
verifichiamo che funziona aggiungendo direttamente sull'url un valore da cercare ( es: **search=pers**)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?search=e
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?locale=en&search=e
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?locale=it&search=e
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?locale=en&search=ople
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds?locale=it&search=ople
~~~~~~~~




## Implementiamo il form_search sul view.

Abbiamo già attivo il partial related_form_search

{title=".../app/views/select_relateds/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=29}
~~~~~~~~
<%= render 'related_form_search' %>
~~~~~~~~

non ci resta che implementarlo. Creaiamo un form che usa il metodo "get" come fanno i links. E non usa il metodo "post", che è il metodo di default per i forms. Questo ci permette di prendere il parametro **:search** passato dal text_field. 

{title=".../app/views/select_relateds/_related_form_search.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_tag "", method: "get", role: "search", class: 'bottom-pad' do %>

  <div class="input-group left-pad">
    <%= text_field_tag :search, params[:search], class: "form-control", placeholder: t("select_relateds.index.search") %>
    <div class="input-group-btn right-pad">
      <%= content_tag :button, type: "submit", class: "btn btn-primary" do %>
        <span class= "glyphicon glyphicon-search"></span>
      <% end %>      
    </div><!-- /input-group-btn -->
  </div><!-- /input-group -->

<% end %>
~~~~~~~~

Facendo il submit viene creato il params[:search] usando l'id del text_field_tag. Questo è creato dal codice ** text_field_tag :search **. Il secondo parametro è il valore che viene inserito nel text_field. Noi riprendiamo lo stesso valore params[:search] inviato con il submit. Questo ci evita che si svuoti il campo dopo il submit.
 
verifichiamo che funziona tutto 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io/select_relateds
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add search"
~~~~~~~~




## Aggiungiamo l'ordinamento crescente per nome

Basta aggiungere sul controller la funzione **.order()** in catena alle due queries **for_homepage** e **search**.

{title=".../app/controllers/select_relateds_controller.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
@select_relateds = SelectRelated.for_homepage.search(params[:search]).order('name ASC')
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add ascending sort by name"
~~~~~~~~



## Generalizziamo il codice per passare tutti i parametri sull'URL

mi ero scordato di mettere questa parte. Quando rivedi il libro verifica se è il momento opportuno per questa generalizzazione.

Non potendo usare l'helper h_params_path su un form, ne simulo il comportamento creando vari campi nascosti. Inoltre metto il tutto su views/application per renderlo accessibile da tutta l'applicazione.

{title=".../app/views/select_relateds/_related_form_search.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_tag "", method: "get", role: "search", class: 'bottom-pad' do %>

  <!-- # simulo l'helper h_params_path con page=1 perché torno alla prima pagina dopo una ricerca -->
  <%= hidden_field_tag(:locale, params[:locale]) %>
  <%= hidden_field_tag(:last_front_controller, params[:last_front_controller]) %>
  <%= hidden_field_tag(:last_front_action, params[:last_front_action]) %>
  <%= hidden_field_tag(:last_front_id, params[:last_front_id]) %>  
  <%= hidden_field_tag(:last_front_related, params[:last_front_related]) %>  
  <%= hidden_field_tag(:last_front_page, params[:last_front_page]) %>  
  <%= hidden_field_tag(:last_front_search, params[:last_front_search]) %>  
  <%= hidden_field_tag(:last_rear_controller, params[:last_rear_controller]) %>
  <%= hidden_field_tag(:last_rear_action, params[:last_rear_action]) %>
  <%= hidden_field_tag(:last_rear_id, params[:last_rear_id]) %>
  <%= hidden_field_tag(:last_rear_related, params[:last_rear_related]) %>
  <%= hidden_field_tag(:last_rear_page, params[:last_rear_page]) %>
  <%= hidden_field_tag(:last_rear_search, params[:last_rear_search]) %>
  <%= hidden_field_tag(:related, params[:related]) %>
  <%= hidden_field_tag(:page, 1) %>
  <%= hidden_field_tag(:search, params[:search]) %>
  <%= hidden_field_tag(:tab_active, params[:tab_active]) %>

  <div class="input-group left-pad">
    <%= text_field_tag :search, params[:search], class: "form-control", placeholder: t("select_relateds.index.search") %>
    <div class="input-group-btn right-pad">
      <%= content_tag :button, type: "submit", class: "btn btn-primary" do %>
        <span class= "glyphicon glyphicon-search"></span>
      <% end %>      
    </div><!-- /input-group-btn -->
  </div><!-- /input-group -->

<% end %>
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku srs:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge srs
$ git branch -d srs
~~~~~~~~
