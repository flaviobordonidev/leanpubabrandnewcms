# I fonts

Non ci resta che importare i fonts sull'asset_pipeline ed associare le chiamate nel views/st_homepage/index.html.erb




## Apriamo il branch "Import Canvas Fonts"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b icf
~~~~~~~~




## importiamo i fonts da Canvas nell'asset_pipeline

abbiamo già impostato la chiamata allo stylesheet dei fonts su views/st_index/index.html.erb.

{title=".../app/views/st_index/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=23}
~~~~~~~~
	<!-- <link rel="stylesheet" href="../css/font-icons.css" type="text/css" /> -->
	...
	<%= stylesheet_link_tag 'font-icons', media: 'all', 'data-turbolinks-track': 'reload' %>
~~~~~~~~

Ma non abbiamo ancora i files visualizzati. Andiamo ad aprire il file stylesheet font-icons.css e vediamo quali sono le sue dipendenze.
Vediamo che richiede i files contenuti nella sottocartella **fonts**

{title=".../app/assets/stylesheets/font-icons.css", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
	src:url('fonts/font-icons.eot');
	src:url('fonts/font-icons.eot') format('embedded-opentype'),
		url('fonts/font-icons.woff') format('woff'),
		url('fonts/font-icons.ttf') format('truetype'),
		url('fonts/font-icons.svg') format('svg');
...
	src:url('fonts/lined-icons.eot');
	src:url('fonts/lined-icons.eot') format('embedded-opentype'),
		url('fonts/lined-icons.woff') format('woff'),
		url('fonts/lined-icons.ttf') format('truetype'),
		url('fonts/lined-icons.svg') format('svg');
...
~~~~~~~~

questa volta invece di rinominare tutti i files importandoli dal template Canvas copiamo tutta la sottocartella.
E' arrivato il momento di importare i fonts dal template Canvas nella nostra app Rails (da -> a).

* HTML/css/font/       ->  .../app/assets/stylesheets/

in locale questo funziona.




## Mi mancano ancora alcuni fonts

Sono rimasti dei quadrati senza fonts per quanto riguarda la class="icon-et-..."

{title=".../app/views/st_index/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=466}
~~~~~~~~
											<div class="fbox-icon">
												<a href="#"><i class="icon-et-mobile"></i></a>
											</div>
...
~~~~~~~~

questo perché questo ci mancano le dipendenze del set di fonts one-page/css/et-line.css che è dentro la sottocartella one-page.

{title=".../app/assets/stylesheets/et-line.css", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
	font-family: 'et-line';
	src:url('et-line/et-line.eot');
	src:url('et-line/et-line.eot?#iefix') format('embedded-opentype'),
		url('et-line/et-line.woff') format('woff'),
		url('et-line/et-line.ttf') format('truetype'),
		url('et-line/et-line.svg#et-line') format('svg');
~~~~~~~~

Importiamo anche questi fonts dal template Canvas nella nostra app Rails (da -> a).

* HTML/one-page/css/et-line/       ->  .../app/assets/stylesheets/

in locale questo funziona.




## Implementiamo i fonts per Heroku


Cambiamo tutte le chiamate url(...) con l'helper rails font-url(...)

I> ATTENZIONE: assicurati di usare **.scss**

Se lasciamo font-icons.css riceveremo un errore in fase di precompile di heroku perché l'helper font-url(...) non è riconosciuto come un comando css valido. Per usarlo dobbiamo usare SASS/scss quindi rinominare il file:

* da font-icons.css
* a  font-icons.scss

{title=".../app/assets/stylesheets/css/font-icons.scss", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
	/*src:url('fonts/font-icons.eot');
	src:url('fonts/font-icons.eot') format('embedded-opentype'),
		url('fonts/font-icons.woff') format('woff'),
		url('fonts/font-icons.ttf') format('truetype'),
		url('fonts/font-icons.svg') format('svg');*/
	src:font-url('fonts/font-icons.eot');
	src:font-url('fonts/font-icons.eot') format('embedded-opentype'),
		font-url('fonts/font-icons.woff') format('woff'),
		font-url('fonts/font-icons.ttf') format('truetype'),
		font-url('fonts/font-icons.svg') format('svg');
~~~~~~~~


{title=".../app/assets/stylesheets/css/font-icons.scss", lang=ruby, line-numbers=on, starting-line-number=19}
~~~~~~~~
	/*src:url('fonts/lined-icons.eot');
	src:url('fonts/lined-icons.eot') format('embedded-opentype'),
		url('fonts/lined-icons.woff') format('woff'),
		url('fonts/lined-icons.ttf') format('truetype'),
		url('fonts/lined-icons.svg') format('svg');*/
	src:font-url('fonts/lined-icons.eot');
	src:font-url('fonts/lined-icons.eot') format('embedded-opentype'),
		font-url('fonts/lined-icons.woff') format('woff'),
		font-url('fonts/lined-icons.ttf') format('truetype'),
		font-url('fonts/lined-icons.svg') format('svg');
~~~~~~~~


{title=".../app/assets/stylesheets/css/font-icons.scss", lang=ruby, line-numbers=on, starting-line-number=35}
~~~~~~~~
	/*src:url('fonts/Simple-Line-Icons.eot');
	src:url('fonts/Simple-Line-Icons.eot?#iefix') format('embedded-opentype'),
		url('fonts/Simple-Line-Icons.woff') format('woff'),
		url('fonts/Simple-Line-Icons.ttf') format('truetype'),
		url('fonts/Simple-Line-Icons.svg#Simple-Line-Icons') format('svg');*/
	src:font-url('fonts/Simple-Line-Icons.eot');
	src:font-url('fonts/Simple-Line-Icons.eot?#iefix') format('embedded-opentype'),
		font-url('fonts/Simple-Line-Icons.woff') format('woff'),
		font-url('fonts/Simple-Line-Icons.ttf') format('truetype'),
		font-url('fonts/Simple-Line-Icons.svg#Simple-Line-Icons') format('svg');
~~~~~~~~


Implemetiamo anche il set di fonts one-page/css/et-line.css

rinominare il file:

* da et-line.css
* a  et-line.scss

{title=".../app/assets/stylesheets/et-line.scss", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
	/*src:url('et-line/et-line.eot');
	src:url('et-line/et-line.eot?#iefix') format('embedded-opentype'),
		url('et-line/et-line.woff') format('woff'),
		url('et-line/et-line.ttf') format('truetype'),
		url('et-line/et-line.svg#et-line') format('svg');*/
	src:font-url('et-line/et-line.eot');
	src:font-url('et-line/et-line.eot?#iefix') format('embedded-opentype'),
		font-url('et-line/et-line.woff') format('woff'),
		font-url('et-line/et-line.ttf') format('truetype'),
		font-url('et-line/et-line.svg#et-line') format('svg');
~~~~~~~~




## Vecchio approccio

In passato serviva precompilare manulmente manualmente l'asset pipeline per heroku per poi pubblicarlo

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ RAILS_ENV=production bundle exec rake assets:precompile
$ git push heroku icf:master
~~~~~~~~

ma oggi non è più necessario.

Altro approccio che si usava in passato era l'helper asset-url(...)

url('fonts/xxx') -> asset-url('xxx') <---- vecchio cambio che ha funzionato in passato (da riprovare)

Approfondimenti web:

*[custom font not working in heroku](http://stackoverflow.com/questions/21691846/custom-font-not-working-in-heroku)

Assets like fonts will work on development but not production if you are using regular old css to locate your assets rather than the asset pipeline helpers. Rails 4 added breaking changes to the asset pipeline to encourage people to use it properly, and not use the old css method of referencing assets.
To resolve this, you need to use the new asset pipeline helpers to point to the fingerprinted, cached versions of your fonts. Rather than url (which does not use the asset pipeline), you need to use font-url (which does use it). To do this, you may have to use Sass or embed ERB in your stylesheet.




## Publichiamo su Heroku


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "implement fonts-icons.scss and et-line.scss for heroku"
$ git push heroku icf:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge icf
$ git branch -d icf
~~~~~~~~
