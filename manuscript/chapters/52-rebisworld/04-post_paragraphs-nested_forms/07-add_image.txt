# Paragraph - inseriamo immagine con caption

Inseriamo le immagini nei nostri paragrafi


Risorse interne:

* 99-rails_references/active_storage/add_image-upload_file_aws




## Apriamo il branch "Paragraph Image"

{title="terminale", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pi
~~~~~~~~




## Attiviamo upload immagine per post

Implementiamo un campo in cui carichiamo le immagini per i nostri paragrafi usando "has_one_attached" di active_storage
Nel model nella sezione "# == Attributes ===", sottosezione "## ActiveStorage"

{id="02-06-01_01", title=".../app/models/post_paragraph.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  has_one_attached :image
~~~~~~~~

[Codice 01](#02-06-01_01all)




## Aggiorniamo il controller

Inseriamo il nuovo campo :image nella white-list del controller

{id="02-06-01_02", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=70}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :content_type, :video_youtube, :video_vimeo, :seocontent, :user_id, :main_image, :published, :published_at, :tag_list, :paraghraph_title1, :paragraph_content1, :paragraph_image1, :paragraph_title2, :paragraph_content2, :paragraph_title3, :paragraph_content3, :paragraph_title4, :paragraph_content4, :paragraph_image4, :paragraph_title5, :paragraph_content5, :paragraph_image5, :paragraph_image_label5, :paragraph_title6, :paragraph_content6, :paragraph_image6, :paragraph_image_label6, post_paragraphs_attributes: [:id, :title, :content, :_destroy, :pstyle, :list_position, :image])
    end
~~~~~~~~

[Codice 02](#02-06-01_02all)




## Implementiamo la view

{id="02-06-01_03", title=".../app/views/authors/posts/_paragraph_fields.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=39}
~~~~~~~~
    <div class="field">
      <%= form.label :image %>
      <br><img src="https://images.pexels.com/photos/634843/pexels-photo-634843.jpeg?auto=compress&cs=tinysrgb&dpr=1&fit=crop&h=200&w=200" alt="Immagine demo presa da pexels.com" width="100" height="100"><br>
      <%= form.file_field :image, class: "form-control-file" %>
    </div>
~~~~~~~~

[Codice 03](#02-06-01_03all)






* [Active Record Nested Attributes](https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html)








Per visualizzare l'immagine basta "image_tag paragraph.image" ma per sicurezza mettiamo anche un controllo

{id="02-06-01_04", title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
              <% @post.post_paragraphs.each do |paragraph| %>

<% if paragraph.image.attached? %>
  <%= image_tag paragraph.image %>
<% else %>
  <p>Nessuna immagine presente</p>
<% end %>
~~~~~~~~

[Codice 04](#02-06-01_04all)




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser all'URL:

* https://mycloud9path.amazonaws.com/authors/posts






## Miglioria su edit

visualizziamo l'immagine se è presente anche in fase di edit. In questo caso abbiamo un problema perché stiamo usando un form annidato.
Il trucco è usare " .object " nella variabile di fields_for; nel nostro caso " builder ".

{title=".../app/views/auhtors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
      <%= form.fields_for :post_paragraphs do |builder| %>
        <% if builder.object.image.attached? %>
          <%= image_tag builder.object.image %>
        <% else %>
          <p>Nessuna immagine presente</p>
        <% end %>

        <%= render "paragraph_fields", form: builder %>
~~~~~~~~

Questa miglioria non è ancora molto "user friendly" perché quando carichiamo una nuova immagine non è visualizzata immediatamente; resta la vecchia immagine. Per poter vedere la nuova immagine dobbiamo fare il submit del form.

Comunque passiamola all'interno del partial " paragraph_fields "

{title=".../app/views/auhtors/posts/_paragraph_fields.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
    <div class="field">
      <%= form.label :image %>
      <!--<br><img src="https://images.pexels.com/photos/634843/pexels-photo-634843.jpeg?auto=compress&cs=tinysrgb&dpr=1&fit=crop&h=200&w=200" alt="Immagine demo presa da pexels.com" width="100" height="100"><br>-->
      <% if form.object.image.attached? %>
        <%= image_tag form.object.image %>
      <% else %>
        <p>Nessuna immagine presente</p>
      <% end %>
      <%= form.file_field :image, class: "form-control-file" %>
    </div>
~~~~~~~~

in questo caso usiamo " form.object. " perché il partial lo abbiamo chiamato con " <%= render "paragraph_fields", form: builder %> "




## Ridimensioniamo l'immagine

Per ridimensionare l'immagine possiamo chiamare il " .variant(...) "

{id="02-06-01_05", title=".../app/views/authors/posts/_paragraph_fields.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
        <p><%= image_tag form.object.image.variant(resize: "100x100") %></p>
~~~~~~~~

[Codice 05](#02-06-01_05all)

Attenzione! per funzionare il " .variant " necessita di minimagic (già installato nei capitoli precedenti)




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/authors/posts




## salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add image on nested form post_paragraphs via ActiveStorage AWS S3"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pi:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pi
$ git branch -d pi
~~~~~~~~




## Facciamo un backup su Github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo

