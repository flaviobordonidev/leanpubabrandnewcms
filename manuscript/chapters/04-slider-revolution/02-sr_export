# Slider Revolution Export to HTML

Prendiamo la cartella "sr" con tutti i files creati con il comando "export to HTML" di Slider Revolution Stand Alone.




## Partiamo dal file slider.html

ci sono 2 files html: json_slider.html e slider.html
A noi serve il solo file "slider.html"

copiamolo nella nostra cartella example_static_pages insieme a page_a e page_b




## Aggiorniamo gli instradamenti


{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  get 'test_pages/slider'
~~~~~~~~

[cod. a](#beginning-04-slider_revolution-01ca-config-routes.rb)




## Il nuovo layout

creiamo un layout che chiamiamo "yield" perché dentro ha la sola riga <%= yield %> che permette di usare tutto il codice HTML della pagina chiamante.

{title=".../app/views/layouts/yield.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= yield %>
~~~~~~~~

[cod. b](#beginning-04-slider_revolution-01cb-views-layouts-yield.html.erb)



## Implementiamo nel controller
Nel nostro caso la pagina chiamante è slider.html.erb e per indicare che userà il layout personalizzato lo richiamiamo dentro l'azione nel controller.

{title=".../app/controllers/test_pages_controller.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
  def slider
    #applica un layout differente
    render layout: 'yield'
  end
~~~~~~~~

[cod. c](#beginning-04-slider_revolution-01cc-test_pages_controller.rb)




## Verifichiamo che funziona sul browser

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

Per verificarlo andiamo alla pagina **/test_pages/slider**
https://brandnewcms-flaviobordonidev.c9users.io/test_pages/slider

La pagina è tutta bianca perché ci mancano le chiamate javascripts per visualizzare il caricamento della pagina e togliere poi il bianco visualizzando la pagina risultante.
Possiamo verificare che il codice HTML è stato correttamente caricato facendo clic con il tasto destro del mouse e selezionando "visualizza sorgente di pagina".




## Attiviamo styleSheets

Attiviamo lo stylesheets per primo perché diverse funzioni javascript si aspettano di trovare determinato stile css per funzionare correttamente.


Per la parte stylesheets adattiamo il codice nella nostra pagina slider.html.erb per puntare all'asset_pipeline. Cambiamo:

* da  : <link rel="stylesheet" href=".../.../xxx.css" type="text/css" />
* a   : <%= stylesheet_link_tag 'xxx', media: 'all', 'data-turbolinks-track': 'reload' %>

Attenzione!
* non mettiamo l'estensione dei files
* non mettiamo il percorso alle varie sottocartelle perché metteremo tutti i files stylesheets nella stessa cartella nell'asset_pipeline


{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=25}
~~~~~~~~
		<!--<link rel="stylesheet" type="text/css" href="fonts/pe-icon-7-stroke/css/pe-icon-7-stroke.css">-->
		<%= stylesheet_link_tag "pe-icon-7-stroke", media: 'all', 'data-turbolinks-track': 'reload' %>
~~~~~~~~

{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=27}
~~~~~~~~
		<!--<link rel="stylesheet" type="text/css" href="fonts/font-awesome/css/font-awesome.css">-->
		<%= stylesheet_link_tag "font-awesome", media: 'all', 'data-turbolinks-track': 'reload' %>
~~~~~~~~



## Copiamo i files stylesheet nell'asset_pipeline

Importiamo i files nella nostra app Rails (da -> a). Seguiamo l'ordine delle chiamate sul file slider.html.erb. 

* .../fonts/pe-icon-7-stroke/css/pe-icon-7-stroke.css     ->  .../app/assets/stylesheets/ 
* .../fonts/font-awesome/css/font-awesome.css             ->  .../app/assets/stylesheets/




## Attiviamo javascripts

Per la parte JavaScripts adattiamo il codice nella nostra pagina slider.html.erb per puntare all'asset_pipeline. Cambiamo:

* da  : <script type="text/javascript" src=".../.../xxx.js"></script>
* a   : <%= javascript_include_tag "xxx", 'data-turbolinks-track' => true %>

Attenzione!
* non mettiamo l'estensione dei files
* non mettiamo il percorso alle varie sottocartelle perché metteremo tutti i files javascript nella stessa cartella nell'asset_pipeline


{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=17}
~~~~~~~~
		<!--<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.js"></script>-->
		<%= javascript_include_tag "https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.js", 'data-turbolinks-track' => true %>
~~~~~~~~

{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=43}
~~~~~~~~
		<!--<script type="text/javascript" src="js/jquery.themepunch.tools.min.js"></script>-->
		<%= javascript_include_tag "jquery.themepunch.tools.min", 'data-turbolinks-track' => true %>
~~~~~~~~

{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=45}
~~~~~~~~
		<!--<script type="text/javascript" src="js/jquery.themepunch.revolution.min.js"></script>-->
		<%= javascript_include_tag "jquery.themepunch.revolution.min", 'data-turbolinks-track' => true %>
~~~~~~~~

{title=".../app/views/test_pages/slider.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=50}
~~~~~~~~
		<!--<script type="text/javascript" src="js/extensions/revolution.extension.actions.min.js"></script>-->
		<%= javascript_include_tag "revolution.extension.actions.min", 'data-turbolinks-track' => true %>
~~~~~~~~




## Copiamo i files javascript nell'asset_pipeline

Importiamo i files nella nostra app Rails (da -> a). Seguiamo l'ordine delle chiamate sul file slider.html.erb. 

* .../js/jquery.js                                              ->  .../app/assets/javascripts/ (questo non lo uso perché ho già installato la gemma) 
* .../js/jquery.themepunch.tools.min.js                         ->  .../app/assets/javascripts/
* .../js/jquery.themepunch.revolution.min.js                    ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.actions.min.js         ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.carousel.min.js        ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.kenburn.min.js         ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.layeranimation.min.js  ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.migration.min.js       ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.navigation.min.js      ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.parallax.min.js        ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.slideanims.min.js      ->  .../app/assets/javascripts/
* .../js/extensions/revolution.extension.video.min.js           ->  .../app/assets/javascripts/

Non siamo ancora pronti. 
Nel nostro views/layouts/yield.html.erb non ci sono le chiamate all'asset_pipeline come nel layout di default application.

{title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=7}
~~~~~~~~
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
~~~~~~~~

Senza queste chiamate non accediamo ai files manifest dell'asset_pipeline (assets/stylesheets/application.css e assets/javascripts/application.js)

Se provassimo sul browser riceveremmo l'errore: 

  Sprockets::Rails::Helper::AssetNotPrecompiled




## Attiviamo le chiamate all'asset_pipeline

Invece di passare per i files manifest, aggiungiamo le nostre chiamate ai files direttamente nel precompile. 

Attenzione:
* In questo file mettiamo l'estensione dei files ".js"

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
    # precompile assets javascripts                                                             
    config.assets.precompile += ['jquery.themepunch.tools.min.js',
                                 'jquery.themepunch.revolution.min.js',
                                 'revolution.extension.actions.min.js',
                                 'revolution.extension.carousel.min.js',
                                 'revolution.extension.kenburn.min.js',
                                 'revolution.extension.layeranimation.min.js',
                                 'revolution.extension.migration.min.js',
                                 'revolution.extension.navigation.min.js',
                                 'revolution.extension.parallax.min.js',
                                 'revolution.extension.slideanims.min.js',
                                 'revolution.extension.video.min.js'
                                ]
~~~~~~~~

Così funziona ma non stiamo seguendo la convenzione Rails dell'asset_pipeline che prevede di passare per i files manifest. Quindi in seguito faremo un refactoring. Durante il refactoring sostituiremo le varie chiamate fatte sull'<head> di views/test_pages/slider ai files javascripts con la sola chiamata al file manifest assets/stylesheets/application.js e configureremo le chiamate nel file manifest invece di inserirle direttamente nel precompile.

Attenzione!
Modificando application.rb è necessario riavviare il server rails (rails s ...) per includere le modifiche.







verifichiamo che funziona tutto

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

Il postgresql start possiamo anche non eseguirlo perché al momento non usiamo il database.