# Login con Devise - views

Adesso che abbiamo tutto predisposto iniziamo ad incorporare l'autorizzazione nel template della nostra applicazione




## Aggiungiamo logout

Al momento usiamo il pulsante di logout lo mettiamo al posto di global_setting. [(codice: 01)](#code-login_authentication-login_devise_views-01)

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
~~~~~~~~
      <ol class="breadcrumb top-pad pull-right right-pad">
        <li>
          <%#= link_to "Sign Out", destroy_user_session_path, method: :delete %>
          
          <%= link_to destroy_user_session_path, method: :delete do %>
             <span class="glyphiconmy ico_logout"></span>
          <% end %>
        </li>
      </ol>
~~~~~~~~

Se lo proviamo verrà ricaricata la stessa pagina homepage/show perché è la pagina di root. La differenza è che apparirà il messaggio di corretto logout.
Nei prossimi capitoli sistemeremo meglio il comportamento.





## Attiviamo il passaggio 5 del template con anche il controller

E' arrivato il momento di effettuare il passaggio numero 5 che avevamo lasciato in sospeso.

https://github.com/plataformatec/devise

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails generate devise:views users
$ rails generate devise:controllers users
~~~~~~~~

Adesso abbiamo sia la sottocartella /app/views/users/ con tutte le views gestite da devise. Sia la sottocartella /app/controller/users/ con tutti i controllers gestiti da devise.
Modifichiamo le routes **devise_for :users** [(codice: 02)](#code-login_authentication-login_devise_views-02) indicando a devise di usare i nuovi controllers (e non quelli di default)

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=5}
~~~~~~~~
  devise_for :users, controllers: { sessions: 'users/sessions' }
~~~~~~~~

I> se avessimo fatto già il ** rails generate devise:views ** avremmo dovuto copiare le **views** da devise/sessions a users/sessions. Poiché il controller sarebbe stato  cambiato, non avrebbe usato le views di default in devise/sessions.




## Implementiamo la view di login

Dedichiamoci alla view. La view di login non usa il layout di default ma usa il layout "pages" per indicare di usare questo layout dobbiamo inserirlo nel controller. Ed è per questo che abbiamo usato ** rails generate devise:controllers users **. Infatti adesso abbiamo in chiaro il controller di devise che gestisce il sign_in/login sign_out/logout. E' il /app/controller/users/sessions_controller.rb

Indichiamo di usare il layout "login"  (.../app/views/layout/login.html.erb) al posto di quello di default (.../app/views/layout/application.html.erb):

{title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Users::SessionsController < Devise::SessionsController
# before_action :configure_sign_in_params, only: [:create]

  layout 'login'

  # GET /resource/sign_in
  # def new
  #   super
  # end

  # POST /resource/sign_in
  # def create
  #   super
  # end

  # DELETE /resource/sign_out
  # def destroy
  #   super
  # end

  # protected

  # If you have extra params to permit, append them to the sanitizer.
  # def configure_sign_in_params
  #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  # end
end
~~~~~~~~


Creiamo il layout "login"

{title=".../app/views/layout/login.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=8}
~~~~~~~~
<!DOCTYPE html>
<html>
<head>
  <title><%= content_for?(:title) ? yield(:title) : "Elisinfo" %></title>
  <meta name="description" content="<%= content_for?(:description) ? yield(:description) : "Elisinfo" %>">
  <%= csrf_meta_tags %>

  <%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
  <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
  <%= render 'layouts/workaround_ie' %>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  <%= render 'layouts/flash_messages' %>

  <%= yield %>
  
  <% if Rails.env.development? %>
      <div class='debug_layout'>
        <%= render 'layouts/debug' %>
      </div>
  <% end %>
</body>
</html>
~~~~~~~~

Al momento è identico al layout **application** ma con l'avanzare dello sviluppo dell'applicazione si differenzieranno.




## Implementiamo la pagina di Login

Abbiamo già definito il layout adesso lavoriamo direttamente sulla pagina.

{title=".../app/views/users/sessions/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=8}
~~~~~~~~
<div id="rear_mode" class="container-fluid rear_mode">

  <div class="row">
    <div class="col-xs-9 col-sm-10 col-lg-11">
      <ul class="nav nav-pills bottom-pad top-pad left-pad">
        <li class="<%= 'active' if params[:tab_active].nil? or params[:tab_active] == 'login' %>">
          <a href="#pane_login" data-toggle="tab"><span class="glyphiconmy ico_login"></span></a>
        </li>
      </ul>
    </div>
    <div class="col-xs-3 col-sm-2 col-lg-1">
      <%#= render 'mocks/global_settings/index/button_close' %>
    </div> <!-- /col -->
  </div> <!-- /row -->

  <div class="row">
    <div class="col-xs-12">
      <div class="tab-content">
        <div id="pane_login" class="tab-pane <%= 'active' if params[:tab_active] == nil or params[:tab_active] == 'login'  %>">
          <div class="text-center bottom-pad">
            <h4>Login</h4>
          </div>

          <%= form_for(resource, as: resource_name, url: session_path(resource_name), class: 'form-horizontal left-pad right-pad bottom-pad') do |f| %>
          
            <div class="form-group">
              <div class="field">
                <%= f.label :email, class: "control-label" %><br />
                <%= f.email_field :email, autofocus: true, class: "form-control" %>
                <span class="help-block"></span>
              </div>
            
              <div class="field">
                <%= f.label :password, class: "control-label" %><br />
                <%= f.password_field :password, autocomplete: "off", class: "form-control" %>
                <span class="help-block"></span>
              </div>
            </div> <!-- /form-group -->
            
            <% if devise_mapping.rememberable? -%>
              <div class="field">
                <%= f.check_box :remember_me %>
                <%= f.label :remember_me %>
              </div>
            <% end -%>
          
            <div class="actions">
              <%= f.submit "Log in", class: "btn btn-primary btn-block" %>
            </div>
          <% end %>
          
          <%= render "users/shared/links" %>
          
        </div>
      </div><!-- /.tab-content -->
    </div> <!-- /col -->
  </div> <!-- /row -->

</div> <!-- /rear_mode -->
~~~~~~~~




## lavoriamo sul view homepage

Visualizziamo in homepage l'utente che ha fatto login. Al momento visualizziamo la sua email. [(codice: 03)](#code-login_authentication-login_devise_views-03)

{title=".../app/views/homepage/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=25}
~~~~~~~~
      <p> utente attivo: <%= current_user.email if current_user.present? == true %> </p>
      <p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %> </p>
~~~~~~~~

la variabile **current_user** è generata tramite la gemma "devise" e contiene l'utente loggato. esempio: User.find(current_user.id)

verifichiamo che funziona tutto.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
https://elisinfo6-flaviobordonidev.c9users.io
https://elisinfo6-flaviobordonidev.c9users.io/users/1
https://elisinfo6-flaviobordonidev.c9users.io/users/sign_in
~~~~~~~~





## lavoriamo sul controller di homepage

{title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
class HomepageController < ApplicationController

  before_action :authenticate_user!
  
  def show
    # current_user is generated by the gem "devise" and contain the logged user. esempio: User.find(current_user.id)
    @user = current_user
  end
end
~~~~~~~~

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.

Se volessimo reindirizzare user show sull'homepage

{title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
get 'users/show', as: :user_root # creates user_root_path (default path after sign_in)
~~~~~~~~

ma al momento non ci interessa e quindi non lo facciamo.
verifichiamo che funziona tutto.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~



{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add login_devise"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ldi:master
$ heroku run rake db:migrate
~~~~~~~~




## Creiamo un utente da console remota su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
> u = User.new({email: 'flavio@example.com', password: 'password', password_confirmation: 'password'})
> u.save
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
> a = Author.new({email: 'flavio@test.abc', password: 'password', password_confirmation: 'password'})
> a.save
~~~~~~~~



## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ldi
$ git branch -d ldi
~~~~~~~~