# Refile

E' arrivato il momento di inserire delle immagini. Per far questo scelgo la gemma Refile. Questa "story" è sufficientemente grande per aprire un branch.

A> Come Editore loggato                               
A> 
A> Voglio poter mettere un'immagine nel mio post
A> 
A> Così che l'utente che visita il mio Blog vede l'immagine

Quindi mi apro il branch

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git pull origin master
$ git checkout -b refile_image
$ git push origin refile_image
~~~~~~~~


Refile è un moderno "file upload" per applicazioni Ruby. Refile è sviluppato dalla stessa persona che ha fatto carrierwave. E' più semplice e più veloce.



### Risorse web:
  * https://github.com/refile/refile
  * https://github.com/elabs/refile
  * http://www.plugingeek.com/categories/file-uploads-ruby
  * http://www.akitaonrails.com/2014/12/18/small-bites-direct-upload-para-s3-a-solucao-definitiva#.VKbA1CfrXfY


![This is the Image Caption](images/originals/rubygems_devise-01.png)

## installiamo refile

I> ATTENZIONE!
I>
I> Verifica sempre gli ultimi aggiornamenti sul readme.md di https://github.com/refile/refile

Aggiungiamo la "gem" di ruby:

[codice: application 06](#code-application-06)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=37}
~~~~~~~~
# File Upload
gem "refile", require: "refile/rails"
gem "refile-mini_magick"
~~~~~~~~

La gemma "mini_magick" ci aiuta con l'integrazione di refile su Rails e l'implementazione dell'elaborazione delle immagini. MiniMagick richiede ImageMagic installato. Per installarlo su Ubuntu basta eseguire:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo apt-get install imagemagick
~~~~~~~~


Nel mio caso era già installato...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
flavio@flubuntu:~/Sites/abnormal_is$ sudo apt-get install imagemagick
[sudo] password for flavio: 
Reading package lists... Done
Building dependency tree       
Reading state information... Done
imagemagick is already the newest version.
imagemagick set to manually installed.
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
~~~~~~~~


Eseguiamo l'installazione della gemma con bundle ed il refresh dell'ambiente rbenv (opzionale)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
$ rbenv rehash
~~~~~~~~


## Clean controller

Verifichiamo il controller e puliamo la parte json che al momento non utilizziamo.

[codice: posts controller 01](#code-posts-controller-01)

{title="controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class PostsController < ApplicationController
...
~~~~~~~~

Completata la pulizia...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "clean posts_controller"
~~~~~~~~




## Implementiamo le immagini su posts

Verificato che refile è installato Bob implementa il campo immagine per i suoi articoli (posts). 

Verifica la white list dello strong_prameters "def post_params". Lo scaffold si occupa anche dello strong-parameters sul controller ma mette sulla white list "def post_params" come .permit(..., :image_id). Invece noi vogliamo  .permit(..., :image). Inoltre refile usa un check-box per rimuovere l'immagine. Anche il parametro di questo check box deve essere nella white list. Chiamiamo il check-box :remove_image

old:

{title="controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=56}
~~~~~~~~
params.require(:post).permit(:image_id, :title, :content_short, :content_first, :content_blockquote, :content_second)
~~~~~~~~

new:

{title="controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=56}
~~~~~~~~
params.require(:post).permit(:image, :remove_image, :title, :content_short, :content, :content_first, :content_blockquote, :content_second)
~~~~~~~~




## Anche sul model dobbiamo aggiungere la chiamata a image


[codice: posts models xx](#code-posts-models-xx)

{title="models/post.rb", lang=ruby, line-numbers=on, starting-line-number=3}
~~~~~~~~
# refile required
attachment :image
#---
~~~~~~~~




## views edit

Adesso si dedica al view edit. Più precisamente su views/posts/_form.html.erb modifica il field image.

[codice: posts views xx](#code-posts-views-xx)

{title="views/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=14}
~~~~~~~~
<div class="field">
  <%= f.label :image %><br>
  <%= f.attachment_field :image %>
  <% if @post.image_id? %>
    <%= image_tag attachment_url(@post, :image, :fill, 100, 100) %> <br>
    <%= f.label :remove_image %><br>
    <%= f.check_box :remove_image %>
  <% end %>
</div>
~~~~~~~~




## views show

Finito con edit rende dinamica l'immagine sullo show. 

[codice: posts views 02](#code-posts-views-02)

{title="views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=9}
~~~~~~~~
<% if @post.image.present? %>
  <%= image_tag attachment_url(@post, :image, :fill, 100, 100), alt: "post image", class: "" %>
<% else %>
  nessuna immagine
<% end %>
~~~~~~~~

Fla fa una prova inserendo un'immagine nel primo blog.
E' giunta l'ora di un caffé allora Fla decide di fare un commit.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "upload and show image"
~~~~~~~~



