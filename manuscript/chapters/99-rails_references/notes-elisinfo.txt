https://leanpub.com/leanpubelisinfo/preview

https://leanpub.com/help/getting_started_sync_dropbox
https://leanpub.com/help/manual

---
http://pygments.org/demo/   ->  vedi il codice nel menu a cascata

.html.erb   -> lang=HTML+Mako
      .rb   -> lang=ruby
      .yml  -> lang=yaml
      .coffe -> lang=CoffeeScript
      .scss  -> lang=ruby

---
$ sudo service postgresql start

---
$ rails s -b $IP -p $PORT

https://elisinfo6-flaviobordonidev.c9users.io/
user: flavio@example.com
pwd: password
---
$ heroku domains

whispering-bayou-92008.herokuapp.com

---
Galateo del codice. Come scrivere codice con stile.
https://github.com/bbatsov/ruby-style-guide
https://rubygarage.org/blog/best-ruby-gems-we-use?utm_source=rubyweekly&utm_medium=email
https://8thlight.com/blog/christoph-gockel/2016/10/19/getting-rails-on-track-part-1-models.html?utm_source=rubyweekly&utm_medium=email
http://codeloveandboards.com/blog/2014/02/05/ruby-and-method-arguments/

* [console shortcuts](https://pragmaticstudio.com/blog/2014/3/11/console-shortcuts-tips-tricks)

---
Routes
https://richonrails.com/articles/understanding-rails-routing

---
Per forzare un push usare -f

$ git push -f heroku nomebranch:master

---
Facciamo un "pull request" su github per fare il merge e chiudere il branch.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git pull origin master
$ git merge homepage
$ git push origin master
$ git branch -d homepage
$ git push origin :homepage
~~~~~~~~

---
Liberiamo spazio su C9 (clear up / free up disk space)

https://community.c9.io/t/how-do-i-clear-up-disk-space-after-its-full/213/2


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ du -hx / -t 50000000
~~~~~~~~

Nel mio caso si erano presi quasi tutto lo spazio disco i temporanei di heroku:
** 1.8G    /home/ubuntu/.local/share/heroku/tmp **
Li ho liberati con il comando:


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
sudo rm -rf /home/ubuntu/.local/share/heroku/tmp/*
~~~~~~~~


heroku run ls tmp


---
Bella spiegazione di attr_accessor = attr_read (getter) + attr_write (setter)

https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby



---
https://coderwall.com/p/1dsjoq/quickly-re-run-rails-migrations

rake db:migrate:redo


for migration with schema ID 20100421175455 the command would be:

rake db:migrate:redo VERSION=20100421175455
Reference: http://stackoverflow.com/a/5600310


---
Organizzare i models
https://www.zmwolski.com/Organizing-Ruby-on-Rails-Models

  # == Constants ============================================================

  # == Attributes ===========================================================
  
  # == Extensions ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================

Esempio:

  # == Constants ============================================================
  
  GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

  # == Attributes ===========================================================
  
  # ATTRIBUTES NOT MAPPED IN DATABASE (getter and setter methods)

  # paperclip ------------------------------------------------------------------
  attr_accessor :remove_logo
  #-----------------------------------------------------------------------------

  # globalize required ---------------------------------------------------------
  translates :sector, :memo, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------

  # == Extensions ===========================================================

  # paperclip required ---------------------------------------------------------
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }
  #-----------------------------------------------------------------------------

  has_attached_file :avatar, styles: {
    square_100: ‘100x100#’,
    square_300: ‘300x300#’
  }

  # == Relationships ========================================================
    # associations
    
  has_many :documents

  # == Validations ==========================================================
  
  validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================
  
  def self.for_select
    all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
  end

  # == Instance Methods =====================================================

---
i18n statica con "locales"

# app/views/messages/_form.html.erb
-----------------------------------
<%= form_for :message do "f| %>
  <%= f.label :title %>
  <%= f.text_field :title %>
  <%= f.label :name %>
  <%= f.input :name, placeholder: true %>
  <%= f.submit %>
<% end %>


# app/views/posts/_form.html.erb
-----------------------------------
<%= form_for :post do "f| %>
  <%= f.label :title %>
  <%= f.text_field :title %>
  <%= f.label :name %>
  <%= f.input :name, placeholder: true %>
  <%= f.submit %>
<% end %>

en:
  helpers:
    label:
      message:
        name: "Name label"
      post:
        name: "Name label of post"
    placeholder:
      message:
        name: "Your placeholder text here"
      post:
        name: "Your placeholder text here"
    submit:
      message:
        create: "Create a new great messagge!"
        update: "Save changes to this message."
      post:
        create: "Create a new lovelly post!"
        update: "Yes, save changes to this post."  
  messages:
    update:
      notice: "Message was successfully updated."
      alert: "Unable to update message."
  posts:
    update:
      notice: "Post was successfully updated."
      alert: "Unable to update post."


If the helpers: path is not available, i18n will fallback to the activerecord: path. Very clear when using the excellent ** i18n-debug ** gem.
https://github.com/fphilipe/i18n-debug

https://mikerogers.io/2016/01/10/i18n-rails-internationalisation-i18n-cheatsheet.html

https://webuild.envato.com/blog/how-to-organise-i18n-without-losing-your-translation-not-found/

https://stackoverflow.com/questions/16977371/submit-button-helper-with-i18n-t

https://stackoverflow.com/questions/36810203/list-of-available-i18n-translations-for-helpers-in-ruby-on-rails-4-and-simple


---

---
‘unless … else’ is a terrible Ruby construct.

--
https://robots.thoughtbot.com/any-empty

<% if @posts.empty? %> vuoto <% else %> pieno <% end %> --> Il modo più elegante
<% if @posts.any? %> pieno  <% else %> vuoto <% end %> --> Questa è incorretta perché @posts.any? non è il contrario di @posts.empty?
<% if ! @posts.empty? -%> pieno  <% else %> vuoto <% end %> --> Questo è il modo corretto di farlo

[1, 2].any? => true
[nil, nil].any? => false

[1, 2].empty? => false
[nil, nil].empty? => false

---
https://railsless.blogspot.it/2011/08/difference-between-nil-empty-blank.html
Difference between .nil?, .empty?, .blank?, .present?

.nil? ed .empty? sono funzioni ruby presenti in Rails. Invece .blank? e .present? sono solo rails e sono da preferire perché "normalizzano" le risposte come vedi dal seguente schema creato direttamente sulla ** $ rails c **

nil.nil?    # => true
[].nil?     # => false
"".nil?     # => false
"  ".nil?   # => false
false.nil?  # => false

nil.empty?    # => Undefined method
[].empty?     # => true
"".empty?     # => true
"  ".empty?   # => false
false.empty?  # => Undefined method

nil.blank?    # => true
[].blank?     # => true
"".blank?     # => true
"   ".blank?  # => true
false.blank?  # => true

nil.present?    # => false
[].present?     # => false
"".present?     # => false
"  ".present?   # => false
false.present?  # => false

.nil?      For each object. Only if it is nil
.empty?    Only for the objects: string, array, hash. If the object is empty
.blank?    For each object. If the object is nil or empty
.present?  The opposite of .blank? 

present? è la negazione di blank?:

address.present? == !address.blank?   # => true
<% if !params[:locale].present? %> == <% if params[:locale].blank? %>
