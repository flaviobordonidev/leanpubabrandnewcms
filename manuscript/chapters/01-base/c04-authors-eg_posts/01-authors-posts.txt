# La Dashboard

Prepariamo la nostra dashboard. Incapsuliamo una copia di posts dentro il modulo **Authors** in modo da avere tutta la parte di gestione degli articoli protetta da login con devise e con un suo specifico layout tutto dentro uno stesso modulo.
Si poteva anche gestire il tutto senza usare il modulo ma questa gestione mi piace di più perché è chiaro cosa appartiene alla gestione fatta sulla dashboard ed ho delle ridondanze che posso personalizzare (ad esempio un doppio controller per la stessa tabella posts).

Creiamo il modulo “authors” che ingloba/incapsula una copia di posts.
  permette di isolare un layout tutto per lui senza doverlo fare dal controller posts_controller per ogni singola azione.
  Permette di proteggere tutto il namespace ...authors… con devise senza doverlo fare sul controller posts_controller per ogni singola azione.


Risorse web:

* [How to build a blog with Rails 5 and Bootstrap 4 - Part 3](https://www.youtube.com/watch?v=fPpJsAU4qIY)




## Apriamo il branch "Modulo Authors per la Dashboard"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b mad
~~~~~~~~




## La doppia vita dei posts

Pieghiamo leggermente le convenzioni Rails e sfruttiamo la sua "magia"...

Per poter implementare la parte di sicurezza e disegnare un ambiente per i posts che è accessibile a tutti ed un ambiente di gestione che è accessibile solo agli autori dei rispettivi posts duplichiamo la cartella posts e la mettiamo all'interno di una cartella principale che chiameremo **authors**

* la cartella **posts** nella posizione standard sarà accessibile da tutti ma lasciamo la sola visualizzazione.
* la cartella **posts** duplicata dentro **authors** sarà accessibile solo dai rispettivi autori che potranno gestire i loro articoli (posts); crearne di nuovi, editarli ed eliminarli. In pratica una "dashboard" di gestione dei posts.

Questa separazione si poteva fare anche senza duplicare la cartella posts e creare una sovrastruttura ma in questo modo si ha più flessibilità per crescere e diversificare gli ambienti. Inoltre è più netta e facile definire l'ambiente protetto da "devise" a cui possono accedere solo gli autori (ossia gli utenti loggati). Inoltre quest'approccio è utile dal punto di vista didattico perché ci mostra alcuni aspetti del funzionamento di Rails e ci forza a capire un po' di più su come lavora il file routes.rb




## Incapsuliamo le views di "posts" dentro "authors"

Su ".../app/views/" creiamo la cartella "authors" e dentro ci mettiamo una copia della cartella "posts".

* .../app/views/posts/            copia / incolla ->  .../app/views/authors/posts/ 




## Instradiamo authors/posts

Impostiamo l'instradamento attraverso il namespace authors

{id="02-04-01_01", title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=8}
~~~~~~~~
  namespace :authors do
    resources :posts
  end

  resources :posts
~~~~~~~~

[Codice 01](#02-04-01_01all)

Ho doppio resources :posts solo che uno è dentro il namespace :authors questo vuol dire che sono attivi tutti i sette instradamenti restful su due percorsi:

* https://mydomain/posts/...
* https://mydomain/authors/posts/...

Verifichiamo i vari percorsi/instradamenti (paths) sul terminale

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails routes
$ rails routes | egrep "posts"


ubuntu:~/environment/s5beginning (mad) $ rails routes | egrep "posts"
            authors_posts GET    /authors/posts(.:format)                                                                 authors/posts#index
                          POST   /authors/posts(.:format)                                                                 authors/posts#create
         new_authors_post GET    /authors/posts/new(.:format)                                                             authors/posts#new
        edit_authors_post GET    /authors/posts/:id/edit(.:format)                                                        authors/posts#edit
             authors_post GET    /authors/posts/:id(.:format)                                                             authors/posts#show
                          PATCH  /authors/posts/:id(.:format)                                                             authors/posts#update
                          PUT    /authors/posts/:id(.:format)                                                             authors/posts#update
                          DELETE /authors/posts/:id(.:format)                                                             authors/posts#destroy
                    posts GET    /posts(.:format)                                                                         posts#index
                          POST   /posts(.:format)                                                                         posts#create
                 new_post GET    /posts/new(.:format)                                                                     posts#new
                edit_post GET    /posts/:id/edit(.:format)                                                                posts#edit
                     post GET    /posts/:id(.:format)                                                                     posts#show
                          PATCH  /posts/:id(.:format)                                                                     posts#update
                          PUT    /posts/:id(.:format)                                                                     posts#update
                          DELETE /posts/:id(.:format)                                                                     posts#destroy
                 eg_posts GET    /eg_posts(.:format)                                                                      eg_posts#index
                          POST   /eg_posts(.:format)                                                                      eg_posts#create
              new_eg_post GET    /eg_posts/new(.:format)                                                                  eg_posts#new
             edit_eg_post GET    /eg_posts/:id/edit(.:format)                                                             eg_posts#edit
                  eg_post GET    /eg_posts/:id(.:format)                                                                  eg_posts#show
                          PATCH  /eg_posts/:id(.:format)                                                                  eg_posts#update
                          PUT    /eg_posts/:id(.:format)                                                                  eg_posts#update
                          DELETE /eg_posts/:id(.:format)                                                                  eg_posts#destroy
~~~~~~~~







## Incapsuliamo il controller di "posts" dentro "authors"

Su ".../app/controllers/" creiamo la cartella "authors" e dentro ci mettiamo una copia del file "posts_controller.rb".

* .../app/controllers/posts_controller.rb     copia / incolla ->    .../app/controllers/authors/posts_controller.rb

Siccome questo file è dentro la sottocartella "authors" dobbiamo indicargli che si trova là e questo lo facciamo indicandogli che è in un "module". Per far questo racchiudiamo tutto dentro il "module Authors".

{id="02-04-01_02", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
module Authors
  class PostsController < ApplicationController
~~~~~~~~

[Codice 02](#02-04-01_02all)

questo fa si che le chiamate siano del tipo Auhtors::PostsController

un'alternativa, usata anche da devise, è quella di dichiarare che è in un "module" direttamente nella definizione della classe.

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Authors::PostsController < ApplicationController
~~~~~~~~

Le due definizioni sono identiche.




## Puliamo le routes

Restringiamo gli instradamenti alle sole views di nostro interesse:

* Vogliamo che l'utente normale possa visualizzare tutti i posts. Tanto l'elenco quanto i singoli articoli.
* Vogliamo che l'autore abbia un elenco di "lavoro" dei suoi posts. Che possa crearne di nuovi, editarli, eliminarli. 

{id="02-04-01_03", title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  namespace :authors do
    resources :posts, :except => [:show]
  end
  resources :posts, :only => [:index, :show]
~~~~~~~~

[Codice 03](#02-04-01_03all)


Da notare che ho due "index" perché quello dell'autore ha una struttura ed un layout diverso da quello del lettore (reader), ossia dell'utente non loggato. Permette di avere un index dedicato alla dashboard che ha tutti i posts dell’autore compresi quelli non pubblicati. Utile ma si può fare anche senza creare il modulo. Però così è più pulito perché ho anche un controller dedicato.

Per la visualizzazioe del singolo posts invece usiamo solo quello del lettore così l'autore vedrà il suo articolo con lo stesso layout/theme del lettore. Il view authors/posts/show si può eliminare ed usare solo posts/show.


Verifichiamo i vari percorsi/instradamenti (paths) sul terminale

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails routes | egrep "posts"


buntu:~/environment/s5beginning (mad) $ rails routes | egrep "posts"
            authors_posts GET    /authors/posts(.:format)                                                                 authors/posts#index
                          POST   /authors/posts(.:format)                                                                 authors/posts#create
         new_authors_post GET    /authors/posts/new(.:format)                                                             authors/posts#new
        edit_authors_post GET    /authors/posts/:id/edit(.:format)                                                        authors/posts#edit
             authors_post PATCH  /authors/posts/:id(.:format)                                                             authors/posts#update
                          PUT    /authors/posts/:id(.:format)                                                             authors/posts#update
                          DELETE /authors/posts/:id(.:format)                                                             authors/posts#destroy
                    posts GET    /posts(.:format)                                                                         posts#index
                     post GET    /posts/:id(.:format)                                                                     posts#show
                 eg_posts GET    /eg_posts(.:format)                                                                      eg_posts#index
                          POST   /eg_posts(.:format)                                                                      eg_posts#create
              new_eg_post GET    /eg_posts/new(.:format)                                                                  eg_posts#new
             edit_eg_post GET    /eg_posts/:id/edit(.:format)                                                             eg_posts#edit
                  eg_post GET    /eg_posts/:id(.:format)                                                                  eg_posts#show
                          PATCH  /eg_posts/:id(.:format)                                                                  eg_posts#update
                          PUT    /eg_posts/:id(.:format)                                                                  eg_posts#update
                          DELETE /eg_posts/:id(.:format)                                                                  eg_posts#destroy
~~~~~~~~




## Puliamo i controllers posts

Iniziamo a differenziare lo "standard posts" (quello per il lettore) da quello incapsulato "authors/posts" (quello per l'autore). 
Nello specifico lasciamo ai controllers solo le azioni che sono effettivamente usate.

posts         -> :index, :show
authors/posts -> :index, :edit, :update, :new, :create, :destroy

Non ha più senso avere il codice separato nel metodo private "set_post" chiamato da "before_action" e quindi lo riporto dentro l'azione show.
Inoltre non modificando i records non ci serve il metodo private "post_params"

{id="02-04-01_04", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
  def index
    @posts = Post.all.order(created_at: "DESC")
    authorize @posts
  end

  # GET /posts/1
  # GET /posts/1.json
  def show
    @post = Post.friendly.find(params[:id])
    authorize @post
  end
~~~~~~~~

[Codice 04](#02-04-01_04all)


Per authors/posts l'elenco di tutti gli articoli è filtrato per l'autore che si è loggato.
(L'amministratore invece vede tutti gli articoli.)
Inoltre togliamo l'azione "show" e la sua chiamata in "before_action". Ed usiamo la forma più compatta per definire il modulo "Authors::PostsController".

{id="02-04-01_05", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Authors::PostsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_post, only: [:edit, :update, :destroy]

  # GET /authors/posts
  # GET /authors/posts.json
  def index
    @posts = current_user.posts.order(created_at: "DESC") unless current_user.admin?
    @posts = Post.all.order(created_at: "DESC") if current_user.admin?
    authorize @posts
  end
~~~~~~~~

[Codice 05](#02-04-01_05all)




## Puliamo le views posts

eliminiamo:

* .../app/views/posts/_form.html.erb
* .../app/views/posts/edit.html.erb
* .../app/views/posts/new.html.erb
* .../app/views/authors/posts/show.html.erb




### Aggiorniamo views/posts/index

togliamo i links_to non più usati.
Cancelliamo le seguenti linee di codice:

{id="02-04-01_06", title=".../app/views/posts/index.html.erb", lang=HTML+Mako, line-numbers=off}
~~~~~~~~
<td><%= link_to 'Edit', edit_authors_post_path(post) %></td>
<td><%= link_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
~~~~~~~~

{title=".../app/views/posts/index.html.erb", lang=HTML+Mako, line-numbers=off}
~~~~~~~~
<%= link_to 'New Post', new_post_path %>
~~~~~~~~

[Codice 06](#02-04-01_06all)




### Aggiorniamo views/posts/show

Volendo editare ci riporta alla pagina dell'autore, sempre che ne abbia l'autorizzazione.

{id="02-04-01_07", title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=off}
~~~~~~~~
<%= link_to 'Edit', edit_authors_post_path(@post), class: 'btn btn-sm btn-warning' %>
~~~~~~~~

[Codice 07](#02-04-01_07all)

In alternativa possiamo eliminare completamente il link di Edit.




### Aggiorniamo views/authors/posts/index

aggiorniamo i vari links su ".../app/views/authors/posts/index.html.erb"

{title=".../app/views/authors/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=24}
~~~~~~~~
        <td><%= link_to 'Edit', edit_authors_post_path(post) %></td>
        <td><%= link_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
~~~~~~~~

{id="02-04-01_08", title=".../app/views/authors/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=34}
~~~~~~~~
<%= link_to 'New Post', new_authors_post_path %>
~~~~~~~~

[Codice 08](#02-04-01_08all)


le views authors/posts/edit, authors/posts/new e authors/posts/_form le aggiorniamo nei prossimi capitoli




## Correggiamo i reinstradamenti delle azioni di modifica dei posts

Nel nostro controller authors/posts_controller correggiamo i reinstradamenti delle azioni update, create e destroy

in realtà mi va bene che dopo la creazione e l'aggiornamento vada sul posts standard. l'unica modifica è per il destroy

{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=61}
~~~~~~~~
      format.html { redirect_to authors_posts_url, notice: 'Post was successfully destroyed.' }
~~~~~~~~




## Correggiamo il sumbit del form

Effettuato il submit del nostro form dobbiamo arrivare all'azione "create" o "update" presente sul controller "auhtors/posts_controller".
Per convenzione rails dopo il submit siamo reinstradati sull'azione "create" o "update" del controller "posts_controller".

Dobbiamo quindi specificare, effettuato il submit, l'url a cui deve andare con post/patch perché il percorso non è più in convenzione rails. Per far questo dobbiamo passargli l'url comprensivo del namespace.

Siccome sono due percorsi diversi uno per edit e l'altro per new usiamo una variabile che chiamiamo "authors_url" e passiamo il valore dal render di edit e dal render di new.

Detto in altro modo:

Siccome l'url è diverso a seconda se sono su edit o su new, gli passiamo una variabile che chiamiamo "authors_url". Il valore di questa variabile è impostato nelle pagine chiamanti il partial.

Quindi il nostro partial risulta:

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= form_with(model: post, local: true, url: authors_url) do |form| %>
~~~~~~~~

La chiamata fatta dalla pagina edit risulta:

{title=".../app/views/authors/posts/edit.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=6}
~~~~~~~~
<%= render 'form', post: @post, authors_url: authors_post_url(@post) %>
~~~~~~~~

La chiamata fatta dalla pagina new risulta:

{title=".../app/views/authors/posts/new.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%= render 'form', post: @post, authors_url: authors_posts_url %>
~~~~~~~~




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/posts
* https://mycloud9path.amazonaws.com/authors/posts




salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Incapsule a copy of posts in the module author"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku mad:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge mad
$ git branch -d mad
~~~~~~~~


aggiorniamo github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-04-01_01)

{id="02-04-01_01all", title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
Rails.application.routes.draw do

  root 'example_static_pages#page_a'

  devise_for :users, path_names: {sign_in: 'login'}, path: '', controllers: { sessions: 'users/sessions' }
  resources :users

  namespace :authors do
    resources :posts
  end

  resources :posts

  resources :example_companies
  resources :example_posts
  resources :example_users
  
  get 'sections' => 'example_static_pages#page_a'
  get 'signatures' => 'example_static_pages#page_b'
  get 'example_static_pages/page_a'
  get 'example_static_pages/page_b'
  get 'example_static_pages/page_c'
  get 'example_static_pages/slider'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
~~~~~~~~




[Codice 02](#02-04-01_02)

{id="02-04-01_02all", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
module Authors
  class PostsController < ApplicationController
    before_action :authenticate_user!
    before_action :set_post, only: [:show, :edit, :update, :destroy]
  
    # GET /posts
    # GET /posts.json
    def index
      @posts = Post.all
      authorize @posts
    end
  
    # GET /posts/1
    # GET /posts/1.json
    def show
    end
  
    # GET /posts/new
    def new
      #@post = Post.new
      @post = current_user.posts.new
      authorize @post
    end
  
    # GET /posts/1/edit
    def edit
    end
  
    # POST /posts
    # POST /posts.json
    def create
      @post = Post.new(post_params)
      authorize @post
  
      respond_to do |format|
        if @post.save
          format.html { redirect_to @post, notice: 'Post was successfully created.' }
          format.json { render :show, status: :created, location: @post }
        else
          format.html { render :new }
          format.json { render json: @post.errors, status: :unprocessable_entity }
        end
      end
    end
  
    # PATCH/PUT /posts/1
    # PATCH/PUT /posts/1.json
    def update
      respond_to do |format|
        if @post.update(post_params)
          format.html { redirect_to @post, notice: 'Post was successfully updated.' }
          format.json { render :show, status: :ok, location: @post }
        else
          format.html { render :edit }
          format.json { render json: @post.errors, status: :unprocessable_entity }
        end
      end
    end
  
    # DELETE /posts/1
    # DELETE /posts/1.json
    def destroy
      @post.destroy
      respond_to do |format|
        format.html { redirect_to posts_url, notice: 'Post was successfully destroyed.' }
        format.json { head :no_content }
      end
    end
  
    private
      # Use callbacks to share common setup or constraints between actions.
      def set_post
        @post = Post.friendly.find(params[:id])
        authorize @post
      end
  
      # Never trust parameters from the scary internet, only allow the white list through.
      def post_params
        params.require(:post).permit(:title, :incipit, :content, :type, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id)
      end
  end
end
~~~~~~~~




[Codice 04](#02-04-01_04)

{id="02-04-01_04all", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class PostsController < ApplicationController
  # GET /posts
  # GET /posts.json
  def index
    @posts = Post.all
    authorize @posts
  end

  # GET /posts/1
  # GET /posts/1.json
  def show
    @post = Post.friendly.find(params[:id])
  end
end
~~~~~~~~




[Codice 05](#02-04-01_05)

{id="02-04-01_05all", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Authors::PostsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_post, only: [:edit, :update, :destroy]

  # GET /authors/posts
  # GET /authors/posts.json
  def index
    @posts = current_user.posts unless current_user.admin?
    @posts = Post.all if current_user.admin?
    authorize @posts
  end

  # GET /authors/posts/new
  def new
    #@post = Post.new
    @post = current_user.posts.new
    authorize @post
  end

  # GET /authors/posts/1/edit
  def edit
  end

  # POST /authors/posts
  # POST /authors/posts.json
  def create
    @post = Post.new(post_params)
    authorize @post

    respond_to do |format|
      if @post.save
        format.html { redirect_to @post, notice: 'Post was successfully created.' }
        format.json { render :show, status: :created, location: @post }
      else
        format.html { render :new }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /authors/posts/1
  # PATCH/PUT /authors/posts/1.json
  def update
    respond_to do |format|
      if @post.update(post_params)
        format.html { redirect_to @post, notice: 'Post was successfully updated.' }
        format.json { render :show, status: :ok, location: @post }
      else
        format.html { render :edit }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /authors/posts/1
  # DELETE /authors/posts/1.json
  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to posts_url, notice: 'Post was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.friendly.find(params[:id])
      authorize @post
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :type, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id)
    end
end
~~~~~~~~




[Codice 06](#02-04-01_06)

{id="02-04-01_06all", title=".../app/views/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%# == Meta_data ============================================================ %>

<% provide(:page_title, "All posts") %>
<% provide(:menu_blog_nav_link, "active") %>

<%# == Meta_data - end ====================================================== %>

<p id="notice"><%= notice %></p>

<h1>Posts</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Incipit</th>
      <th>Content</th>
      <th>Type</th>
      <th>Video youtube</th>
      <th>Video vimeo</th>
      <th>Seocontent</th>
      <th>Date chosen</th>
      <th>User</th>
      <th>Autore</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @posts.each do |post| %>
      <tr>
        <td><%= post.title %></td>
        <td><%= post.incipit %></td>
        <td><%= post.content %></td>
        <td><%= post.type %></td>
        <td><%= post.video_youtube %></td>
        <td><%= post.video_vimeo %></td>
        <td><%= post.seocontent %></td>
        <td><%= post.date_chosen %></td>
        <td><%= post.user %></td>
        <td><%= post.user.email %></td>
        <td><%= link_to 'Show', post %></td>
      </tr>
    <% end %>
  </tbody>
</table>
~~~~~~~~




[Codice 07](#02-04-01_07)

{id="02-04-01_07all", title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%# == Meta_data ============================================================ %>

<% provide(:page_title, @post.title) %>
<% provide(:menu_blog_nav_link, "active") %>

<%# == Meta_data - end ====================================================== %>

<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @post.title %>
</p>

<p>
  <strong>Incipit:</strong>
  <%= @post.incipit %>
</p>

<p>
  <strong>Content:</strong>
  <%= @post.content %>
</p>

<p>
  <strong>Type:</strong>
  <%= @post.type %>
</p>

<p>
  <strong>Video youtube:</strong>
  <%= @post.video_youtube %>
</p>

<p>
  <strong>Video vimeo:</strong>
  <%= @post.video_vimeo %>
</p>

<p>
  <strong>Seocontent:</strong>
  <%= @post.seocontent %>
</p>

<p>
  <strong>Date chosen:</strong>
  <%= @post.date_chosen %>
</p>

<p>
  <strong>User:</strong>
  <%= @post.user %>
</p>

<%= link_to 'Back', posts_path %>
~~~~~~~~




[Codice 08](#02-04-01_08)

{id="02-04-01_08all", title=".../app/views/authors/posts/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%# == Meta_data ============================================================ %>

<% provide(:page_title, "All posts") %>
<% provide(:menu_blog_nav_link, "active") %>

<%# == Meta_data - end ====================================================== %>

<p id="notice"><%= notice %></p>

<h1>Posts</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Incipit</th>
      <th>Content</th>
      <th>Type</th>
      <th>Video youtube</th>
      <th>Video vimeo</th>
      <th>Seocontent</th>
      <th>Date chosen</th>
      <th>User</th>
      <th>Autore</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @posts.each do |post| %>
      <tr>
        <td><%= post.title %></td>
        <td><%= post.incipit %></td>
        <td><%= post.content %></td>
        <td><%= post.type %></td>
        <td><%= post.video_youtube %></td>
        <td><%= post.video_vimeo %></td>
        <td><%= post.seocontent %></td>
        <td><%= post.date_chosen %></td>
        <td><%= post.user %></td>
        <td><%= post.user.email %></td>
        <td><%= link_to 'Show', post %></td>
        <td><%= link_to 'Edit', edit_authors_post_path(post) %></td>
        <td><%= link_to 'Destroy', authors_post_path(post), method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>
<%= link_to 'New Post', new_authors_post_path %>
~~~~~~~~
