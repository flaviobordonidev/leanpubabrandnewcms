## Autorizzazione

Impostiamo che autorizzazioni ha l'utente, una volta autenticato attraverso il login. 
Noi usiamo Pundit

Attiviamo pundit per autorizzare le modifiche degli utenti solo se la persona è loggata (autenticata) ed ha il ruolo di amministratore (autorizzata).

Ma prima di approfondire Pundit identifichiamo il nostro problema che richiede autenticazione:

Nel sistema di gestione delle aziende abbiamo 2 ruoli, quello del manager e quello del dipendente. 
Il Manager può visualizzare tutte le schermate del sistema. 
Il dipendente non può creare, modificare o cancellare alcuna azienda.


Risorse web

* [gems pundit](https://rubygems.org/gems/pundit)
* [varvet pundit](https://github.com/varvet/pundit)
* [rails authorization](http://railsapps.github.io/rails-authorization.html)
* [rails authorization freecodecamp](https://medium.freecodecamp.org/rails-authorization-with-pundit-a3d1afcb8fd2)
* [authorization with pundit tutplus](https://code.tutsplus.com/tutorials/authorization-with-pundit--cms-28202)
* [authorization with pundit medium](https://medium.com/@stacietaylorcima/implement-user-authorization-with-pundit-rails-80d921cdbf28)
* [Episode #047 - Authorization with Pundit](https://www.youtube.com/watch?v=PWizyTjCAdg)
* [Rails Authorization With Pundit - parte da zero ed installa anche devise ed usa anche spec tests](https://www.youtube.com/watch?v=qruGD_8ry7k)




## Apriamo il branch "Pundit Install"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pi
~~~~~~~~




## Installiamo la gemma

I> verifichiamo [l'ultima versione della gemma](https://rubygems.org/gems/pundit)
I>
I> facciamo riferimento al [tutorial github della gemma](https://github.com/varvet/pundit)

{id="01-09-04_01", title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=42}
~~~~~~~~
# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0', '>= 2.0.1'
~~~~~~~~

[Codice 01](#01-09-04_01all)

Eseguiamo l'installazione della gemma con bundle

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
~~~~~~~~




## Aggiungiamo Pundit ad application_controller

Includiamo Pundit nel nostro application controller.

{id="01-09-04_02", title=".../app/controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  include Pundit
~~~~~~~~

[Codice 02](#01-09-04_02all)

Questo ci permette di usare Pundit in tutta la nostra applicazione.





## Lo script

Questo passaggio è opzionale ma è interessante farlo per avere una policy generica che erediteremo nelle classi delle policies specifiche per ogni Model da autorizzare. Quindi eseguiamo lo script di implementazione di pundit su rails. Lo script (Anche noto con il nome di "generator").
Il "generatore" imposterà una politica applicativa con alcune impostazioni predefinite utili.Il "generator" will set up an application policy with some useful defaults.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g pundit:install


ec2-user:~/environment/myapp (pi) $ rails g pundit:install
Running via Spring preloader in process 9137
      create  app/policies/application_policy.rb
~~~~~~~~

Questo ci crea il seguente codice

{id="01-09-04_03", title=".../app/policies/application_policy.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationPolicy
  attr_reader :user, :record
~~~~~~~~

[Codice 03](#01-09-04_03all)

Dopo aver generato la "application policy", riavviamo il server Rails in modo che Rails possa rilevare ogni classe nella nuova directory app/policies.

E con questo abbiamo predisposto l'ambiente di pundit. Nel prossimo capitolo inizieremo ad usarlo per le autorizzazioni.



## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "install pundit"
~~~~~~~~




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pi:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pi
$ git branch -d pi
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#01-09-04_01)

{id="01-09-04_01all", title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '2.4.1'

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem 'rails', '~> 5.2.1', '>= 5.2.1.1'
# Use postgresql as the database for Active Record
gem 'pg', '>= 0.18', '< 2.0'
# Use Puma as the app server
gem 'puma', '~> 3.11'
# Use SCSS for stylesheets
gem 'sass-rails', '~> 5.0'
# Use Uglifier as compressor for JavaScript assets
gem 'uglifier', '>= 1.3.0'
# See https://github.com/rails/execjs#readme for more supported runtimes
# gem 'mini_racer', platforms: :ruby

# Use CoffeeScript for .coffee assets and views
gem 'coffee-rails', '~> 4.2'
# Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
gem 'turbolinks', '~> 5'
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
gem 'jbuilder', '~> 2.5'
# Use Redis adapter to run Action Cable in production
# gem 'redis', '~> 4.0'
# Use ActiveModel has_secure_password
# gem 'bcrypt', '~> 3.1.7'

# Use ActiveStorage variant
# gem 'mini_magick', '~> 4.8'

# Use Capistrano for deployment
# gem 'capistrano-rails', group: :development

# Reduces boot times through caching; required in config/boot.rb
gem 'bootsnap', '>= 1.1.0', require: false

# Flexible authentication solution for Rails with Warden 
gem 'devise', '~> 4.5'

# Object oriented authorization for Rails applications
gem 'pundit', '~> 2.0'

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end

group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
end

group :test do
  # Adds support for Capybara system testing and selenium driver
  gem 'capybara', '>= 2.15'
  gem 'selenium-webdriver'
  # Easy installation and use of chromedriver to run system tests with Chrome
  gem 'chromedriver-helper'
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
~~~~~~~~




[Codice 02](#01-09-04_02)

{id="01-09-04_02all", title=".../app/controllers/application_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationController < ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  include Pundit

  def after_sign_in_path_for(resource_or_scope)
    users_path
    #current_user
  end

  protected
  
    def configure_permitted_parameters
      devise_parameter_sanitizer.permit(:sign_in, keys: [:role])
      devise_parameter_sanitizer.permit(:sign_up, keys: [:role])
      devise_parameter_sanitizer.permit(:account_update, keys: [:role])
    end
end
~~~~~~~~




[Codice 03](#01-09-04_03)

{id="01-09-04_03all", title=".../app/policies/application_policy.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class ApplicationPolicy
  attr_reader :user, :record

  def initialize(user, record)
    @user = user
    @record = record
  end

  def index?
    false
  end

  def show?
    false
  end

  def create?
    false
  end

  def new?
    create?
  end

  def update?
    false
  end

  def edit?
    update?
  end

  def destroy?
    false
  end

  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope.all
    end
  end
end
~~~~~~~~
