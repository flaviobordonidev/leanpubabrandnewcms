# Upload immagine tramite AWS

Abbiamo già installato ActiveRecord ed implementato un bucket di prova su AWS. Adesso usiamo il tutto per fare upload di immagini nei nostri articoli


Risorse web:

* [Articolo interessante con anche la gestione di uploads multipli "Multiple attachments"](https://evilmartians.com/chronicles/rails-5-2-active-storage-and-beyond)




## Apriamo il branch "Upload Image"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ui
~~~~~~~~




## Attiviamo upload immagine per post

Implementiamo un campo in cui carichiamo le immagini per i nostri articoli usando "has_one_attached" di active_storage
Nel model nella sezione "# == Attributes ===", sottosezione "## ActiveStorage"

{id="02-06-01_01", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=4}
~~~~~~~~
  has_one_attached :main_image
~~~~~~~~

[Codice 01](#02-06-01_01all)

Ogni volta che facciamo l'upload di un'immagine come "main_image" questa chiamata aggiorna in automatico i metadata della tabella blobs ed il collegamento della tabella attachments. 




## Aggiorniamo il controller

Inseriamo il nuovo campo :main_image nella white-list del controller

{id="02-06-01_02", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=70}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :content_type, :video_youtube, :video_vimeo, :seocontent, :user_id, :main_image)
    end
~~~~~~~~

[Codice 02](#02-06-01_02all)




## Implementiamo la view

{id="02-06-01_03", title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
            <div class="field">
              <%= form.label :main_image %>
              <br><img src="https://images.pexels.com/photos/634843/pexels-photo-634843.jpeg?auto=compress&cs=tinysrgb&dpr=1&fit=crop&h=200&w=200" alt="Immagine demo presa da pexels.com" width="100" height="100"><br>
              <%= form.file_field :main_image, class: "form-control-file" %>
            </div>
~~~~~~~~

[Codice 03](#02-06-01_03all)


Per visualizzare l'immagine basta "image_tag @post.main_image" ma per sicurezza mettiamo anche un controllo

{id="02-06-01_04", title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
<% if @post.main_image.attached? %>
  <%= image_tag @post.main_image %>
<% else %>
  <p>Nessuna immagine presente</p>
<% end %>
~~~~~~~~

[Codice 04](#02-06-01_04all)




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser all'URL:

* https://mycloud9path.amazonaws.com/authors/posts






## Piccola miglioria su edit

visualizziamo l'immagine se è presente anche in fase di edit. 

{title=".../app/views/example_posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
          <li class="list-group-item">
            <div class="field">
              <%= form.label :main_image %>
              <% if post.main_image.attached? %>
                <p><%= image_tag post.main_image %></p>
              <% else %>
                <p>Nessuna immagine presente</p>
              <% end %>
              <%= form.file_field :main_image, class: "form-control-file" %>
            </div>
          </li>
~~~~~~~~

Questa miglioria non è ancora molto "user friendly" perché quando carichiamo una nuova immagine non ci viene visualizzata.
Più avanti useremo javascript per implementare una barra di avanzamento sul caricamento dell'immagine ed un preview dell'immagine caricata che verrà salvata nel database solo a seguito del submit del form. Se non facciamo il submit del form resta la vecchia immagine.




## Ridimensioniamo l'immagine

Per ridimensionare l'immagine possiamo chiamare il " .variant(...) "

{id="02-06-01_05", title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=70}
~~~~~~~~
                <p><%= image_tag post.main_image.variant(resize: "100x100") %></p>
~~~~~~~~

[Codice 05](#02-06-01_05all)

Attenzione! per funzionare il " .variant " necessita di minimagic (già installato nei capitoli precedenti)




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/authors/posts




## salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add main_image on posts via ActiveStorage AWS S3"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ui:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge ui
$ git branch -d ui
~~~~~~~~




## Facciamo un backup su Github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-06-01_01)

{id="02-06-01_01all", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Post < ApplicationRecord
  # == Constants ============================================================

  # == Attributes ===========================================================

  enum type: {image: 0, video_youtube: 1, video_vimeo:2, audio:3}
  
  ## ActiveStorage
  has_one_attached :main_image
  
  # == Extensions ===========================================================

  ## friendly_id
  extend FriendlyId
  friendly_id :title, use: :slugged

  # == Relationships ========================================================

  belongs_to :user

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
  
  def should_generate_new_friendly_id?
    title_changed?
  end
end
~~~~~~~~




[Codice 02](#02-06-01_02)

{id="02-06-01_02all", title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Authors::PostsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_post, only: [:edit, :update, :destroy]
  layout 'dashboard'

  # GET /authors/posts
  # GET /authors/posts.json
  def index
    @posts = current_user.posts unless current_user.admin?
    @posts = Post.all if current_user.admin?
    authorize @posts
  end

  # GET /authors/posts/new
  def new
    #@post = Post.new
    @post = current_user.posts.new
    authorize @post
  end

  # GET /authors/posts/1/edit
  def edit
  end

  # POST /authors/posts
  # POST /authors/posts.json
  def create
    @post = Post.new(post_params)
    authorize @post

    respond_to do |format|
      if @post.save
        format.html { redirect_to @post, notice: 'Post was successfully created.' }
        format.json { render :show, status: :created, location: @post }
      else
        format.html { render :new }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /authors/posts/1
  # PATCH/PUT /authors/posts/1.json
  def update
    respond_to do |format|
      if @post.update(post_params)
        format.html { redirect_to @post, notice: 'Post was successfully updated.' }
        format.json { render :show, status: :ok, location: @post }
      else
        format.html { render :edit }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /authors/posts/1
  # DELETE /authors/posts/1.json
  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to authors_posts_url, notice: 'Post was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_post
      @post = Post.friendly.find(params[:id])
      authorize @post
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :type, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id, :main_image)
    end
end
~~~~~~~~
