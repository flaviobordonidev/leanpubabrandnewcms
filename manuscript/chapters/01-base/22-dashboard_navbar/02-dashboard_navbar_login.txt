# Inseriamo l'authenticazione al menu di navigazione di dashboard

Implementiamo l'authenticazione per gli autori. Una volta autenticati, ossia fatto login, ci appare la dashboard_navbar.

Prepariamo una "navbar" per gli "autori" che effettuano il login. Su questa navbar non mettiamo il pulsante di login perchè, come per wordpress, l'autore deve andare direttamente sull'url per il login: "https//mydomain.com/authors/sign_in

Appare la finestra di login ed una volta loggato in alto si ha il menu di wordpress evidenziando che si è nella sezione di autore con possibilità di modifica. 




## Apriamo il branch "Dashboard Navbar Authentication"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b dna
~~~~~~~~



## Inseriamo il link per l'area riservata utenti (ossia la dashboard)

In pratica un link alla pagina di login di devise che ci permette di autenticarci.

Ci sono due opzioni:

1. Gli utenti cliccano il link e vanno al login
2. Gli utenti puntano direttamente sull'URL alla pagina di login. http://www.mydomain.com/login

Iniziamo inserendo il link di login e logout sul menu.

{id="02-07-07_01", title=".../app/views/layouts/_dashboard_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=34}
~~~~~~~~
      <ul class="navbar-nav mr-auto">
        <li class="nav-item">
          <%= link_to current_user.email, user_path(current_user.id), class: "nav-link" if current_user.present? == true %>
          <%= link_to "guest", "#", class: "nav-link" if current_user.present? == false %>
        </li>
        <li class="nav-item">
          <%= link_to "Logout", destroy_user_session_path, method: :delete, class: "btn btn-danger" if current_user.present? == true %>
          <%= link_to "Login", new_user_session_path, class: "btn btn-danger" if current_user.present? == false %>
        </li>
      </ul>
~~~~~~~~

[Codice 01](#02-07-02_01all)



## Visualizziamo la barra di navigazione anche sui mockups

Aggiungiamo la barra di navigazione anche ai nostri mockups; ad eccezione di mockups/login che resta con il suo e di mockups/page_a a cui lasciamo il layout/application

{id="02-07-02_02", title=".../app/views/layouts/_dashboard_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=34}
~~~~~~~~
class MockupsController < ApplicationController
  layout 'dashboard'
~~~~~~~~

[Codice 02](#02-07-02_02all)





## Visualizziamo la dashboard_navbar solo se siamo loggati/autenticati

Sul layout application visualizziamo la dashboard_navbar solo se c'è un utente loggato.

{id="02-03-03_02", title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=13}
~~~~~~~~
    <%= render 'layouts/dashboard_navbar' if current_user.present? %>
~~~~~~~~

[Codice 02](#02-03-03_02all)

potevamo usare 

~~~~~~~~
    <% if current_user.present? %> <%= render 'layouts/dashboard_navbar' %><% end %>
~~~~~~~~

oppure

~~~~~~~~
    <% if user_signed_in? %> <%= render 'layouts/dashboard_navbar' %><% end %>
~~~~~~~~




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/posts






salviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "Add navbar login-logout"
~~~~~~~~




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku da:master
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge da
$ git branch -d da
~~~~~~~~


aggiorniamo github

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~




## Il codice del capitolo




[Codice 01](#02-03-03_01)

{id="02-03-03_01all", title=".../app/views/layouts/_dashboard_navbar.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
~~~~~~~~
