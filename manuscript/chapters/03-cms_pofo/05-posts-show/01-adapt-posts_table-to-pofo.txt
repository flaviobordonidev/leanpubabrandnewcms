# Blog - visualiziamo articolo

rendiamo dinamica la pagina dell'articolo prendendo i dati dal database




## Apriamo il branch "Posts Show"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b ps
~~~~~~~~




## Copiamo i partials pofo_*

abbiamo già copiamo tutti i partials per pofo creati nel mockups




## Adattiamo il layout application

abbiamo già adattato il layout per ospitare "pofo"




## La pagina posts/show

possiamo quindi passare le chiamate mancanti nella pagina posts/index


{title=".../app/views/posts/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<%# == Meta_data ============================================================ %>

<% provide(:page_title, "All posts") %>
<% provide(:menu_blog_nav_link, "active") %>

<%# == Meta_data - end ====================================================== %>

<%= render "pofo_page_title_section" %>

<p id="notice"><%= notice %></p>

<h1>Posts</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Incipit</th>
      <th>Content</th>
      <th>Type_of_content</th>
      <th>Video youtube</th>
      <th>Video vimeo</th>
      <th>Seocontent</th>
      <th>Date chosen</th>
      <th>User</th>
      <th>Autore</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @posts.each do |post| %>
      <tr>
        <td><%= post.title %></td>
        <td><%= post.incipit %></td>
        <td><%= post.content %></td>
        <td><%= post.type_of_content %></td>
        <td><%= post.video_youtube %></td>
        <td><%= post.video_vimeo %></td>
        <td><%= post.seocontent %></td>
        <td><%= post.date_chosen %></td>
        <td><%= post.user %></td>
        <td><%= post.user.email %></td>
        <td><%= link_to 'Show', post %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= render "pofo_posts_content_section" %>
<%= render "pofo_footer" %>
<!-- start scroll to top -->
<a class="scroll-top-arrow" href="javascript:void(0);"><i class="ti-arrow-up"></i></a>
<!-- end scroll to top  -->
~~~~~~~~

Abbiamo così un misto di parte statica conforme al tema pofo e parte dinamica da adattare al tema.
Nei prossimi capitoli faremo questo adattamento.


## pofo posts/show aggiungiamo campi alla tabella posts

I campi dinamici che ci si presentano sulla pagina posts/show di pofo sono i seguenti:

* main_image              : già inserita nel model via ActiveStorage
* title                   : già in tabella
* published_at            : già in tabella
* author_name             : già in tabella urers come colonna "name"
* tags                    : già inserito nel model via gem acts-as-taggable-on
* paragraph_title         : string da aggiungere
* paragraph_content       : text da aggiungere
* paragraph_image         : da aggiungere nel model via ActiveStorage
* paragraph_image_label   : string
* paragraph2_title        : string da aggiungere
* paragraph2_content      : text da aggiungere
* paragraph2_image        : da aggiungere nel model via ActiveStorage
* paragraph2_image_label  : string

Cercando la differenza tra "content" e "description" nei tags HTML uno è usato per "plain text" l'altro per testo formattato.
Quindi ho deciso di usare:

* description quando ho un campo di testo semplice
* content quando ho un campo in cui uso trix


Quindi implementiamoli nella nostra tabella posts

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddParagraphColumnsToPosts paragraph_title:string paragraph_content:text paragraph_image_label:string paragraph2_title:string paragraph2_content:text paragraph2_image_label:string
~~~~~~~~

questo crea il migrate

{title=".../db/migrate/xxx_add_paragraph_columns_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddParagraphColumnsToPosts < ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :paragraph_title, :string
    add_column :posts, :paragraph_content, :text
    add_column :posts, :paragraph_image_label, :string
    add_column :posts, :paragraph2_title, :string
    add_column :posts, :paragraph2_content, :text
    add_column :posts, :paragraph2_image_label, :string
  end
end
~~~~~~~~

eseguiamo il migrate

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




### Aggiungiamo le colonne paragraph_image via ActiveStorage nel model

aggiungiamoli nella sezione "# == Attributes =", sottosezione "## ActiveStorage"

{title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=8}
~~~~~~~~
  ## ActiveStorage
  has_one_attached :main_image
  has_one_attached :paragraph_image
  has_one_attached :paragraph2_image
~~~~~~~~




### aggiorniamo il controller

aggiungiamo i campi nella withelist di authors/posts

{title=".../db/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=79}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def post_params
      params.require(:post).permit(:title, :incipit, :content, :type_of_content, :video_youtube, :video_vimeo, :seocontent, :date_chosen, :user_id, :main_image, :published, :published_at, :paragraph_title, :paragraph_content, :paragraph_image, :paragraph_image_label, :paragraph2_title, :paragraph2_content, :paragraph2_image, :paragraph2_image_label)
    end
~~~~~~~~




### aggiorniamo la view

aggiungiamo le nuove colonne nel partial "form" della cartella authors/posts

{title=".../app/views/authors/posts/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
    <div class="col-md-8">
      <div class="field">
        <%= form.label :incipit %>
        <%= form.text_area :incipit, rows: "3", class:'form-control' %>
        <%#= form.trix_editor :incipit, required: true, autofocus: true %>
      </div>
  
      <div class="field"><h6>---Read More---</h6></div>

      <div class="field">
        <%= form.label :paragraph_title %>
        <%= form.text_field :paragraph_title, class: "form-control" %>
      </div>

      <div class="field">
        <%= form.label :paragraph_content, class: "control-label" %>
        <%#= form.text_area :paragraph_content, rows: "8", class:'form-control' %>
        <%= form.trix_editor :paragraph_content, required: true, autofocus: true %>
      </div>

      <div class="field">
        <%= form.label :paragraph_image, class: "control-label" %>
        <%= form.file_field :paragraph_image, class: "form-control" %>
        <br>
        <% if post.paragraph_image.attached? %>
          <%= image_tag post.paragraph_image.variant(resize: "200x200") %>
        <% else %>
          <p>Nessuna immagine presente</p>
        <% end %>
      </div>

      <div class="field">
        <%= form.label :paragraph_image_label %>
        <%= form.text_field :paragraph_image_label, class: "form-control" %>
      </div>

      <div class="field"><h6>---Second pargraph---</h6></div>

      <div class="field">
        <%= form.label :paragraph2_title %>
        <%= form.text_field :paragraph2_title, class: "form-control" %>
      </div>

      <div class="field">
        <%= form.label :paragraph2_content, class: "control-label" %>
        <%#= form.text_area :paragraph2_content, rows: "8", class:'form-control' %>
        <%= form.trix_editor :paragraph2_content, required: true, autofocus: true %>
      </div>

      <div class="field">
        <%= form.label :paragraph2_image, class: "control-label" %>
        <%= form.file_field :paragraph2_image, class: "form-control" %>
        <br>
        <% if post.paragraph2_image.attached? %>
          <%= image_tag post.paragraph2_image.variant(resize: "200x200") %>
        <% else %>
          <p>Nessuna immagine presente</p>
        <% end %>
      </div>

      <div class="field">
        <%= form.label :paragraph2_image_label %>
        <%= form.text_field :paragraph2_image_label, class: "form-control" %>
      </div>

    </div><!--.col-md-8 end-->
~~~~~~~~

nel prossimo capitolo useremo le nuove colonne per posts/show