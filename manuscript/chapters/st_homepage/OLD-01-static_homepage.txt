# Rebisworld - static homepage

per il sito statico abbiamo scelto i seguenti elementi:

* (homepage: index-corporate-4)[http://themes.semicolonweb.com/html/canvas/index-corporate-4.php]
* (pagine interne: page-title-dark)[http://themes.semicolonweb.com/html/canvas/page-title-dark.php]




## Apriamo il branch "Rebisworld Static Homepage"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b rsh
~~~~~~~~




## Prepariamo la pagina statica index

Avremmo l'opzione di creare un solo controller "statics" o "mockups" ed inserire dentro un'azione per ogni pagina statica. Nel nostro caso inizieremo con index.
Questo è elegante ma ci limita nell'aggiungere codice javascript o css dedicato (ad esempio nel sito donamat abbiamo codice dedicato in assets/javascripts/homepage.coffee ed altro codice in assets/javascripts/kiosks.coffee). Questo ci permette prestazioni migliori del sito.

Quindi preferiamo creare un controller per ogni pagina statica per avere questa flessibilità.

Creiamo quindi il controller StHomepage in cui includiamo la sola azione index. Essendo statica non usiamo lo scaffold ma **rails g controller**

I> ATTENZIONE: con "rails generate controller ..." -> uso il SINGOLARE (ed ottengo un controller al singolare)
I>
I> Poiché è un'unica pagina statica metto il controller al singolare.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g controller StHomepage index
~~~~~~~~

non ho nessun migrate perché non mi interfaccio con il database.




## Pagina st_homepage/index

prendiamo il file HTML/index-corporate-4.html e copiamo tutto il codice dentro i tags <body></body> nella view st_homepage/index

{title=".../app/views/st_index/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!-- Document Wrapper
============================================= -->
<div id="wrapper" class="clearfix">
.
.
.
</div><!-- #wrapper end -->

<!-- Go To Top
============================================= -->
<div id="gotoTop" class="icon-angle-up"></div>

<!-- External JavaScripts
============================================= -->
<script type="text/javascript" src="js/jquery.js"></script>
<script type="text/javascript" src="js/plugins.js"></script>

<!-- Footer Scripts
============================================= -->
<script type="text/javascript" src="js/functions.js"></script>

<script>
$(function() {
	$( "#side-navigation" ).tabs({ show: { effect: "fade", duration: 400 } });
});
</script>
~~~~~~~~

Questo se lo visualizziamo non ha nessuno stylesheet e nessun javascript funzionante.

verifichiamo che funziona

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s -b $IP -p $PORT
~~~~~~~~

Il postgresql start possiamo anche non eseguirlo perché al momento non usiamo il database.

aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "st_homepage/index import <body> of HTML/index-corporate-4.html"
~~~~~~~~

andiamo subito in produzione così mano mano che sviluppiamo verifichiamo subito eventuali errori




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku rsh:master
~~~~~~~~

Publicato senza errori. Andiamo avanti.




## Implementiamo l'<header> sul layout

adesso implementiamo la parte di codice del file HTML/index-corporate-4.html che è dentro i tags <header></header>. Per convenzione Rails questa parte è di competenza del file layout/application.

La parte di codice del file HTML/index-corporate-4.html è riportata di seguito:

~~~~~~~~
<!DOCTYPE html>
<html dir="ltr" lang="en-US">
<head>

	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="author" content="SemiColonWeb" />

	<!-- Stylesheets
	============================================= -->
	<link href="http://fonts.googleapis.com/css?family=Lato:300,400,400italic,600,700|Raleway:300,400,500,600,700|Crete+Round:400italic" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" href="css/bootstrap.css" type="text/css" />
	<link rel="stylesheet" href="style.css" type="text/css" />
	<link rel="stylesheet" href="css/dark.css" type="text/css" />
	<link rel="stylesheet" href="css/font-icons.css" type="text/css" />
	<link rel="stylesheet" href="css/animate.css" type="text/css" />
	<link rel="stylesheet" href="css/magnific-popup.css" type="text/css" />

	<link rel="stylesheet" href="css/responsive.css" type="text/css" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />

	<!-- Document Title
	============================================= -->
	<title>Home - Corporate Layout 4 | Canvas</title>

</head>

<body class="stretched">
.
.
.
</body>
</html>
~~~~~~~~

Questa va implementata nel layout/application della nostra app

{title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!DOCTYPE html>
<html>
  <head>
    <title>Rebisworld</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
~~~~~~~~

I due comandi **stylesheet_link_tag** e **javascript_include_tag** puntano al file application che è un file manifest dell'assets_pipeline e le chiamate ad i vari css/scss(saas) e js per convenzione devono essere fatte dal file manifest. Al momento forziamo la mano e commentiamo questi due comandi. Faremo inizialmente tutte le chiamata direttamente da layouts/application.html.erb

{title=".../app/views/layouts/application.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
~~~~~~~~
<!DOCTYPE html>
<html>
  <head>
    <%= csrf_meta_tags %>

    <%#= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%#= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
    
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
	  <meta name="author" content="FlavioAndSemiColonWeb" />
  
  	<!-- Stylesheets
  	============================================= -->
  	<link href="http://fonts.googleapis.com/css?family=Lato:300,400,400italic,600,700|Raleway:300,400,500,600,700|Crete+Round:400italic" rel="stylesheet" type="text/css" />
  	<!-- <link rel="stylesheet" href="css/bootstrap.css" type="text/css" /> -->
  	<%= stylesheet_link_tag    'css/bootstrap', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="style.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'style', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="css/dark.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'css/dark', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="css/font-icons.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'css/font-icons', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="css/animate.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'css/animate', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="css/magnific-popup.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'css/magnific-popup', media: 'all', 'data-turbolinks-track': 'reload' %>
  	<!-- <link rel="stylesheet" href="css/responsive.css" type="text/css" /> -->
    <%= stylesheet_link_tag    'css/responsive', media: 'all', 'data-turbolinks-track': 'reload' %>

  	<meta name="viewport" content="width=device-width, initial-scale=1" />
  
  	<!-- Document Title
  	============================================= -->
  	<title>Rebisworld</title>

  </head>

  <body class="stretched">
    <%= yield %>
  </body>
</html>
~~~~~~~~

Se proviamo adesso avremo errore perché mancano i files. copiamo i files richieti da HTML nell'assets_pipeline (andrebbero su vendor ma li ho messi su asset)
DA SCRIVERE MEGLIO

Se proviamo una volta copiati i files riceviamo errore perché mancano nel precompile. 

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=28}
~~~~~~~~
    # precompile vendor assets stylesheets                                                             
    config.assets.precompile += ['css/bootstrap.css',
                                 'style.css',
                                 'css/dark.css',
                                 'css/font-icons.css',
                                 'css/animate.css',
                                 'css/magnific-popup.css',
                                 'css/responsive.css'
                                ]
~~~~~~~~

Non ho più errori ma sul browser ho tutto bianco. Questo è normale perché viene impostato un velo bianco e da javascript viene visualizzato un preloader.
Dobbiamo quindi abilitare javascript per vedere la ns pagina.
Prima però verifichiamo se riusciamo ad andare in produzione senza errori.


aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "st_homepage/index import stylesheets"
~~~~~~~~

andiamo subito in produzione così mano mano che sviluppiamo verifichiamo subito eventuali errori




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku rsh:master
~~~~~~~~

funziona senza errori. possiamo procedere.



## Implementiamo javascripts

la parte javascript è in fondo al <body> quindi implementiamola con convenzione Rails.

{title=".../app/views/st_index/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1103}
~~~~~~~~
<!-- External JavaScripts
============================================= -->
<!-- <script type="text/javascript" src="js/jquery.js"></script> -->
<%= javascript_include_tag 'js/jquery', 'data-turbolinks-track' => true %>
<!-- <script type="text/javascript" src="js/plugins.js"></script> -->
<%= javascript_include_tag 'js/plugins', 'data-turbolinks-track' => true %>

<!-- Footer Scripts
============================================= -->
<!-- <script type="text/javascript" src="js/functions.js"></script> -->
<%= javascript_include_tag 'js/functions', 'data-turbolinks-track' => true %>

<script>
$(function() {
	$( "#side-navigation" ).tabs({ show: { effect: "fade", duration: 400 } });
});
</script>
~~~~~~~~

Non ci resta che ricopiare i files dentro l'assets_pipeline. Inoltre inserirli in config/application.rb per il precompile

{title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=38}
~~~~~~~~
    # precompile vendor assets javascripts                                                             
    config.assets.precompile += ['js/jquery.js',
                                 'js/plugins.js',
                                 'js/functions.js'
                                ]
~~~~~~~~

Adesso se proviamo funziona alla grande! Mancano solo le immagini

aggiorniamo git 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "st_homepage/index import javascripts"
~~~~~~~~

andiamo subito in produzione così mano mano che sviluppiamo verifichiamo subito eventuali errori




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku rsh:master
~~~~~~~~

funziona senza errori. possiamo procedere.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge rsh
$ git branch -d rsh
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
