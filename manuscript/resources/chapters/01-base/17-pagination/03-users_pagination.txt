# Aggiungiamo paginazione agli utenti





## Apriamo il branch "User Pagination"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b up
```




## Aggiungiamo il Backend al nostro controller

Non serve perché abbiamo inserito " include Pagy::Backend " a livello di application_controller




## Implementiamo la paginazione per users_controller

Chiamiamo la funzione "pagy()" nelle azioni dei nostri controllers. Implementiamo la paginazione nell'azione "index"

{id="02-09-01_03", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
    @pagy, @users = pagy(User.all)
```

[[ TODO - DA RIVEDERE AGGIUNGENDO AUTORIZZAZIONE SU PUNDIT
    Aggiungiamo ordinamento discendente in base a quando sono creati ed implementiamo un "livello di sicurezza" ossia se non si è amministratori viene visualizzato il solo utente loggato. Questa implementazione di "sicurezza" non è fatta seguendo la procedura corretta. Andrebbe prima impostata a livello di autorizzazione con pundit. 
    
    {id="02-09-01_03", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
    ```
        @pagy, @users = pagy(User.where(id: current_user.id)) unless current_user.admin?
        @pagy, @users = pagy(User.all.order(created_at: "DESC")) if current_user.admin?
    ```

    [Codice 03](#02-09-01_03all)
]]






## Aggiungiamo il Frontend alle nostre pagine

Non serve perché abbiamo inserito " include Pagy::Frontend " a livello di application_helper




### Implementiamo la pagina users/index

Usiamo l'helper "pagy_nav()" messo a disposizione da pagy e lo passiamo con sanitize (un eccesso di zelo in sicurezza che paghiamo con un leggero abbassamento delle prestazioni).

{title="views/users/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=36}
```
<%= sanitize pagy_nav(@pagy) %>
```




## Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/users

E vediamo la paginazione. Al momento i link sono disattivati perché abbiamo pochi utenti.
Attenzione! ricordiamoci che dobbiamo essere loggati altrimenti riceviamo un errore perché non abbiamo gestito current_user = nil.




## Scegliamo quanti records per pagina

Di default sono impostati 20 records ogni pagina. Riduciamoli a 2 così avremo attivi i links per la paginazione.


{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
    @pagy, @users = pagy(User.all, items: 2)
```




## Ordiniamo l'elenco in modo decrescente in base alla data di creazione

Di default l'ordinamento è crescente in base l'ultima modifica fatta, quindi ogni modifica l'utente va in fondo all'elenco. Per lasciare un elenco più "statico" inseriamo l'ordinamento decrescente in base alla creazione.


{title=".../app/controllers/authors/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
    @pagy, @users = pagy(User.all.order(created_at: "DESC"), items: 2)
```




## Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/authors/posts

E vediamo la paginazione. Questa volta appaiono i links di navigazione tra le pagine


