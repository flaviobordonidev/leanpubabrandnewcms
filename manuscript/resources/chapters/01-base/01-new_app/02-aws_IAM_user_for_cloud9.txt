# Creiamo uno IAM user per Cloud9

Non è una buona idea lavorara su cloud9 come root. Lo stesso Amazon Web Server consiglia di creare un utente IAM per gestire cloud9.


Risorse interne:

* 99-rails_references/aws_cloud9/02-share_environment




## I tre ambienti di cloud9

Su cloud9 ci sono tre raggruppamenti di ambiente:

* Your environments
    gli ambienti creati da uno specifico utente IAM. Ad esempio:
    - user_FB@870054134107 vede i suoi ambienti
    - user_AB@870054134107 vede i suoi ambienti
* Shared with you
    gli ambienti in cui l'utente è stato invitato
* Account environments
    gli ambienti di tutti gli utenti IAM di uno specifico account (Ad esempio: 870054134107)

Nel gruppo di ambiente "


Se decidiamo di creare un utente IAM facciamo ATTENZIONE:

l'utente IAM è visto come una persona differente dall'utente principale "root" e quindi avrà un suo ambiente cloud9.
Le app create come "root" o come un altro utente IAM non saranno visibili in "Your environments". Le possiamo comunque trovare in "Account environments".

E' quindi importante scegliere con cura l'utente:

* se si vogliamo raggruppare le app fatte per i vari clienti possiamo usare IAM users con il nome dei nostri clienti
* se vogliamo vedere tutte le app in un unico punto usiamo un unico IAM user. 




## Effettuiamo il login come amministratore

Vediamo adesso come creare uno IAM user dedicato a cloud9. 


https://console.aws.amazon.com/

Scegliamo il link: "Sign-in using root account credentials"




## Creiamo un nuovo utente dedicato all'uso di Cloud9

Creiamo un nuovo utente IAM con permesso di effettuare il login sulla console aws da assegnare a Flavio Bordoni.

L'utente IAM " user_FB " è quello che Flavio Bordoni userà per lavorare su amazon web server di volta in volta gli implementeremo le varie autorizzazioni.
Usiamo il prefisso " user_ " per differenziare gli utenti IAM che identificano delle persone fisiche da quelli che identificano applicativi.

Abbiamo due tipi di prefissi per gli utenti IAM:

* user_ : identifica persone fisiche che accedono ai vari servizi di aws.
* bot_  : identifica applicativi che accedono ai vari servizi di aws.


AWS -> Service -> IAM -> Users -> Add user

* Una volta fatto login dalla ConsoleHome AWS faccaimo click sul service "IAM". 
* Andiamo sul link Users e ne creiamo uno nuovo cliccando "Add user".


* Step1
    User name   : user_fb
    Access type : AWS Management Console access
    Console password 
    -> Custom password : mypassword
    Require password reset : no
* Step2
    Permissions 
    -> policy : AmazonS3FullAccess
    -> policy : AWSCloud9Administrator
    -> policy : AWSCloud9EnvironmentMember
    -> policy : AWSCloud9User
* Step3
    Non aggiungiamo nessun tag
* Step4
    Visualizza il riepilogo delle scelte fatte
* Step5

![Fig. 01](chapters/01-base/01-new_app/02_fig01-aws_IAM_user_new_step1.png)

![Fig. 02](chapters/01-base/01-new_app/02_fig02-aws_IAM_user_new_step2a.png)

![Fig. 03](chapters/01-base/01-new_app/02_fig03-aws_IAM_user_new_step2b.png)


[Codice 01.../config/database.yml](#01-01-05_01all)

{id: "01-01-05_01", title: ".../config/database.yml", format: yaml, line-numbers: true, number-from: 24}
```
development:
  <<: *default
  database: bl6_0_development
```
[vai da pippo](#pippo)




![Fig. 04](images/01-base/01-new_app/02_fig04-aws_IAM_user_new_step3.png)

![Fig. 05](images/01-base/01-new_app/02_fig05-aws_IAM_user_new_step4.png)




## Effettuiamo login come nuovo IAM utente Cloud9

Guardiamo lo User ARN -> arn:aws:iam::93703132901:user/cloud9

Il numero è usato per il login come utente


Effettuiamo il logout come amministratore

Nel login scegliamo -> "Sign in to a different account"

![Fig. 04](images/01-base/01-new_app/02_fig04-aws-login-as-iam-user-cloud9.png)







## Il codice del capitolo

blablabla

{title: "Hello World in Ruby"}
```ruby
puts "hello"
```

blablabla blabla

[Codice 01 - .../config/database.yml](#01-01-05_01)

[pippo]{id: "pippo"}

{id: "01-01-05_01all", title: ".../config/database.yml", format: yaml, line-numbers: true, number-from: 1}
```
# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On macOS with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: bl6_0_development

  # The specified database role being used to connect to postgres.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database.
  #username: bl6_0

  # The password associated with the postgres role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: bl6_0_test

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
production:
  <<: *default
  database: bl6_0_production
  username: bl6_0
  password: <%= ENV['BL6_0_DATABASE_PASSWORD'] %>
```

xsxsxsxsx sx 
sx sxx 
s 
xsxsxsxsx 


{format: ruby}
![](resources/chapters/01-base/01-new_app/07_01-gemfile.rb "Hello World in Ruby")
