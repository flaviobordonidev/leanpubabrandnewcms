# Aggiungiamo i campi Immagine e Bio agli utenti

Questo capitolo è anche detto authors_account perché gestiamo l'account dell'autore (questa definizione avrà più senso nei prossimi capitoli quando introdurremo gli articoli e gli autori)

[[ TESTO DA RIVEDERE PERCHE' PRECEDENTEMENTE INSERITO PIù AVANTI NEL LIBRO

  Gli autori non sono altro che users con il ruolo di autore (role="authors")
  Come gestire un account per gli autori:
  
  * Possiamo fare come abbiamo già fatto per posts creando un modulo Authors::Posts per gestire in maniera differenziata gli autori.
  * Possiamo utilizzare users_controller che è già in piedi. Usiamo la pagina users/show per visualizzare l'account
  * Possiamo creare un controller completamente sganciato es: accounts_controller e puntare alla tabella users con le "azioni" da dentro il controller.
  
  Analiziamo cosa ci serve per l'utente che si è loggato con ruolo di autore:
  
  1. Nella dashboard una view di modifica dei dati dell'autore che chiamiamo pagina di "account". Questa è praticamente users/edit del current_user.
  2. Nel "tema" una view con l'elenco di tutti gli autori. Creiamo l'azione authors_index in users_controller.
  3. Nel "tema" una view con l'informazione dettagliata del singolo autore. Usiamo l'azione "show" o creiamo l'azione authors_show in users_controller.
  
  Dall'analisi la scelta più semplice è utilizzare users_controller.
  La scelta di avere un modulo Authors::Users è interessante ma ci complica la vita. Le views dentro authors, per mantenere la stessa logica di posts, sarebbero quelle della dashboard e quindi quelle che permettono le modifiche.
  Dovremmo poi creare un'altra struttura per la visualizzazione che non puà essere Posts perché è già usata dall'amministratore per gestire tutti gli utenti.
  La scelta di un controller sganciato la puoi vedere al capitolo zz01-accounts. Didatticamente interessante ma si allontana un po' dalle convenzioni Rails.

]]




## Apriamo il branch "Add Fields to Users"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b afu
~~~~~~~~




## Aggiungiamo il campo Bio

Alla tabella "users" aggiungiamo la colonna "biography"

ATTENZIONE:
Non usate come nome di colonna "bio" perché su heroku prende errore essendo un nome riservato.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddBiographyToUsers biography:text
~~~~~~~~

questo crea il migrate:

{title=".../db/migrate/xxx_add_biography_to_users.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddBioToUsers < ActiveRecord::Migration[5.2]
  def change
    add_column :users, :biography, :text
  end
end
~~~~~~~~

eseguiamo il migrate 

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails db:migrate
~~~~~~~~




## Aggiungiamo il campo Image

Poiché usiamo ActiveStorage non aggiungiamo nessuna colonna alla tabella users ma interveniamo lato model.
Attiviamo upload immagine per il model User nella sezione "# == Attributes"

{id="02-05-03_01", title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=12}
~~~~~~~~
  ## ActiveStorage
  has_one_attached :account_image
~~~~~~~~

[Codice 01](#02-05-03_01all)

La chiamiamo account_image per differenziarla da eventuali altre immagini che volessimo inserire per gli "users".
Potevamo chiamarla semplicemente "image" ed avremmo avuto "@user.image" ma "@user.account_image" ci piaceva di più.




## Aggiorniamo il controller

Inseriamo i nostri nuovi campi "bio" e "account_image" nella whitelist

{id="02-05-03_02", title=".../app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=88}
~~~~~~~~
    # Never trust parameters from the scary internet, only allow the white list through.
    def user_params
      params.require(:user).permit(:name, :email, :password, :password_confirmation, :remember_created_at, :role, :biography, :account_image)
    end
~~~~~~~~

[Codice 02](#02-05-03_02all)




## Implementiamo la view

{id="02-05-03_03", title=".../app/views/users/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=81}
~~~~~~~~
           <div class="field">
              <%= form.label :biography %>
              <%= form.text_area :biography, rows: "5", class: "form-control" %>
            </div>
~~~~~~~~

{title=".../app/views/users/_form.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=81}
~~~~~~~~
            <div class="field">
              <%= form.label :account_image %>
              <br><img src="https://images.pexels.com/photos/634843/pexels-photo-634843.jpeg?auto=compress&cs=tinysrgb&dpr=1&fit=crop&h=100&w=100" alt="Immagine demo presa da pexels.com" width="100" height="100"><br>
              <%= form.file_field :account_image %>
            </div>
~~~~~~~~

[Codice 03](#02-05-03_03all)


Aggiorniamo la pagina "show"

{id="02-05-03_04", title=".../app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=23}
~~~~~~~~
<p>
  <strong>Biography:</strong>
  <%= @user.biography %>
</p>

<p>
  <strong>Image:</strong>
  <% if @user.account_image.attached? %>
    <%= image_tag @user.account_image %>
  <% else %>
    Nessuna immagine presente
  <% end %>
</p>
~~~~~~~~

[Codice 04](#02-05-03_04all)

INFO:
non usiamo ".present?" perché darebbe sempre "true". Per verificare la presenza del file allegato dobbiamo usare ".attached?"





### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

andiamo alla pagina con l'elenco degli articoli ossia sull'URL:

* https://mycloud9path.amazonaws.com/users/1




## Ridimensioniamo immagine e la rendiamo rotonda

Per ridimensionare l'immagine usiamo variant che si basa su ImageMagick. Vediamo di seguito come si comporta il ridimensionamento con tre soluzioni differenti:

~~~~~~~~
<p>
  <strong>Image:</strong>
  <% if @user.account_image.attached? %>
    <%= image_tag @user.account_image, style: "height: 100px; weight: 100px" %>
    <%= image_tag @user.account_image.variant(resize: "100x100!") %>
    <%= image_tag @user.account_image.variant(combine_options: {resize: '100>', gravity: 'Center', crop: '100x100+0+0' }) %>
  <% else %>
    Nessuna immagine presente
  <% end %>
</p>
~~~~~~~~

Rendiamo tonde le immagini

~~~~~~~~
<p>
  <strong>Image:</strong>
  <% if @user.account_image.attached? %>
    <%= image_tag @user.account_image, style: "height: 100px; weight: 100px; border-radius: 50%" %>
    <%= image_tag @user.account_image.variant(resize: "100x100!"), style: "border-radius: 50%" %>
    <%= image_tag @user.account_image.variant(combine_options: {resize: '100>', gravity: 'Center', crop: '100x100+0+0' }), style: "border-radius: 50%" %>
  <% else %>
    Nessuna immagine presente
  <% end %>
</p>
~~~~~~~~




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

andiamo all'URL:

* https://mycloud9path.amazonaws.com/users/1




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add fields to users"
~~~~~~~~




## Pubblichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku afu:master
$ heroku run rails db:migrate
~~~~~~~~




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge afu
$ git branch -d afu
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~








## Il codice del capitolo




[Codice 01](#02-15-01_01)

{id="02-15-01_01all", title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
