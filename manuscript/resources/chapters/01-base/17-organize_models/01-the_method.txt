# Organizzare i models

Un modo semplice ed efficace per mantenere organizzato il codice all'interno dei models è quello di raggrupparlo all'interno di "divisori" prestabiliti.
In questo capitolo studiamo il metodo scelto.


Risorse web

*[Organizing Ruby on Rails Models](https://www.zmwolski.com/Organizing-Ruby-on-Rails-Models)




## Divisori da mettere dentro i models

Allinterno dei models della nostra applicazione usare i seguenti divisori

{title=".../app/models/my_model.rb", lang=ruby, line-numbers=on, starting-line-number=14}
~~~~~~~~
  # == Constants ============================================================
  
  # == Extensions ===========================================================

  # == Attributes ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
~~~~~~~~




### == Constants

Sono variabili fisse in genere tutte scritte in maiuscolo.

* MY_CONSTANT = ...




### == Extensions

Sono delle linee di codice precedute dalla chiamata "extend" 

* extend MyModule
* extend FriendlyId




### == Attributes

Sono delle "nuove colonne" che vengono fornite alla tabella del model. In altre parole sono attributi della tabella non definiti a livello di database.
  # ATTRIBUTES NOT MAPPED IN DATABASE (getter and setter methods)

* attr_accessor :my_column_x
* translates :my_article_description
* has_attached_file :my_logo_image
* friendly_id :title, use: :slugged




### == Relationships

Sono le relazioni uno-a-uno, uno-a-molti, molti-a-molti, polimoprfiche, ...

* has_many :documents
* belongs_to :user 




### == Validations

Sono le funzioni di validazione implementate su alcune colonne della tabella.

* validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true




### == Scopes

Sono chiamate di tipo lambda a delle queries che possiamo anche concatenare.

* scope :published, -> { where(published: true) }
* scope :search, -> (query) {where("full_address ILIKE ? OR address_tag ILIKE ?", "%#{query.strip}%", "%#{query.strip}%")}
* scope :tagged, -> (tag){ tagged_with(tag) }




### == Callbacks

Sono le chiamate che "solitamente" vediamo tra le prime ad esempio nei controllers. Nel caso del model sono finite un po' più in basso.
Sono le chiamate alle funzioni che vengono fatte "scattare" da un determinato evento (trigger).

* before_validation :my_method_that_is_activated
* after_validation :my_other_method_that_is_activated




### == Class Methods

sono i metodi scritti dentro il model che fanno riferimento a se stesso.

def self.my_class_method
  ...
end




### == Instance Methods

sono i metodi scritti dentro il model.

def my_class_method
  ...
end





### Esempio

  # == Constants ============================================================
  
  GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

  # == Extensions ===========================================================

  ## friendly_id
  extend FriendlyId

  # == Attributes ===========================================================
  
  ## friendly_id
  friendly_id :title, use: :slugged

  ## globalize
  translates :sector, :memo, :fallbacks_for_empty_translations => true

  ## paperclip
  attr_accessor :remove_logo
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }
  has_attached_file :avatar, styles: {
    square_100: ‘100x100#’,
    square_300: ‘300x300#’
  }
  
  # == Relationships ========================================================
  
  ## association one-to-many
  has_many :documents

  # == Validations ==========================================================
  
  validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true

  # == Scopes ===============================================================

  scope :published, -> { where(published: true) }
  scope :search, -> (query) {where("full_address ILIKE ? OR address_tag ILIKE ?", "%#{query.strip}%", "%#{query.strip}%")}
  scope :tagged, -> (tag){ tagged_with(tag) }

  # == Callbacks ============================================================
  
  before_validation :normalize_name, on: :create
  after_validation :set_location, on: [ :create, :update ]
    
  # == Class Methods ========================================================
  
  def self.for_select
    all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
  end

  def self.from_the_class
    "Hello, from a class method"
  end

  # == Instance Methods =====================================================

  def from_an_instance
    "Hello, from an instance method"
  end
 
  private
    def normalize_name
      self.name = name.downcase.titleize
    end
 
    def set_location
      self.location = LocationService.query(self)
    end




## Ho fatto una domanda nel post e la risposta è un po' diversa da quanto detto finora

### Question

A really great way to organize the model that I'would like to implement but I'm strugling with the following:
How do you use this way to organize with the methods that are "protected" and "private" ?

For example how can I organize the below model?

---
before_validation :normalize_name, on: :create
after_validation :set_location, on: [ :create, :update ]

GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

# paperclip
attr_accessor :remove_logo

# globalize required
translates :sector, :memo, :fallbacks_for_empty_translations => true

# paperclip required
has_attached_file :logo, styles: { thumb: ["64x64!", :png] }

has_attached_file :avatar, styles: {
square_100: ‘100x100#’,
square_300: ‘300x300#’
}

def main_method
method1
end

# association one-to-many
has_many :documents

def self.for_select
all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
end

def from_an_instance
"Hello, from an instance method"
end

def self.from_the_class
"Hello, from a class method"
end

validates: email, presence: true,
uniqueness: true,
email_format: true

protected 
def method1
puts "Hi this is #{self.class}"
end

private
def normalize_name
self.name = name.downcase.titleize
end

def set_location
self.location = LocationService.query(self)
end
---

Thanks




### Reply

Thanks for your question.

A little late, but I suppose better late than never.
Typically, I leave private and protected methods to the end. Since the class forces the indentation of all the methods, I typically don't indent the "types" so they stick out.

Here is your model organized based the suggestions in the model:

{title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=14}
~~~~~~~~
class User < ActiveRecord::Base
  # == Constants ============================================================

  GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

  # == Attributes ===========================================================

  # paperclip
  attr_accessor :remove_logo

  # == Extensions ===========================================================

  # globalize required
  translates :sector, :memo, :fallbacks_for_empty_translations => true
  # paperclip required
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }

  # == Relationships ========================================================

  has_attached_file :avatar, styles: {
    square_100: ‘100x100#’,
    square_300: ‘300x300#’
  }
  # association one-to-many
  has_many :documents

  # == Validations ==========================================================
  validates: email, presence: true, uniqueness: true,
                    email_format: true

  # == Scopes ===============================================================

  # == Callbacks ============================================================
  before_validation :normalize_name, on: :create
  after_validation :set_location, on: [ :create, :update ]

  # == Class Methods ========================================================
  def self.from_the_class
    "Hello, from a class method"
  end

  def self.for_select
    all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
  end

  # == Instance Methods =====================================================
  def main_method
    method1
  end

  def from_an_instance
    "Hello, from an instance method"
  end

protected 
  def method1
    puts "Hi this is #{self.class}"
  end

private
  def normalize_name
    self.name = name.downcase.titleize
  end

  def set_location
    self.location = LocationService.query(self)
  end
end
~~~~~~~~