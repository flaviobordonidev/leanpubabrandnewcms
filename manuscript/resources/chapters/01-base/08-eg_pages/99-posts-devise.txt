# Protezione degli articoli con devise

Attiviamo una "protezione" con devise che si sovrappone al concetto di "autorizzazione" che vedremo più avanti.
In pratica rendiamo alcune pagine non visibili a meno di non fare login, a meno di non autenticarsi.
In questo caso l'autenticazione porta con se un'autorizzazione basica. Tutte le persone che si autenticano sono autorizzate a vedere la pagina, invece le persone che non si autenticano non sono autorizzate a vedere la pagina.
La "vera" autorizzazione la vedremo nei prossimi capitoli e permetterà di dare diversi livelli di autrizzazione alle varie persone che si autenticano a seconda del loro "ruolo".




## Instradiamo verso gli articoli dopo il login

Effettuato il login invece di tornare alla pagina di root (homepage) andiamo alla lista degli articoli (posts)
Lasciamo la homepage come pagina di **root** e dopo il login reinstradiamo sulla pagina **users/sohw**

{title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
    get 'example_posts', to:'example_posts#index', as: :user_root #creates user_root_path (default path after sign_in)
~~~~~~~~

verifichiamo che funziona tutto


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add homepage login to example_posts"
~~~~~~~~


I> Attenzione se Proteggiamo anche la pagina root (homepage) con devise abbiamo un comportamento "strano"

{title="app/controllers/homepage_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_filter :authenticate_user!
~~~~~~~~

In questo caso al primo login si entra nella homepage. 
Se si riprova a fare login - http://localhost:3000/users/sign_in - quando si è già loggati allora si viene reinstradati su users/show.

Meglio lasciare la homepage pubblica con il link che ti fa fare login all'area riservata (protetta da devise + pundit).






## Attiviamo l'autorizzazione per la creazione, modifica ed eliminazione degli articoli

Mettiamo la porta sul controller di users

[codice: users controllers 01](#code-devise-users-controllers-01)

{title="app/controllers/users_controller.rb", lang=ruby, line-numbers=on, starting-line-number=2}
~~~~~~~~
before_action :authenticate_user!

  def show
    #@user = User.find(current_user.id)
    # current_user is generated by the gem "devise"
    @user = current_user
  end
~~~~~~~~

I> before_action ha sostituito il "deprecated" before_filter

I> Attenzione!
I>
I> For Rails 5, note that protect_from_forgery is no longer prepended to the before_action chain, so if you have set authenticate_user before protect_from_forgery, your request will result in "Can't verify CSRF token authenticity." To resolve this, either change the order in which you call them, or use protect_from_forgery prepend: true.


I> Attenzione!
I> Strong Parameters
I> The Parameter Sanitizer API has changed for Devise 4

Al momento non mi preoccupo dei due avvisi in alto ma ne terremo conto nei capitoli successivi.




## Lavoriamo sul view users show

{title="app/views/users/show.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=3}
~~~~~~~~
<p>User: <%= @user.email %></p>
~~~~~~~~

verifichiamo che funziona tutto con - $ rails s -
http://localhost:3000
http://localhost:3000/homepage/index
http://localhost:3000/users/1
http://localhost:3000/users/sign_in

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
git add -A
git commit -m "add users-show"
~~~~~~~~

