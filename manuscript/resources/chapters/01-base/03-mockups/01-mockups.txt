{id: 01-base-03-mockups-01-mockups}
# Cap 3.1 -- Mockups

I mockups sono delle pagine statiche di esempio usate per verificare la GUI (Graphic User Interface).
Servono principalmente in fase di sviluppo e sono un buon modo di interfacciamento tra Graphic Designer e Code Developper.




## Apriamo il branch "Mockups Static Pages"

Assicuriamoci di essere nella directory della nostra applicazione Rails e creiamo il ramo con git.

{caption: "terminal", format: bash, line-numbers: false}
```
$ cd ~/environment/bl6_0
$ git checkout -b msp


user_fb:~/environment/bl6_0 (master) $ cd ~/environment/bl6_0
user_fb:~/environment/bl6_0 (master) $ git checkout -b msp
Switched to a new branch 'msp'
user_fb:~/environment/bl6_0 (msp) $ 
```




## Creiamo il controller e le views per i mockups

non usiamo né il " generate scaffold " né il " generate model " perché le pagine di mockups non usano dati archiviati nel database.
Usiamo il " generate controller " e gli associamo le azioni " page_a " e " page_b". 
(non gli associamo le classiche azioni restful: index, show, edit, new, ...)

I> ATTENZIONE: con "rails generate controller ..." -> usiamo il PLURALE ed otteniamo un controller al plurale.

Poiché sono più pagine statiche usiamo il nome del controller al plurale anche se non abbiamo un elenco di elementi da visualizzare

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails g controller Mockups page_a page_b


user_fb:~/environment/bl6_0 (msp) $ rails g controller Mockups page_a page_b
Running via Spring preloader in process 28147
      create  app/controllers/mockups_controller.rb
       route  get 'mockups/page_a'
get 'mockups/page_b'
      invoke  erb
      create    app/views/mockups
      create    app/views/mockups/page_a.html.erb
      create    app/views/mockups/page_b.html.erb
      invoke  test_unit
      create    test/controllers/mockups_controller_test.rb
      invoke  helper
      create    app/helpers/mockups_helper.rb
      invoke    test_unit
      invoke  assets
      invoke    scss
      create      app/assets/stylesheets/mockups.scss
```

non abbiamo nessun migrate perché non ci interfacciamo con il database.




### Verifichiamo preview

Vediamo la nostra applicazione rails funzionante. Attiviamo il webserver

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

e vediamo i vari URLs sul nostro browser:

* https://mycloud9path.amazonaws.com
* https://mycloud9path.amazonaws.com/mockups/page_a
* https://mycloud9path.amazonaws.com/mockups/page_b





## Instradiamo con routes

Aggiorno il file routes per mettere l'homepage come pagina principale (root)

{id: "01-03-01_01", caption: ".../config/routes.rb -- codice 01", format: ruby, line-numbers: true, number-from: 3}
```
  root 'mockups#page_a'
```

[tutto il codice](#01-03-01_01all)





### Verifichiamo preview

Attiviamo il webserver

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

e vediamo che addesso sull'URL della root "/" ci reinstrada su page_a:

* https://mycloud9path.amazonaws.com
* https://mycloud9path.amazonaws.com/mockups/page_a
* https://mycloud9path.amazonaws.com/mockups/page_b




## Vediamo gli instradamenti da terminale

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails routes


user_fb:~/environment/bl6_0 (msp) $ rails routes
                               Prefix Verb   URI Pattern                                                                              Controller#Action
                                 root GET    /                                                                                        mockups#page_a
                       mockups_page_a GET    /mockups/page_a(.:format)                                                                mockups#page_a
                       mockups_page_b GET    /mockups/page_b(.:format)                                                                mockups#page_b
        rails_mandrill_inbound_emails POST   /rails/action_mailbox/mandrill/inbound_emails(.:format)                                  action_mailbox/ingresses/mandrill/inbound_emails#create
        rails_postmark_inbound_emails POST   /rails/action_mailbox/postmark/inbound_emails(.:format)                                  action_mailbox/ingresses/postmark/inbound_emails#create
           rails_relay_inbound_emails POST   /rails/action_mailbox/relay/inbound_emails(.:format)                                     action_mailbox/ingresses/relay/inbound_emails#create
        rails_sendgrid_inbound_emails POST   /rails/action_mailbox/sendgrid/inbound_emails(.:format)                                  action_mailbox/ingresses/sendgrid/inbound_emails#create
         rails_mailgun_inbound_emails POST   /rails/action_mailbox/mailgun/inbound_emails/mime(.:format)                              action_mailbox/ingresses/mailgun/inbound_emails#create
       rails_conductor_inbound_emails GET    /rails/conductor/action_mailbox/inbound_emails(.:format)                                 rails/conductor/action_mailbox/inbound_emails#index
                                      POST   /rails/conductor/action_mailbox/inbound_emails(.:format)                                 rails/conductor/action_mailbox/inbound_emails#create
    new_rails_conductor_inbound_email GET    /rails/conductor/action_mailbox/inbound_emails/new(.:format)                             rails/conductor/action_mailbox/inbound_emails#new
   edit_rails_conductor_inbound_email GET    /rails/conductor/action_mailbox/inbound_emails/:id/edit(.:format)                        rails/conductor/action_mailbox/inbound_emails#edit
        rails_conductor_inbound_email GET    /rails/conductor/action_mailbox/inbound_emails/:id(.:format)                             rails/conductor/action_mailbox/inbound_emails#show
                                      PATCH  /rails/conductor/action_mailbox/inbound_emails/:id(.:format)                             rails/conductor/action_mailbox/inbound_emails#update
                                      PUT    /rails/conductor/action_mailbox/inbound_emails/:id(.:format)                             rails/conductor/action_mailbox/inbound_emails#update
                                      DELETE /rails/conductor/action_mailbox/inbound_emails/:id(.:format)                             rails/conductor/action_mailbox/inbound_emails#destroy
rails_conductor_inbound_email_reroute POST   /rails/conductor/action_mailbox/:inbound_email_id/reroute(.:format)                      rails/conductor/action_mailbox/reroutes#create
                   rails_service_blob GET    /rails/active_storage/blobs/:signed_id/*filename(.:format)                               active_storage/blobs#show
            rails_blob_representation GET    /rails/active_storage/representations/:signed_blob_id/:variation_key/*filename(.:format) active_storage/representations#show
                   rails_disk_service GET    /rails/active_storage/disk/:encoded_key/*filename(.:format)                              active_storage/disk#show
            update_rails_disk_service PUT    /rails/active_storage/disk/:encoded_token(.:format)                                      active_storage/disk#update
                 rails_direct_uploads POST   /rails/active_storage/direct_uploads(.:format)                                           active_storage/direct_uploads#create
user_fb:~/environment/bl6_0 (msp) $ 
```

Nella colonna "Prefix" c'è la voce che utiliziamo per creare i "paths" per i nostri links: "Prefix"+"_path"

esempi:

* root_path
* mockups_page_a_path
* mockups_page_b_path




## Implementiamo le due pagine di mockups

{caption: ".../views/mockups/page_a.html.erb -- codice 02", format: ruby, line-numbers: true, number-from: 1}
```
<h1> Pagina A </h1>
<p> Il testo verrà preso dal database ma alcuni messaggi sono passati dall'applicazione ed è quindi bene che vengano tradotti per essere pronti a supportare più lingue. </p>
<br>
<p>  <%= link_to 'andiamo alla pagina B', mockups_page_b_path %> </p>
```


{caption: ".../views/mockups/page_b.html.erb -- codice 03", format: ruby, line-numbers: true, number-from: 1}
```
<h1> Benvenuti nella pagina B </h1>
<p>  <%= link_to 'Torniamo alla pagina A',mockups_page_a_path %> </p>
<p>  <%= link_to 'Torniamo alla homepage', root_path %> </p>
```




## Verifichiamo preview

Attiviamo il webserver

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

e vediamo i vari URLs sul nostro browser:

* https://mycloud9path.amazonaws.com
* https://mycloud9path.amazonaws.com/mockups/page_a
* https://mycloud9path.amazonaws.com/mockups/page_b

adesso invece di scrivere sull'URL, per spostarsi tra le pagine, possiamo cliccare sui links.




## Salviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "implement mockups"
```




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge msp
$ git branch -d msp
```




## Il codice del capitolo




{id: "01-03-01_01all", caption: ".../config/routes.rb -- codice 01", format: ruby, line-numbers: true, number-from: 1}
```
Rails.application.routes.draw do

  root 'mockups#page_a'

  get 'mockups/page_a'
  get 'mockups/page_b'
  # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
end
```

[indietro](#01-03-01_01)

