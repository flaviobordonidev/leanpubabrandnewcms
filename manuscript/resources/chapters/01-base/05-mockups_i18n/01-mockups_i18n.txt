{id: 01-base-05-mockups_i18n-01-mockups_i18n}
# Cap 5.1 -- Internazionalizzazione della pagina di mockups

Attiviamo l'internazionalizzazione statica

Invece di scrivere i contenuti statici (quelli non presi dal database) già tradotti è più elegante mettere dei "segnaposto" che saranno poi usati dai vari files di traduzione nelle varie lingue. Questo permette di avere un'applicazione già pronta per essere tradotta in più lingue.

Il nome dei "segnaposto" li mettiamo in inglese per dare un'impronta world-wide al nostro applicativo che ci permetterà in futuro di assumere sviluppatori da tutto il mondo.




## Apriamo il branch "Mockups Internazionalizazione"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b mi
```




## Internazionalizazione (i18n)

Per internazionalizzazione si intende la traduzione dell'applicazione nelle varie lingue.

L'internazionalizzazione si divide in due parti:

* Statica = traduzione delle stringhe usate nell'applicazione. Non traduce i dati del database.
* Dinamica = traduzione dei dati del database.

Al momento noi ci occupiamo solo di quella statica.




## I18n statico con YAML

Per tradurre in varie lingue il contenuto statico della nostra applicazione (quello che non è contenuto nel database) utilizziamo il file yaml che è disponibile di default su Rails. Non c'è necessità di installare una nuova gemma. Rimane comunque la possibilità di cambiare successivamente solo il backend ed usarne uno differente invece dei files yaml. Tutto il resto dell'internazionalizzazione resta invariato.

Usiamo l'helper "t" per tutte le stringhe che dobbiamo internazionalizzare.
la stringa che viene passata all'helper "t" è un segnaposto che si usa nel file yaml associandogli la stringa corretta nella lingua scelta.

{caption: ".../app/views/mockups/page_a.html.erb -- codice 01", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<h1> <%= t ".headline" %> </h1>
<p> <%= t ".first_paragraph" %> </p>
<br>
<p>  <%= link_to t(".link_to_page_B"), mockups_page_b_path %> </p>
```




### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails s
```

Se visualizziamo sul browser vediamo che si visualizzano i segnaposto.  

* https://mycloud9path.amazonaws.com/mockups/page_a

![Fig. 01](chapters/01-base/05-mockups_i18n/01_fig01-i18n_page_a_placeholds.png)




## Backend en.yml

Per far apparire le descrizioni invece dei segnaposti implementiamo il backend Yaml. 

Iniziamo con il file en.yml perché l'inglese (en) è la lingua che viene selezionata di default.
Avendo usato il "." davanti al nome del segnaposto, per convenzione Rails cerca il segnaposto catalogato nella rispettiva view. In questo caso sotto en -> mockups -> page_a.


{id="01-05-01_02", caption=".../config/locales/en.yml -- codice 02", lang=yaml, line-numbers=on, starting-line-number=32}
```
en:
  mockups:
    page_a:
      headline: "This is the homepage"
      first_paragraph: "the text showed here is passed via a 'translation file' and this means that our application is ready to support more languages."
      link_to_page_B: "Let's go to page B."
```

[tutto il codice](#01-05-01_02all)



I> ATTENZIONE! i files YAML (.yml) sono sensibili all'indentatura. Per indentare usate gli "spazi" e non i "tabs".

I> Attenzione! C'è un bug e sui partials non mi funziona il "." come previsto quando uso i partials. Ho quindi scelto di usare tutto il percorso:


{caption=".../app/views/mockups/page_a.html.erb -- codice 03", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<h1> <%= t "mockups.page_a.headline" %> </h1>
<p> <%= t "mockups.page_a.first_paragraph" %> </p>
<br>
<p>  <%= link_to t("mockups.page_a.link_to_page_B"), mockups_page_b_path %> </p>
```




## Backend it.yml

Adesso creiamo il file it.yml per implementare la lingua italiana (it).

{caption=".../config/locales/it.yml -- codice 04", lang=yaml, line-numbers=on, starting-line-number=32}
```
it:
  mockups:
    page_a:
      headline: "Questa è l'homepage"
      first_paragraph: "il testo mostrato è o passato da un 'file di traduzione' e questo significa che la nostra applicazione è pronta a supportare più lingue."
      link_to_page_B: "Andiamo alla pagina B"
```

Questa traduzione è pronta ma non è ancora utilizzata nella nostra applicazione. La implementeremo nel prossimo capitolo. 




### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

Se visualizziamo sul browser vediamo che, al posto dei segnoposto, la lingua che si presenta è quella inglese di en.yml perché è quella di default.

* https://mycloud9path.amazonaws.com/mockups/page_a

![Fig. 02](chapters/01-base/05-mockups_i18n/01_fig02-i18n_page_a.png)




## Salviamo su Git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "set i18n static"
```




## pubblichiamo su heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku mi:master
```




## Chiudiamo il branch

Lo chiudiamo nel prossimo capitolo




## Il codice del capitolo




{id="01-05-01_02all", title=".../config/locales/en.yml -- codice 02", lang=yaml, line-numbers=on, starting-line-number=1}
```
# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   'true': 'foo'
#
# To learn more, please read the Rails Internationalization guide
# available at https://guides.rubyonrails.org/i18n.html.

en:
  mockups:
    page_a:
      headline: "This is the homepage"
      first_paragraph: "the text showed here is passed via a 'translation file' and this means that our application is ready to support more languages."
      link_to_page_B: "Let's go to page B."
```

[indietro](#01-05-01_02)
