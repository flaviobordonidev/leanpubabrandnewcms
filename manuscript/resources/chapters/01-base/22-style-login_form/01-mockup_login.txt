{id: 01-base-22-style-login_form01-mockup_login}
# Cap 22.1 -- Mockup Login

Usiamo BootStrap per dare uno stile al form iniziale di login. Creaimo un mockup, prima di inserire lo stile direttamente sul form di login di Devise.


Riferimenti interni:

* 99-rails_reference/boot_strap/02-bootstrap_login




## Apriamo il branch "Mockup Login"

{title="terminal", lang=bash, line-numbers=off}
```
$ git checkout -b ml
```




## Creiamo il nostro mockup login

Abbiamo già creato il controller mockups insieme alle due views "page_a" e "page_b" con "$ rails g controller Mockups page_a page_b". 
Per una nuova pagina statica aggiungiamo un'azione al controller, un instradamento al file "routes" e creiamo il corrispondente nuovo file in "views/mockups/".


Aggiorniamo il controller

{id: "01-22-01_01", caption: ".../app/controllers/mockups_controller.rb -- codice 01", format: ruby, line-numbers: true, number-from: 4}
```
  def login
  end
```

[tutto il codice](#01-22-01_01all)


Aggiorno il file routes 

{id: "01-22-01_02", caption: ".../config/routes.rb -- codice 02", format: ruby, line-numbers: true, number-from: 3}
```
  get 'mockups/login'
```

[tutto il codice](#01-22-01_02all)


creiamo il nuovo file ".../app/views/mockups/login.html.erb" 

{id: "01-22-01_03", caption: ".../app/views/mockups/login.html.erb -- codice 03", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<h1>LOGIN</h1>
```




## Il tema preso da internet

In internet troviamo lo [snippet sign-in-split](https://startbootstrap.com/snippets/sign-in-split/) con il seguente codice HTML

{id: "01-22-01_04", caption: "snippet_html_code -- codice 04", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<div class="container-fluid">
  <div class="row no-gutter">
    <div class="d-none d-md-flex col-md-4 col-lg-6 bg-image"></div>
```

[tutto il codice](#01-22-01_04all)


ed il seguente codice CSS

{id: "01-22-01_05", caption: "snippet_css_code -- codice 05", format: HTML+Mako, line-numbers: true, number-from: 1}
```
:root {
  --input-padding-x: 1.5rem;
  --input-padding-y: 0.75rem;
}

.login,
.image {
```

[tutto il codice](#01-22-01_05all)





## Importiamolo nella nostra applicazione

Riportiamo il codice nel nostro mockup. Prepariamo un layout dedicato per la fase iniziale del mockup in modo che sia più semplice fare il passaggio nella nostra applicazione.
Chiamiamo questo layout "mockup_first_step" per indicare che è un layout il più semplice possibile che ci aiuta nel primo passo di importazione di codice dall'esterno.



## Il mockup_first_step

Creiamo il nuovo file "mockup_first_step.html.erb" nella cartella layouts.

{id="01-22-01_06", title=".../app/views/layouts/mockup_first_step.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<!DOCTYPE html>
<html>
  <head>
    <title> Mockup | Baseline 6.0</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
```

Questo layout ha gli elementi essenziali. Nei tags "<body></body>" c'è la sola chiamata <%= yield %> che importa tutto il codice della view. Nei tags "<head></head>" cè il titolo, due chiamate per la sicurezza informatica, e la chiamata al webpack "javascript_pack_tag 'application'" che, come abbiamo visto precedentemente, si occupa anche dello stylesheets.






## Aggiorniamo il controller

aggiungiamo l'azione "login" al controller mockups e diciamogli di utilizzare il layout mockups_yield.

{id: "01-22-01_07", caption: ".../app/controllers/mockups_controller.rb -- codice 07", format: ruby, line-numbers: true, number-from: 16}
```
  def login
    render layout: 'mockup_first_step'
  end
```

[tutto il codice](#01-22-01_07all)





## Importiamo il codice HTML

Adesso che è tutto pronto importiamo il codice HTML dello snippet nella nostra pagina di mockup.

{id: "01-22-01_08", caption: ".../app/views/mockups/login.html.erb -- codice 03", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<div class="container-fluid">
  <div class="row no-gutter">
    <div class="d-none d-md-flex col-md-4 col-lg-6 bg-image"></div>
```

[tutto il codice](#01-22-01_08all)




## Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

apriamolo il browser sull'URL:

* https://mycloud9path.amazonaws.com/mockups/login

Il form di login è presente ma manca lo stile. non ci resta che importare il codice CSS




## Importiamo il codice CSS

Importiamo il codice CSS dello snippet nella nostra pagina di mockup. Nello stylesheets/mockup_first_step abbiamo la chiamata al file "application.js" di webpack (javascript_pack_tag 'application'). E su quel file abbiamo richiamato il file di stile "application.scss" (require("../stylesheets/application.scss")). Creiamo quindi il nuovo file "login.scss", dove inseriamo il codice CSS dello snippet, e lo richiamiamo su "application.scss".

{id: "01-22-01_09", caption: ".../app/javascript/stylesheets/application.scss -- codice 03", format: ruby, line-numbers: true, number-from: 3}
```
@import "./login";
```

[tutto il codice](#01-22-01_09all)


{id: "01-22-01_10", caption: ".../app/javascript/stylesheets/login.scss -- codice 03", format: ruby, line-numbers: true, number-from: 3}
```
:root {
  --input-padding-x: 1.5rem;
  --input-padding-y: 0.75rem;
}

.login,
.image {
```

[tutto il codice](#01-22-01_10all)




## Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

apriamolo il browser sull'URL:

* https://mycloud9path.amazonaws.com/mockups/login

Il form di login adesso ha "stile". 




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
```
$ git add -A
$ git commit -m "add mockups/login"
```




## Pubblichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
```
$ git push heroku ml:master
```




## Chiudiamo il branch

lo lasciamo aperto. Lo chiudiamo nei prossimi capitoli.




## Il codice del capitolo

