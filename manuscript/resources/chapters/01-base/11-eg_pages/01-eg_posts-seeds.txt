{id: 01-base-08-eg_pages-01-eg_posts-seeds}
# Cap 8.1 -- Tabelle di esempio per gli articoli

Abbiamo già creato la tabella " users " inizializzando " devise " adesso creiamo la tabelle di esempio " eg_posts " che ci ci aiuterà a verificare le future implementazioni che faremo nei prossimi capitoli.

In inglese e.g. è l'abbriviazione di "for example" dal latino (exempli gratia). Queste sono "Pagine Dinamiche di Esempio".




## Apriamo il branch "Examples Posts"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b ep
```




## Progettiamo la tabela eg_post

La tabella avrà le seguenti colonne:

* meta_title        -> (80 caratteri) il Titolo visto dal lato SEO. E' più lungo per inserire più key-words rispetto l'headline.
* meta_description  -> (160 caratteri) Un riassunto dell'articolo per il SEO con key-words. Ultimamente Google ha allungato a 320 ma li mostra solo per le primissime posizioni.
* headline          -> (65 caratteri) il Titolo dell'articolo; come i titoli dei giornali.
* incipit           -> (160 caratteri) Una descrizione da mettere nell'indice degli articoli.




## Impementiamo tabella eg_posts

implementiamo tutta la gestione degli articoli come esempio inclusa la tabella eg_posts per gestire gli articoli creati da utenti con ruolo di autore.
Generiamo tutto lo "scaffold" perché vogliamo anche i controllers e le views. 
 - il "migrate" crea la sola tabella
 - il "model" oltre alla tabella crea il model per il collegamento uno-a-molti.
 - lo "scaffold" crea anche il controller e le views.

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails g scaffold EgPost meta_title:string meta_description:string headline:string incipit:string user:references
```

La cosa bella di " user:references " è che, oltre a creare un migration "ottimizzato" per la relazione uno a molti, ci predispone parte della relazione uno-a-molti anche lato model.

vediamo il migrate creato


{id: "01-08-01_01", caption: ".../db/migrate/xxx_create_posts.rb -- codice 01", format: ruby, line-numbers: true, number-from: 1}
```
class CreateEgPosts < ActiveRecord::Migration[6.0]
  def change
    create_table :eg_posts do |t|
      t.string :meta_title
      t.string :meta_description
      t.string :headline
      t.string :incipit
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end
```

[tutto il codice](#01-08-01_01all)

la " t.references :user, foreign_key: true " crea un campo "t.integer :user_id" ed attiva il legame uno a molti lato database.


eseguiamo il migrate 

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails db:migrate
```




## Completiamo la relazione uno-a-molti

verifichiamo example_post, il lato "molti" 

{id: "01-08-01_02", caption: ".../app/models/eg_post.rb -- codice 02", format: ruby, line-numbers: true, number-from: 2}
```
  belongs_to :user
```

[tutto il codice](#01-08-01_02all)


completiamo user, il lato "uno"

{id: "01-08-01_03", caption: ".../app/models/user.rb -- codice 03", format: ruby, line-numbers: true, number-from: 7}
```
  has_many :eg_posts
```

[tutto il codice](#01-08-01_03all)




## Inseriamo qualche articolo da console

Inseriamo qualche articolo da terminale nel database locale

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails c
-> u1 = User.find(1)
-> u1.eg_posts.create(headline: "Il mio primo articolo", incipit: "Perché scrivere questo articolo")
-> u1.eg_posts.create(headline: "Il mio secondo articolo", incipit: "Ci ho preso gusto")
-> u1.eg_posts.create(headline: "Il mio terzo articolo", incipit: "Adesso sono esperto")

-> u2 = User.find(2)
-> u2.eg_posts.create(headline: "La conferenza uno", incipit: "Una interessante conferenza sul cielo")
-> u2.eg_posts.create(headline: "La conferenza due", incipit: "Perché si formano le nuvole? Capiamo il ciclo dell'acqua")
-> u2.eg_posts.create(headline: "La conferenza tre", incipit: "Il sole è una stella nana")


-> u3 = User.find(3)
-> u3.eg_posts.create(headline: "Studio di caso alfa", incipit: "In questo studio la nostra azienda è stata brava")
-> u3.eg_posts.create(headline: "Studio di caso beta", incipit: "In questo studio identifichiamo i pesci nell'acquario")
-> u3.eg_posts.create(headline: "Studio di caso gamma", incipit: "Questo studio è praticamente identico a quello dell'architetto")

-> exit
```


Un altro modo più geek per inserire gli articoli è usando il seguente codice

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails c
-> u1 = User.where(email: "ann@test.abc").first
-> u2 = User.where(email: "bob@test.abc").first
-> u3 = User.where(email: "carl@test.abc").first
-> 3.times do |i|
-> u1.eg_posts.create headline: "articolo di #{u1.email} - articolo numero #{i}"
-> u2.eg_posts.create headline: "articolo di #{u2.email} - articolo numero #{i}"
-> u3.eg_posts.create headline: "articolo di #{u3.email} - articolo numero #{i}"
-> end

2.4.1 :001 > u = User.where(email: "ann@test.abc")
  User Load (0.3ms)  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT $2  [["email", "ann@test.abc"], ["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<User id: 1, name: "Ann", email: "ann@test.abc", created_at: "2019-01-04 11:53:46", updated_at: "2019-01-08 11:43:42", role: "admin">]> 
2.4.1 :002 > u = u.first
  User Load (0.3ms)  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["email", "ann@test.abc"], ["LIMIT", 1]]
 => #<User id: 1, name: "Ann", email: "ann@test.abc", created_at: "2019-01-04 11:53:46", updated_at: "2019-01-08 11:43:42", role: "admin"> 
2.4.1 :003 > 7.times do
2.4.1 :004 >     u.posts.create title: "articolo di test"
2.4.1 :005?>   end
   (0.1ms)  BEGIN
  Post Exists (0.5ms)  SELECT  1 AS one FROM "posts" WHERE "posts"."id" IS NOT NULL AND "posts"."slug" = $1 LIMIT $2  [["slug", "articolo-di-test"], ["LIMIT", 1]]
  Post Create (9.6ms)  INSERT INTO "posts" ("title", "user_id", "created_at", "updated_at", "slug") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "articolo di test"], ["user_id", 1], ["created_at", "2019-01-31 13:41:12.110627"], ["updated_at", "2019-01-31 13:41:12.110627"], ["slug", "articolo-di-test"]]
   (1.1ms)  COMMIT

  ...

   (0.1ms)  BEGIN
  Post Exists (0.2ms)  SELECT  1 AS one FROM "posts" WHERE "posts"."id" IS NOT NULL AND "posts"."slug" = $1 LIMIT $2  [["slug", "articolo-di-test"], ["LIMIT", 1]]
  Post Create (0.3ms)  INSERT INTO "posts" ("title", "user_id", "created_at", "updated_at", "slug") VALUES ($1, $2, $3, $4, $5) RETURNING "id"  [["title", "articolo di test"], ["user_id", 1], ["created_at", "2019-01-31 13:41:12.319967"], ["updated_at", "2019-01-31 13:41:12.319967"], ["slug", "articolo-di-test-8fded178-c7b3-4773-b903-fff189c98eba"]]
   (0.7ms)  COMMIT
 => 7
```

il metodo ".create" è equivalente a ".new" seguito da ".save". E' solo un modo più succinto. Ad esempio le seguenti due linee di codice sono equivalenti:

* Post.create headline: "articolo di test"
* Post.new(headline: "articolo di test").save




## Paragrafo Didattico

Spieghiamo con degli esempi un po' di codice ruby che abbiamo appena usato.


```
5.times { puts "i" }


2.6.3 :019 > 5.times { puts "i" }
i
i
i
i
i
 => 5 
```


```
5.times do 
  puts "i"
end


2.6.3 :022 > 5.times do
2.6.3 :023 >     puts "i"
2.6.3 :024?>   end
i
i
i
i
i
 => 5 
```


```
5.times { |i| puts i }


2.6.3 :027 > 5.times { |i| puts i }
0
1
2
3
4
 => 5 
```


```
5.times do |i| 
  puts i
end


2.6.3 :030 > 5.times do |i|
2.6.3 :031 >     puts i
2.6.3 :032?>   end
0
1
2
3
4
 => 5 
```




## Salviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "Add table eg_posts"
```




## seeds

Impostiamo il file dei seeds per popolare la tabella in automatico invece della procedura manuale appena eseguita.

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=25}
```
puts "Inseriamo tre articoli per tre utenti"

u1 = User.find(1)
u1.eg_posts.create(headline: "Il mio primo articolo", incipit: "Perché scrivere questo articolo")
u1.eg_posts.create(headline: "Il mio secondo articolo", incipit: "Ci ho preso gusto")
u1.eg_posts.create(headline: "Il mio terzo articolo", incipit: "Adesso sono esperto")

u2 = User.find(2)
u2.eg_posts.create(headline: "La conferenza uno", incipit: "Una interessante conferenza sul cielo")
u2.eg_posts.create(headline: "La conferenza due", incipit: "Perché si formano le nuvole? Capiamo il ciclo dell'acqua")
u2.eg_posts.create(headline: "La conferenza tre", incipit: "Il sole è una stella nana")


u3 = User.find(3)
u3.eg_posts.create(headline: "Studio di caso alfa", incipit: "In questo studio la nostra azienda è stata brava")
u3.eg_posts.create(headline: "Studio di caso beta", incipit: "In questo studio identifichiamo i pesci nell'acquario")
u3.eg_posts.create(headline: "Studio di caso gamma", incipit: "Questo studio è praticamente identico a quello dell'architetto")
```

Per lanciare il comando e popolare tutto in automatico si può usare:

{caption: "terminal", format: bash, line-numbers: false}
```
$ rake db:seed 
```

oppure

{caption: "terminal", format: bash, line-numbers: false}
```
$ rake db:setup
```




## creiamo una cartella per i seeds

Per non avere tutti i semi sul file "seeds.rb" possiamo creare una cartella "/seeds" e metterci all'interno i files per le varie tabelle.
Sul file "seeds.rb" lasciamo solo il seguente codice:

{title=".../db/seeds.rb", lang=ruby, line-numbers=on, starting-line-number=25}
```
# https://medium.com/@ethanryan/split-your-rails-seeds-file-into-separate-files-in-different-folders-3c57be765818

Dir[File.join(Rails.root, 'db', 'seeds/*', '*.rb')].sort.each do |seed|
  load seed
end
```




## archiviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "add seed people"
```




## Pubblichiamo su Heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku ep:master
$ heroku run rails db:migrate
```

per popolare il database di heroku 


{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku run rails c
```

e rifare i passi fatti precedentemente per il database locale




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge ep
$ git branch -d ep
```




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push origin master
```




## Il codice del capitolo




[Codice 01](#01-08-01_01)

{id="01-08-01_01all", title=".../app/models/example_post.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class ExamplePost < ApplicationRecord
  belongs_to :user
end
```




[Codice 01](#01-08-01_02)

{id="01-08-01_02all", title=".../app/models/user.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class User < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :registerable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable,
         :recoverable, :rememberable, :validatable

  has_many :eg_posts
end
```
