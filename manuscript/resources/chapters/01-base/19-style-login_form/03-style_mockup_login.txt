# Stile del Mockup Login

Implementiamo lo stile attraverso stylesheets CSS e javascripts


## Attiviamo bootstrap

Essendo chiamato il layout/mockups_yield non sono passate le chiamate allo stylesheets/application ed al javascripts/application. Quindi non è passato bootstrap.
Invece di passarlo a livello di layout lo passiamo direttamente nel file views/mockups/login. Poiché il codice per il login è solo la parte di BODY, dobbiamo aggiungere la parte di HEAD e mettere tutto dentro HTML


{id="02-04-03_01", title=".../app/views/mockups/login.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=19}
~~~~~~~~
<!DOCTYPE html>
<html>
  <head>
    <title>S5beginning</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>
  
  <body>
    <div class="container">
~~~~~~~~

[Codice 01](#02-04-03_01all)

Adesso BootStrap è attivo anche per la pagina mockups/login




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/mockups/login

Vediamo che ha acquisito lo stile bootstrap. Adesso aggiungiamo uno stile personalizzato.





## Aggiungiamo stile personalizzato

Creiamo il file login.scss e ci inseriamo la parte di CSS

{id="02-04-03_02", title=".../app/assets/stylesheets/login.scss", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
:root {
  --input-padding-x: 1.5rem;
  --input-padding-y: .75rem;
}

body {
  background: #007bff;
  background: linear-gradient(to right, #0062E6, #33AEFF);
}
~~~~~~~~

[Codice 02](#02-04-03_02all)




## Aggiungere lo stile personalizzato a tutta l'applicazione



Se lo avessimo voluto aggiungere a tutta l'applicazione avremmo dovuto importarlo nel file stylesheets/application

{id="02-04-03_03", title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=23}
~~~~~~~~
@import "login";
~~~~~~~~

[Codice 03](#02-04-03_03all)

Ma noi vogliamo lo stile login.scss solo per la pagina mockups/login, quindi rirpristiniamo com'era application.scss ed andiamo al prossimo paragrafo.




## Aggiungiamo lo stile personalizzato alla sola pagina mockups/login

Per avere lo stile login.scss solo sulla pagina mockups/login aggiungiamo la chiamata direttamente su views/mockups/login.html.erb

{id="02-04-03_04", title=".../app/views/mockups/login.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
~~~~~~~~
    <%= stylesheet_link_tag    'login', media: 'all', 'data-turbolinks-track': 'reload' %>
  </head>
~~~~~~~~

[Codice 04](#02-04-03_04all)

Questo però non è sufficiente perché dobbiamo aggiungerlo anche al "precompile"




## Precompile

Aggiungiamo la nostra chiamata nel precompile. 

{id="02-04-03_05", title=".../config/application.rb", lang=ruby, line-numbers=on, starting-line-number=19}
~~~~~~~~
    #---
    # il codice qui in basso andrebbe su config/initializers/assets.rb

    # precompile assets pofo stylesheets                                                             
    config.assets.precompile += ['login.css'
                                ]
~~~~~~~~

[Codice 05](#02-04-03_05all)



### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails s
~~~~~~~~

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/mockups/login

Vediamo che tutto funziona come ci aspettavamo.




## archiviamo su git

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add mockups/login stylesheets"
~~~~~~~~




## Pubblichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku ml:master
~~~~~~~~




## Chiudiamo il branch

lo chiudiamo nel prossimo capitolo




## Il codice del capitolo


