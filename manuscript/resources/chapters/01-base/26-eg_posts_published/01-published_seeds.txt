# Pubblicato

filtriamo per gli articoli pubblicati.




## Apriamo il branch "PUBlished"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b pub
```




## Aggiungiamo le colonne per publish su eg_posts

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails g migration AddPublishedToPosts published:boolean published_at:datetime
```

* published_at   : Utile per gestire pubblicazioni automatiche o allineare le date con le campagne di email marketing.

aggiungiamo al migrate creato il " default: false " alla colonna :published

{id="02-08-01_01", title=".../db/migrate/xxx_add_published_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class AddPublishedToPosts < ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :published, :boolean, default: false
    add_column :posts, :published_at, :datetime
  end
end
```

[Codice 01](#02-08-01_01all)

eseguiamo il migrate 

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails db:migrate
```




## Aggiorniamo il model

aggiungiamo uno scope per gli articoli pubblicati.
Nel model nella sezione "# == Scopes".

{id="02-08-01_02", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=28}
```
  scope :published, -> { where(published: true) }
```

[Codice 02](#02-08-01_02all)




## Aggiorniamo il posts_controller

Per limitare la visibilitÃ  ai soli articoli pubblicati per una persona non loggata.
Nel controller "default posts_controller" sull'azione " index "

{id="02-08-01_03", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=5}
```
    @posts = Post.published.order(created_at: "DESC")
```

[Codice 03](#02-08-01_03all)




## Impostiamo da terminale un articolo come pubblicato

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails c
-> Post.first.published
-> Post.first.update(published: true)
-> Post.first.published


2.6.3 :001 > Post.first.update(published: true)
  Post Load (0.6ms)  SELECT  "posts".* FROM "posts" ORDER BY "posts"."id" ASC LIMIT $1  [["LIMIT", 1]]
   (0.1ms)  BEGIN
  User Load (8.2ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]
  Post Update (2.1ms)  UPDATE "posts" SET "published" = $1, "updated_at" = $2 WHERE "posts"."id" = $3  [["published", true], ["updated_at", "2019-08-24 12:36:49.201386"], ["id", 1]]
   (0.9ms)  COMMIT
 => true 
 2.6.3 :003 > Post.first.published
  Post Load (0.6ms)  SELECT  "posts".* FROM "posts" ORDER BY "posts"."id" ASC LIMIT $1  [["LIMIT", 1]]
 => true 
```




## Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

apriamo il browser sull'URL:

* https://mycloud9path.amazonaws.com/posts

Adesso viene visualizzato solo l'articolo in cui abbiamo impostato "published: true"




## archiviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "add published to posts"
```




## Pubblichiamo su heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku pub:master
$ heroku run rails db:migrate
```




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge pub
$ git branch -d pub
```




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push origin master
```




## Il codice del capitolo




[Codice 01](#02-08-01_01)

{id="02-08-01_01all", title=".../db/migrate/xxx_add_published_to_posts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class AddPublishedToPosts < ActiveRecord::Migration[5.2]
  def change
    add_column :posts, :published, :boolean, default: false
    add_column :posts, :published_at, :datetime
  end
end
```




[Codice 02](#02-08-01_02)

{id="02-08-01_02all", title=".../app/models/post.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class Post < ApplicationRecord
  # == Constants ============================================================

  # == Attributes ===========================================================

  enum type_of_content: {image: 0, video_youtube: 1, video_vimeo:2, audio:3}
  
  ## ActiveStorage
  has_one_attached :main_image
  
  # == Extensions ===========================================================

  ## friendly_id
  extend FriendlyId
  friendly_id :title, use: :slugged

  # == Relationships ========================================================

  belongs_to :user

  # == Validations ==========================================================

  # == Scopes ===============================================================

  scope :published, -> { where(published: true) }

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================
  
  def should_generate_new_friendly_id?
    title_changed?
  end
  
end
```




[Codice 03](#02-08-01_03)

{id="02-08-01_03all", title=".../app/controllers/posts_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
class PostsController < ApplicationController
  # GET /posts
  # GET /posts.json
  def index
    @posts = Post.all.published
    authorize @posts
  end

  # GET /posts/1
  # GET /posts/1.json
  def show
    @post = Post.friendly.find(params[:id])
  end
end
```
