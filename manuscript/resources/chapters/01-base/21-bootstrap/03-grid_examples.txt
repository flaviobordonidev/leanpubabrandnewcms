# Bootstrap Grid

Implementiamo la grid bootstrap nelle nostre pagine example_static_pages




## Apriamo il branch

continuiamo con il branch aperto nel capitolo precedente




## La Griglia
Il componente principale di bootstrap: la griglia 'responsive'. Bootstrap include fra i suoi strumenti una griglia responsiva a 12 colonne talmente flessibile e potente che spesso viene utilizzata da sola.

La griglia è fatta di righe e colonne, le righe (.row) devono essere collocate all’interno di un contenitore che può essere a larghezza fissa (.container)
o a larghezza fluida (container-fluid), questo garantisce il corretto allineamento e padding degli elementi interni.

Proviamo gli esempi scaricati direttamente dal sito di bootstrap




## La view static_pages per bootstrap grid

Creiamo la nuova page_c per fare le prove per la grid di bootstrap




### implementiamo nel controller
creiamo la nuova azione "page_c" nel controller mockups_controller.rb

{title=".../app/controllers/mockups_controller.rb", lang=ruby, line-numbers=on, starting-line-number=8}
```
  def page_c
  end
```




### aggiorniamo gli instradamenti (routes.rb)

{id="01-03-01_01", title="config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=15}
```
  get 'mockups/page_c'
```




### creiamo la nuova view


{title="views/mockups/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<h1> Pagina C </h1>
```




## Gli esempi di griglie

Proviamo gli esempi del sito [bootstrap](https://getbootstrap.com/docs/4.1/layout/grid/)

Al fine di comprendere meglio come funzionano le griglie aggiungiamo uno stile di debug che ne evidenzi la struttura.
Creiamo un file di stile

{id="02-01-03_01", title=".../app/assets/stylesheets/debug_bootstrap_grid.css", lang=ruby, line-numbers=on, starting-line-number=1}
```
.row > div { min-height:100px; border:1px solid red;}
```

[Codice 01](#02-01-03_01all)

e lo importiamo sul nostro manifest

{id="02-01-03_02", title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=17}
```
@import "debug_bootstrap_grid";
```

[Codice 02](#02-01-03_02all)




### proviamo l'esempio 1

{title="views/example_static_pages/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<!-- contenitore responsivo a larghezze fisse -->
<div class="container">
  <div class="row">
    <div class="col-lg-12">
    </div>
  </div>
</div>
```




#### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

andiamo con il browser sull'URL:

* https://mycloud9path.amazonaws.com/example_static_pages/page_c

![Fig. 01](images/02-brandnewcms/01-bootstrap/03_01-grid-example_1.png)





### proviamo l'esempio 2

{title=".../app/views/example_static_pages/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<!-- contenitore responsivo fluido -->
<div class="container-fluid">
  <div class="row">
    <div class="col-lg-12">
    </div>
  </div>
</div>
```




#### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

andiamo con il browser sull'URL:

* https://mycloud9path.amazonaws.com/example_static_pages/page_c

![Fig. 02](images/02-brandnewcms/01-bootstrap/03_02-grid-example_2.png)




### proviamo l'esempio 3
Le righe permettono di isolare gruppi orizzontali di colonne delineando confini ben precisi nel layout responsivo.

{title=".../app/views/example_static_pages/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<div class="container">
  <div class="row">
    <div class="col-lg-6">
    </div>
    <div class="col-lg-6">
    </div>
  </div>
  <div class="row">
    <div class="col-lg-4">
    </div>
    <div class="col-lg-4">
    </div>
    <div class="col-lg-4">
    </div>
  </div>
</div>
```




#### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

andiamo con il browser sull'URL:

* https://mycloud9path.amazonaws.com/example_static_pages/page_c

![Fig. 03](images/02-brandnewcms/01-bootstrap/03_03-grid-example_3.png)




### proviamo l'esempio 4
Per garantire il corretto funzionamento della griglia responsiva il contenuto deve essere collocato all’interno delle colonne e solamente le colonne possono essere figlie delle righe. Le colonne sono spaziate fra loro con il padding. Tramite le righe il padding dell’ultima e della prima colonna sono compensati da un margin negativo.

{title=".../app/views/example_static_pages/page_c.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<div class="container">
  <div class="row">
    <div class="col">
      1 of 2
    </div>
    <div class="col">
      2 of 2
    </div>
  </div>
  <div class="row">
    <div class="col">
      1 of 3
    </div>
    <div class="col">
      2 of 3
    </div>
    <div class="col">
      3 of 3
    </div>
  </div>
</div>
```




#### Verifichiamo preview

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

andiamo con il browser sull'URL:

* https://mycloud9path.amazonaws.com/example_static_pages/page_c

![Fig. 04](images/02-brandnewcms/01-bootstrap/03_04-grid-example_4.png)




## salviamo su git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "Implement bootstrap grid on example_static_pages page_c"
```




## Pubblichiamo su Heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku bs:master
```




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge bs
$ git branch -d bs
```




## Facciamo un backup su Github

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push origin master
```




## Il codice del capitolo




[Codice 01](#02-01-03_01)

{id="02-01-03_01all", title=".../app/assets/stylesheets/debug_bootstrap_grid.css", lang=ruby, line-numbers=on, starting-line-number=1}
```
.row > div { min-height:100px; border:1px solid red;}
```




[Codice 02](#02-01-03_02all)

{id="02-01-03_02", title=".../app/assets/stylesheets/application.scss", lang=ruby, line-numbers=on, starting-line-number=17}
```
/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 */

// Custom bootstrap variables must be set or imported *before* bootstrap.
@import "bootstrap";
@import "debug_bootstrap_grid";
```
