{id: 01-base-07-authentication-04-devise-login_logout}
# Cap 7.4 -- devise login logout

Rifiniamo la parte di autenticazione con devise:

* Implementiamo i links di login e di logout.
* Mostriamo utente loggato.
* Personaliziamo gli URLs: usiamo " .../login ", al posto di " .../users/sign_in ".
* Personaliziamo il layout per il login.

Risorse interne:

* 99-rails_references-authentication_devise-02-devise




## Apriamo il branch "SignIn SignOut"

{title="terminal", lang=bash, line-numbers=off}
```
$ git checkout -b siso
```



## Visualizziamo utente loggato

Per visualizzare l'utente loggato usiamo il metodo "current_user" creato da devise.

la variabile **current_user** è generata tramite la gemma "devise" e contiene l'utente loggato. esempio: User.find(current_user.id)

Se nessun utente è loggato/autenticato riceviamo un errore nel codice. Per evitarlo mettiamo il controllo "if current_user.present?"

{title=".../app/views/mockups/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
```
<p> utente attivo: <%= current_user.email if current_user.present? == true %> </p>
```

Usiamo l'operatore ternario "condizione ? azione_true : azione_false" per visualizzare la stringa "nessun utente loggato" invece di lasciare un vuoto.

{id="01-07-03_01", title=".../app/views/mockups/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
```
<p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %>
```

[Codice 01](#01-07-03_01all)





## Aggiungiamo logout

{id="01-07-03_02", title=".../app/views/mockups/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
```
<%= link_to "Sign Out", destroy_user_session_path, method: :delete %>
```

[Codice 02](#01-07-03_02all)

Se lo proviamo verrà ricaricata la stessa pagina homepage/show perché è la pagina di root. La differenza è che apparirà il messaggio di corretto logout.





## Aggiungiamo login

invece di usare l'url mettiamo un pulsante di login su page_a

{id="01-07-03_03", title=".../app/views/mockups/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=10}
```
<p>  <%= link_to "login", new_user_session_path %> </p>
```

[Codice 03](#01-07-03_03all)

Se lo proviamo verrà ricaricata la stessa pagina homepage/show perché è la pagina di root. La differenza è che apparirà il messaggio di corretto login.




### Verifichiamo preview

Attiviamo il webserver

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

andiamo alla pagina principale (root_path) quindi all'URL:

* https://mycloud9path.amazonaws.com/
* https://mycloud9path.amazonaws.com/users/sign_in




## Personalizziamo gli url per login e logout

path_names seve a rinominare le chiamate sull'URL per il sign_in, sign_out, sign_up, ...

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
```
  devise_for :users, path_names: {sign_in: 'login'}
  resources :users
```




### Verifichiamo gli instradamenti

{title="terminal", lang=bash, line-numbers=off}
```
$ rails routes | egrep "users"


ec2-user:~/environment/myapp (siso) $ rails routes | egrep "users"
           new_user_session GET    /users/login(.:format)                                                                   devise/sessions#new
               user_session POST   /users/login(.:format)                                                                   devise/sessions#create
       destroy_user_session DELETE /users/sign_out(.:format)                                                                devise/sessions#destroy
          new_user_password GET    /users/password/new(.:format)                                                            devise/passwords#new
         edit_user_password GET    /users/password/edit(.:format)                                                           devise/passwords#edit
              user_password PATCH  /users/password(.:format)                                                                devise/passwords#update
                            PUT    /users/password(.:format)                                                                devise/passwords#update
                            POST   /users/password(.:format)                                                                devise/passwords#create
                      users GET    /users(.:format)                                                                         users#index
                            POST   /users(.:format)                                                                         users#create
                   new_user GET    /users/new(.:format)                                                                     users#new
                  edit_user GET    /users/:id/edit(.:format)                                                                users#edit
                       user GET    /users/:id(.:format)                                                                     users#show
                            PATCH  /users/:id(.:format)                                                                     users#update
                            PUT    /users/:id(.:format)                                                                     users#update
                            DELETE /users/:id(.:format)                                                                     users#destroy
```

Possiamo vedere che adesso c'è il percorso "/users/login" al posto del precedente "/users/sign_in".




### Verifichiamo preview

Attiviamo il webserver

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

verifichiamo gli URLs:

* https://mycloud9path.amazonaws.com/users/sign_in --> ERRORE
* https://mycloud9path.amazonaws.com/users/login




## Aggiungiamo il path vuoto ''

Il parametro "path: ''" elimina gli instradamnenti di default di devise

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
```
  devise_for :users, path_names: {sign_in: 'login'}, path: ''
  resources :users
```

Così avremo un più pulito "/login" invece di "/users/login"




### Verifichiamo gli instradamenti

{title="terminal", lang=bash, line-numbers=off}
```
$ rails routes | egrep "users"


ec2-user:~/environment/myapp (siso) $ rails routes | egrep "users"
                      users GET    /users(.:format)                                                                         users#index
                            POST   /users(.:format)                                                                         users#create
                   new_user GET    /users/new(.:format)                                                                     users#new
                  edit_user GET    /users/:id/edit(.:format)                                                                users#edit
                       user GET    /users/:id(.:format)                                                                     users#show
                            PATCH  /users/:id(.:format)                                                                     users#update
                            PUT    /users/:id(.:format)                                                                     users#update
                            DELETE /users/:id(.:format)                                                                     users#destroy
```




### Verifichiamo preview

Attiviamo il webserver

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

verifichiamo gli URLs:

* https://mycloud9path.amazonaws.com/users/sign_in --> ERRORE
* https://mycloud9path.amazonaws.com/users/login --> ERRORE
* https://mycloud9path.amazonaws.com/login




## Nascondiamo login o logout a seconda se siamo loggati o no

user_signed_in? è la stessa cosa di current_user.present?

{title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=18}
```
<p>
    <%= link_to "Sign Out", destroy_user_session_path, method: :delete, class: "btn btn-danger" if current_user.present? == true %>
    <%= link_to "Sign In", new_user_session_path, class: "btn btn-danger" if current_user.present? == false %>
</p>
```

oppure già predisposto per formattazione BootStrap ed inserimento icone

{title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=18}
```
<p>
  <% if current_user.present? %>
    <%= link_to destroy_user_session_path, method: :delete, class: "btn btn-danger" do %>
       <span class="glyphicon ico_logout"></span> Logout
    <% end %>
  <% else %>
    <%= link_to new_user_session_path, class: "btn btn-danger" do %>
       <span class="glyphicon ico_login"></span> Login
    <% end %>
  <% end %>
</p>
```




## Implementiamo un layout personalizzato per il login

la views di login ha generalmente uno stile diverso dalle altre pagine quindi disponiamo un layout specifico per lei.



### Creiamo nuovo layout

Nella cartella views/layouts creiamo una nuova view che chiamiamo "entrance" ed all'interno copiamo tutto il codice che al momento è nella vew "application" (la view del layout di default)

{id="01-07-03_04", title=".../app/views/layout/entrance.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<!DOCTYPE html>
<html>
  <head>
    <title>Benvenuto</title>
```

[Codice 04](#01-07-03_04all)

Al momento l'unica differenza è nel titolo dove abbiamo scritto "Benvenuto". Ma andando avanti con il tutorial le due view si differenzieranno sensibilmente.




### Attiviamo i controllers personalizzabili di devise

Attiviamo i controllers di devise per il model "User" in modo da poter indicare un layout specifico per loro.

E' arrivato il momento di effettuare il passaggio numero 5 dello script di devise che avevamo lasciato in sospeso.

{title="terminal", lang=bash, line-numbers=off}
```
$ rails generate devise:views users
$ rails generate devise:controllers users


ec2-user:~/environment/myapp (siso) $ rails generate devise:views users
Running via Spring preloader in process 18417
      invoke  Devise::Generators::SharedViewsGenerator
      create    app/views/users/shared
      create    app/views/users/shared/_links.html.erb
      invoke  form_for
      create    app/views/users/confirmations
      create    app/views/users/confirmations/new.html.erb
      create    app/views/users/passwords
      create    app/views/users/passwords/edit.html.erb
      create    app/views/users/passwords/new.html.erb
      create    app/views/users/registrations
      create    app/views/users/registrations/edit.html.erb
      create    app/views/users/registrations/new.html.erb
      create    app/views/users/sessions
      create    app/views/users/sessions/new.html.erb
      create    app/views/users/unlocks
      create    app/views/users/unlocks/new.html.erb
      invoke  erb
      create    app/views/users/mailer
      create    app/views/users/mailer/confirmation_instructions.html.erb
      create    app/views/users/mailer/email_changed.html.erb
      create    app/views/users/mailer/password_change.html.erb
      create    app/views/users/mailer/reset_password_instructions.html.erb
      create    app/views/users/mailer/unlock_instructions.html.erb
ec2-user:~/environment/myapp (siso) $ rails generate devise:controllers users
Running via Spring preloader in process 18435
      create  app/controllers/users/confirmations_controller.rb
      create  app/controllers/users/passwords_controller.rb
      create  app/controllers/users/registrations_controller.rb
      create  app/controllers/users/sessions_controller.rb
      create  app/controllers/users/unlocks_controller.rb
      create  app/controllers/users/omniauth_callbacks_controller.rb
===============================================================================

Some setup you must do manually if you haven't yet:

  Ensure you have overridden routes for generated controllers in your routes.rb.
  For example:

    Rails.application.routes.draw do
      devise_for :users, controllers: {
        sessions: 'users/sessions'
      }
    end

===============================================================================
```

Questo ci crea le seguenti nuove cartelle e files:

* la sottocartella /app/views/users/ con tutte le views gestite da devise. 
* la sottocartella /app/controller/users/ con tutti i controllers gestiti da devise.


I> Se avessimo già effettuato il passaggio numero 5, il "rails generate devise:views", avremmo dovuto copiare le views da devise/sessions a users/sessions. Questo perché adesso il controller è stato cambiato e non usa più le views di default in devise/sessions.




### Aggiorniamo gli instradamenti

Aggiungiamo il parametro "controllers: { sessions: 'users/sessions' }" a "devise_for :users", questo indica a devise di usare i nuovi controllers (e non quelli di default).

{id="01-07-03_05", title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=5}
```
  devise_for :users, path_names: {sign_in: 'login'}, path: '', controllers: { sessions: 'users/sessions' }
```

[Codice 05](#01-07-03_05all)


Se avessimo attivo il :registerable avremmo dovuto inserire l'instradamento anche per 'users/registrations'. In quel caso avremmo indicato entrambi i nuovi controllers a cui si deve riferire devise:

* sessions: 'users/sessions'
* registrations: 'users/registrations'

quidi il parametro sarebbe stato

* controllers: {sessions: 'users/sessions', registrations: 'users/registrations'}

{title=".../config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=9}
```
  devise_for :users, path_names: {sign_in: 'login'}, path: '', controllers: {sessions: 'users/sessions', registrations: 'users/registrations'}
```




### Indichiamo a devise di usare il layout "entrance"

Per indicare di usare il nostro nuovo layout dobbiamo aggiornare il controller. Ed è per questo che abbiamo usato ** rails generate devise:controllers users **. Infatti adesso abbiamo in chiaro il controller di devise che gestisce il sign_in/login sign_out/logout. 

{id="01-07-03_06", title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=6}
```
  layout 'entrance'
```

[Codice 06](#01-07-03_06all)

Aggiungendo "layout 'entrance'" indichiamo a tutte le azioni di sessions_controller di usare il nuovo layout. Se lo avessimo voluto usare solo per il sign_in lo avremmo decommentato l'azione "new" inserendo al suo interno "render layout: 'entrance'".




### Verifichiamo preview

{title="terminal", lang=bash, line-numbers=off}
```
$ sudo service postgresql start
$ rails s
```

* https://mycloud9path.amazonaws.com/
* https://mycloud9path.amazonaws.com/login

Nella pagina di login il tab del browser ha il nome "Benvenuto"




## Salviamo su git

{title="terminal", lang=bash, line-numbers=off}
```
$ git add -A
$ git commit -m "New layout entrance for login"
```




## Pubblichiamo su Heroku

{title="terminal", lang=bash, line-numbers=off}
```
$ git push heroku siso:master
$ heroku run rails db:migrate
```




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
```
$ git checkout master
$ git merge siso
$ git branch -d siso
```




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
```
$ git push origin master
```




## Se avessimo attivato la registrazione

          <%#= link_to 'Edit Profile', edit_user_registration_path %>
          <%= link_to current_user.email, edit_user_registration_path %>




## Il codice del capitolo




[Codice 01](#01-07-03_01)

{id="01-07-03_01all", title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<h1> <%= t "example_static_pages.page_a.first_header" %> </h1>
<p> <%= t "example_static_pages.page_a.first_paragraph" %> </p>
<br>
<p>  <%= link_to t("example_static_pages.page_a.link_goto_page_B"), example_static_pages_page_b_path %> </p>
<br/>
<p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %>
```




[Codice 02](#01-07-03_02)

{id="01-07-03_02all", title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<h1> <%= t "example_static_pages.page_a.first_header" %> </h1>
<p> <%= t "example_static_pages.page_a.first_paragraph" %> </p>
<br>
<p>  <%= link_to t("example_static_pages.page_a.link_goto_page_B"), example_static_pages_page_b_path %> </p>
<br/>
<p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %>
<br/>
<p>  <%= link_to "Sign Out", destroy_user_session_path, method: :delete %> </p>
```




[Codice 03](#01-07-03_03)

{id="01-07-03_03all", title=".../app/views/example_static_pages/page_a.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<h1> <%= t "example_static_pages.page_a.first_header" %> </h1>
<p> <%= t "example_static_pages.page_a.first_paragraph" %> </p>
<br>
<p>  <%= link_to t("example_static_pages.page_a.link_goto_page_B"), example_static_pages_page_b_path %> </p>
<br/>
<p> utente attivo: <%= current_user.present? == true ? current_user.email : "nessun utente loggato" %>
<br/>
<p>  <%= link_to "Sign Out", destroy_user_session_path, method: :delete %> </p>
<p>  <%= link_to "Sign In", new_user_session_path %> </p>
```




[Codice 04](#01-07-03_04)

{id="01-07-03_04all", title=".../app/views/layout/entrance.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=1}
```
<!DOCTYPE html>
<html>
  <head>
    <title>Benvenuto</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
    <% if notice %><p class="alert alert-info"><%= notice %></p><% end %>
    <% if alert %><p class="alert alert-warning"><%= alert %></p><% end %>
    
    <%= yield %>
  </body>
</html>
```




[Codice 05](#01-07-03_05)

{id="01-07-03_05all", title="/config/routes.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
Rails.application.routes.draw do

  root 'example_static_pages#page_a'
  
  devise_for :users, path_names: {sign_in: 'login'}, path: '', controllers: { sessions: 'users/sessions' }
  resources :users  
  
  get 'example_static_pages/page_a'
  get 'example_static_pages/page_b'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
```




[Codice 06](#01-07-03_06)

{id="01-07-03_06all", title="/app/controllers/users/sessions_controller.rb", lang=ruby, line-numbers=on, starting-line-number=1}
```
# frozen_string_literal: true

class Users::SessionsController < Devise::SessionsController
  # before_action :configure_sign_in_params, only: [:create]

  layout 'entrance'

  # GET /resource/sign_in
  # def new
  #   super
  # end

  # POST /resource/sign_in
  # def create
  #   super
  # end

  # DELETE /resource/sign_out
  # def destroy
  #   super
  # end

  # protected

  # If you have extra params to permit, append them to the sanitizer.
  # def configure_sign_in_params
  #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  # end
end
```
