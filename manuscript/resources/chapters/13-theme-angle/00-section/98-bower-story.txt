# Bower story

Fino a Rails 5.2 la scelta del tema ANGLE era quella di usare Bower ma da Rails 6.0 e l'introduzione di webpack nativo non c'è più necessità di Bower. 
Di seguito i motivi per cui si era scelto Bower.


## Gestire l'app asset di Ruby on Rails con Bower

Mentre si lavora sull'applicazione Ruby on Rails, gli sviluppatori tendono ad aggiungere sempre più librerie client: AngularJS, plugin Bootstrap, jQuery. Il framework RoR di default non offre alcun modo efficiente di gestire queste dipendenze. Si possono quindi aggiungere le gemme nel Gemfile o mettere gli asset citati in vendor/asset. 
Nel primo caso le gemme potrebbe essere aggiornate di rado, e inoltre l'applicazione potrebbe funzionare più lentamente a causa della grande quantità di gemme. Nel secondo caso, l'aggiornamento di un asset è particolarmente impegnativo e inoltre, si devono gestire tutte le dipendenze manualmente.

## Usare Bower per l'asset management

Bower è uno strumento per l'asset management costruito dal team di Twitter. Funziona allo stesso modo di RubyGems e Bundle: descrive l'elenco delle risorse necessarie, e le installa con un solo comando. Inoltre, è possibile specificare la versione di ciascun asset, branches e indirizzi di repository git. Bower gestisce automaticamente le dipendenze delle attività e visualizza gli errori in fase di installazione.

Bower introduce una caratteristica non presente in NPM (altro motivo per aver scelto Bower come package manager) ovvero la possibilità di gestire le dipendenze Web di applicazioni esclusivamente front-end. In questo caso non dobbiamo preoccuparci di librerie di basso livello, ma è necessario concentrarci su librerie più specifiche proprio perchè l’applicazione non verrà eseguita in un contesto Node.js ma all’interno di un browser. Tramite Bower possiamo infatti ottenere facilmente librerie come jQuery, Bootstrap, AngularJS, Knockout o Ember.js.

Bower gestisce alberi di dipendenza semplici, con livelli singoli proprio perchè, in ambito web, abbiamo bisogno di librerie complete, che non dipendano da ulteriori pacchetti. A loro volta le librerie potranno avere dipendenze ma la versione che otterremo tramite Bower è una build completa di tutto, pronta ad essere inclusa nelle nostre pagine.




## Differenza tra Bower e le gemme di Rails.

Bower ha reso le cose più facili per gestire i file di frontend quali jQuery, bootstrap e molti altri senza scaricare manualmente i sorgenti. Ma anche rails può gestire il frontend attraverso il Gemfile e bundler.

Come lavora Bower e quali sono i vantaggi? Quali sono le differenze tra Bower e Bundler Gemfile? Quali sono i pro / contro di utilizzare l'uno o l'altro per le dipendenze di front-end?

Possiamo prendere Bootstrap come esempio. Lo svantaggio di utilizzare una gemma Rails, come Twitter-bootstrap-rails è che ogni volta che il sottostante (bootstrap) viene aggiornato o modificato, è necessario attendere che gli autori della gemma aggiornino la gemma. Se sono lenti o lo sviluppo/manutenzione della gemma è abbandonato, siamo bloccati. Il pro è che gli autori hanno specificamente adattato l'asset a lavorare con Rails e la sua attuazione è di solito ben documentata e semplice. 

Bower ha il solo compito di gestire il frontend. Quindi tutto quello installato con Bower non darà nessun helper rails. E questo ha creato ad esempio un problema sul link destroy che era stato creato in automatico dallo scaffold. Quindi, per esempio, in fase di sviluppo abbiamo dovuto ripristinare jQuery attraverso il Gemfile altrimenti il link per la distruzione del record non funzionava.
Altro esempio da citare è che font-awesome installato tramite la gemma vi darà fa_icon view helper, che non si avrà quando si installa con Bower.

E' interessante anche sottolineare che, se si utilizza Bower per ottenere BS, solo l'aggiunta di un import SASS (supponendo di utilizzare la versione SASS di BS) non funziona perché il "load path" di SASS non è impostato a guardare nella tua cartella bower_components/bootstrap di default. Ma questo problema è superato con la gemma "bower" che punta il default su /vendor/bower_components/bootstrap.




## Di seguito alcuni passaggi che si facevano per implementare la parte di Bower




## /Bower.json

Copiamo il file su C9-rails perché è solo sul template.
E' il file di configurazione di Bower (Dependency file).




## /Gemfile

Modifichiamo file di C9-rails:

* aggiungiamo bower-rails perché è la gemma che ci permette di usare Bower.
* commentiamo gem 'jquery-rails' perché sarà gestito da Bower.
* commentiamo 'turbolinks' perché il template non lo utilizza.

Verifichiamo l'ultima versione di Bower su [rubygems](https://rubygems.org)

![fig. rubygems -> bower-rails](images/frontend_assets/angle/rubygems-bower-rails.png)

[codice: Gemfile 02](#code-frontend_assets-02-gemfile-02)

{title="Gemfile", lang=ruby, line-numbers=on, starting-line-number=19}
~~~~~~~~
# Bower support for Rails projects. Dependency file is bower.json in Rails root dir
gem 'bower-rails', '~> 0.10.0'
# Use jquery as the JavaScript library
#gem 'jquery-rails'
# Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks
#gem 'turbolinks', '~> 5'
~~~~~~~~



## Implementiamo Bower

Installiamo Bower e lanciamo il suo install

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ bundle install
$ rake bower:install
~~~~~~~~

Per lanciare rake bower:install potremmo dover installare bower

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ npm install bower -g
~~~~~~~~

durante l'installazione di bower può essere richiesto che versione di jquery installare. la scelta più ovvia è la "10" perché è la versione maggiore "2.2.0" e perché c'è scritto che è quella richiesta da Angle che è il template che stiamo installando ^_^ 

dal bower.json si evince che la libreria jquery.classy.loader viene scaricata in un file .zip che contiene anche il folder.git (cartella nascosta). E' necessario eliminarla altrimenti genera un conflitto con le operazioni di git commit.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails s -b $IP -p $PORT
~~~~~~~~

su cloud9 vai su "Share" e clicca sul link di "application" per aprire l'applicazione.

![fig. Share -> application: link](images/frontend_assets/angle/share-application_link.png)




---



## app/assets/javascripts/application.js

Modifichiamo file di C9-rails:

[codice: javascripts 01](#code-frontend_assets-02-javascripts-01)

* cancello //= require jquery perché gestito da Bower
* cancello //= require jquery_ujs perché gestito da Bower
* cancello //= require turbolinks perché questo template non lo utilizza
* cancello //= require_tree .
* aggiungo //= require_tree ./angle/

I> ATTENZIONE!!!
I> togliendo //= require jquery_ujs il "link_to ... destroy" non funziona più
I> si è costretti ad usare il "button_to ... destroy"
I> questo perché le librerie jquery di rails gestiscono con un workaround la mancanza della chiamata "DELETE" sui browsers.

http://stackoverflow.com/questions/21739122/rails-delete-method-it-doesnt-workaround
http://stackoverflow.com/questions/7786960/why-delete-link-doesnt-work-in-this-ruby-on-rails-project
http://stackoverflow.com/questions/18154916/rails-4-link-to-destroy-not-working-in-getting-started-tutorial
http://stackoverflow.com/questions/30129729/rails-delete-functionality-is-not-working



così facendo richiamo solo i files dentro la sottocartella "angle"

[codice: javascripts 02](#code-frontend_assets-02-javascripts-02)

Gli altri files sotto javascripts vengono chiamati direttamente da views/layouts/application...

* viene chiamato direttamente il file "base.js"
* e vengono chiamati dinamicamente gli altri files perché di volta in volta è chiamato quello che ha lo stesso nome del controller.
