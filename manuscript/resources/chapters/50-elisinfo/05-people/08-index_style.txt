ATTENZIONE SPOSTIAMO QUESTO CAPITOLO NELLA SEZIONE "07-style"


# People index

Lavoriamo sul view index in modo da visualizzare l'elenco di persone (senza secondo elemento annidato).
Al momento NON INSERIAMO LE AZIENDE ANNIDATE perché quelle faranno parte di company_person_maps index. (Non esiste person_company_maps)

Qui puliamo e creiamo la visualizzazione a Livello 1 delle persone (non implementiamo il secondo livello annidato perché quando ho attivo il secondo livello vado su un'altra view/pagina model1_model2_maps; ad esempio: company_person_maps.
Quindi abbiamo la possibilità di:

* Creare nuova persona
* Vedere indice persone
* Vedere il dettaglio della persona, ossia lo show. (questa è un'azione che in elisinfo non usiamo. mettiamo tutto su index)
* Vedere la traduzione in più lingue



## Apriamo il branch "People Index"

{title="terminal", lang=bash, line-numbers=off}
```
$ git checkout -b pi
```




## Aggiorniamo la view

Adesso lavoriamo lato front-end. La view su cui operiamo è "index" in cui abbiamo la lista di tutte le aziende.




## Passiamo il codice del mockups

Ci passiamo tutto il codice del mockup "s2p2_people_index" (da -> a):

* .../app/views/mockups/s2p2_people_index.html.erb -> .../app/views/people/index.html.erb


{id: "50-05-06_01", caption: ".../views/people/index.html.erb -- codice 01", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<!doctype html>
<html class="no-js" lang="en">
  <head>
    <!-- title -->
```

[tutto il codice](#50-05-06_01all)

![Fig. 01](chapters/50-elisinfo/05-people/06_fig01-views-mockups-s2p2_people_index.png)

Adesso potrebbe anche funzionare ma il codice HTML che mandiamo al browser è sbagliato perché stiamo utilizzando il layout "application" e non "yield".
Funziona tutto perché, nei precedenti capitoli, abbiamo già attiato le chiamate stylesheet_pack_tag javascript_pack_tag ad "application" ed aggiornato il codice collegato.
Nel prossimo capitolo aggiustiamo il codice distribuendolo in maniera corretta tra il layout "application" e la pagina/view "home". 




## Puliamo il codice

Verifichiamo che il codice "<html> ... <head> ..." della pagina/view "people/index" corrisponde a quello nel layout "application" in cui abbiamo già spostato nei precedeti capitoli il codice creando la view "pages/home".
Il codice coincide e quindi semplicemente lo eliminiamo dalla pagina "people/index" se fosse stato differente avremmo utilizzato lo "yield content" come abbiamo fatto per il "title" che si presenta nel tab del browser.
Togliamo anche tutto il codice relativo al menu di navigazione.


{id: "50-05-06_02", caption: ".../views/people/index.html.erb -- codice 02", format: HTML+Mako, line-numbers: true, number-from: 1}
```
    <!-- start form style 01 section -->
    <section class="wow fadeIn padding-one-all" id="start-your-project">
      <div class="container">
        <div class="row justify-content-center">
```

[tutto il codice](#50-05-06_02all)




## Incorporiamo la parte dinamica

Adesso è arrivato il momento di incorporare la parte dinamica all'interno del codice del mockup.


{id: "50-05-06_03", caption: ".../views/people/index.html.erb -- codice 03", format: HTML+Mako, line-numbers: true, number-from: 1}
```
    <!-- start people section -->
    <section class="wow fadeIn padding-one-all">
      <div class="container">
        <div class="row">
          <!--<div class="col-md-10 col-sm-12 col-xs-12 center-col">-->
          <div class="col-12">
            <ul class="blog-comment">

              <% @people.each do |person| %>
                <li>

...
                      <%= link_to edit_person_path(person), class: "text-extra-dark-gray text-uppercase alt-font font-weight-600 text-small" do %>
                        <%= person.first_name %> <%= person.last_name %> - <%= person.id %>
                      <% end %>
...
                    <%= link_to new_person_path, class: "btn btn-small btn-transparent-white lg-margin-15px-bottom d-table d-lg-inline-block md-margin-lr-auto" do %>
                      <%= image_tag "pofo/icon_new.png", class: "img-circle width-85 xs-width-100", alt: "" %>
                    <% end %>
```

[tutto il codice](#50-05-06_03all)





## Verifichiamo preview

Vediamo la nostra applicazione rails funzionante. Attiviamo il webserver

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo service postgresql start
$ rails s
```

e vediamo sul nostro browser:

* https://mycloud9path.amazonaws.com/people

Funziona tutto.




## Il search




## Il pagination

Implementiamo quanto già visto in 11-theme-pofo/06-eg_posts/04-pagination_with_pofo
ed anche in 50-elisinfo/04-Companies/11-companies_index_style

Invece di usare un helper di pagy, usiamo un nostro partial. La chiamata risulta la seguente

{title="views/people/index.html.erb", lang=HTML+Mako, line-numbers=on, starting-line-number=28}
~~~~~~~~
                <!-- start pagination -->
                <%= render 'pagy/nav_pofo', pagy: @pagy %>
~~~~~~~~

usiamo lo stesso partial "nav_pofo" usato in 50-elisinfo/04-Companies/11-companies_index_style.




## Salviamo su Git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "Implement styled index on people"
```




## Pubblichiamo su Heroku

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku pi:master
```




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout master
$ git merge pi
$ git branch -d pi
```




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push origin master
```




## Il codice del capitolo



