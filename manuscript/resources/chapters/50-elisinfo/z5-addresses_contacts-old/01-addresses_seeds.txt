## Indirizzi

Al momento non normalizziamo gli indirizzi con sottotabelle (countries 1-∞ states 1-∞ addresses) ma creiamo una sola tabella polimorfica (addresses). Quindi non dobbiamo creare person_addresses e company_addresses.




## Apriamo il branch "Polimorphic Addresses Seeds"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b pas
~~~~~~~~




## Creiamo la tabella addresses

La tabella degli indirizzi avrà i seguenti campi:

* title : Sede Operativa (Operative Headquarters), Sede legale (Registered Office), Sede Amministrativa (Administrative Headquarters), Magazzino (Warehouse), Casa privata (private house), filiale (branch office), ...
* full_address : un unico campo grande per tutto l'indirizzo (ho un campo text che mi permette di usare dalle 3 alle 6 linee che coprono tutti gli indirizzi a livello mondiale.)
* latitude, longitude sono le coordinate GPS per quei posti che non hanno indirizzo.
* address_tag : un tag per i raggruppamenti utile quando andiamo a trovare i clienti (in futuro implementeremo la conoscenza fatta su addresses_seeds per mettere più tags)


Inoltre avrà i due campi per il polimorfismo:

* addressable_id per la chiave esterna (lato molti della relazione uno-a-molti)
* addressable_type per identificare la tabella esterna 

Usiamo lo Scaffold che mi imposta già l'applicazione in stile restful con le ultime convenzioni Rails.

I> ATTENZIONE: con "rails generate scaffold ..." -> uso il SINGOLARE

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g scaffold Address addressable_id:integer addressable_type:string title:string full_address:text latitude:string longitude:string address_tag:string
~~~~~~~~

questo mi crea il migration:

{title=".../db/migrate/xxx_create_addresses.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class CreateAddresses < ActiveRecord::Migration[5.0]
  def change
    create_table :addresses do |t|
      t.integer :addressable_id, foreign_key: true
      t.string :addressable_type
      t.string :title
      t.text :full_address
      t.string :latitude
      t.string :longitude
      t.string :address_tag

      t.timestamps
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~




## Internazionalizzazione I18n !!!

**********
   TODO
**********

la facciamo per title : Sede Operativa (Operative Headquarters), Sede legale (Registered Office), Sede Amministrativa (Administrative Headquarters), Magazzino (Warehouse), Casa privata (private house), filiale (branch office), ...





## Creiamo le associazioni polimorfiche ed aggiungiamo il nested models per i forms annidati

andiamo sul model ed aggiungiamo il polymorphic

{title=".../app/models/address.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class Address < ApplicationRecord

  # polymorphic ----------------------------------------------------------------
  belongs_to :addressable, polymorphic: true
  #-----------------------------------------------------------------------------
end
~~~~~~~~

andiamo sugli altri modelli ed aggiungiamo l'altro lato dell'associazione polimorfica

{title=".../app/models/company.rb", lang=ruby, line-numbers=on, starting-line-number=21}
~~~~~~~~
  # == Relationships ========================================================
  
  # polymorphic ----------------------------------------------------------------
  has_many :addresses, as: :addressable
  #-----------------------------------------------------------------------------
~~~~~~~~


{title=".../app/models/person.rb", lang=ruby, line-numbers=on, starting-line-number=16}
~~~~~~~~
  # == Relationships ========================================================
  
  # polymorphic ----------------------------------------------------------------
  has_many :addresses, as: :addressable
  #-----------------------------------------------------------------------------
~~~~~~~~




## Proviamo l'associazione polimorfica

Usiamo la tabella addresses per dare un indirizzo sia alla prima persona (Person.first) che alla prima azienda (Company.first). 

- Inseriamo l'indirizzo "Via Roma, 12  Roccantica RI 02040 Italia" alla prima persona (Person.first).
- Inseriamo l'indirizzo "Piazza del Gesù, 14B Roma RM 00100 Italia" alla prima azienda (Company.first).
- Inseriamo secondo indirizzo "Via Maria, 3 Roma RM 00100 Italia" alla prima azienda (Company.first).

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
irb> p = Person.first
irb> p.addresses.new(full_address: "Via Roma, 12\r\n02040 Roccantica RI\r\nItalia").save
irb> p.addresses
irb> pa = p.addresses.last
irb> c = Company.first
irb> c.addresses.new(full_address: "Piazza del Gesù, 14B\r\n00100 Roma RM\r\nItalia").save
irb> c.addresses
irb> ca1 = c.addresses.last
irb> ca2 = c.addresses.new(full_address: "Via Maria, 3\r\n00100 Roma RM\r\nItalia")
irb> c.addresses
irb> ca2.save
irb> c.addresses

irb> Address.all
irb> p.addresses
irb> c.addresses
~~~~~~~~

Per vedere l'altro lato dell'associazione non possiamo chiamare "pf.person" o "cf.company" perché sono creati dinamicamente a partire dalla stessa tabella polimorfica "favorites". Invece possiamo chiamare:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
irb> pa.addressable
irb> ca1.addressable
irb> ca2.addressable
~~~~~~~~

Dal punto di vista del polimorfismo abbiamo finito.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add popolate addresses"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku pas:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge pas
$ git branch -d pas
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~
