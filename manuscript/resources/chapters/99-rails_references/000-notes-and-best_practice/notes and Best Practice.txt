---
$ sudo service postgresql start
$ rails s

$ rails s -b $IP -p $PORT
https://rebisworld3-flaviobordonidev.c9users.io/

---
Creazione Nuove Utente 

L'inserimento di un nuovo utente va effettuato tramite rails console con i comandi che effettuarenno l'append del nuovo record direttamente sulla tabella users. Si possono usare entrambi i metodi portati ad esempio qui di seguito: 

$ sudo service postgresql start

$ rails c 

Metodo 1
> User.new({email: 'donazioni@duomomilano.it', password: 'D*****@2017', password_confirmation: 'D*****@2017'}).save

Metodo 2
> u = User.new({email: 'donazioni@duomomilano.it', password: 'D*****@2017', password_confirmation: 'D*****@2017'})
> u.save

Una volta creato il nuovo record, per aggiungerlo nel menù a cascata dell'home page e permettere all'amministratore di vedere tutti i kiosk inseriti, e filtrare le transazioni relative, bisogna inserire il seguente blocco comandi nel file homepage_controller.rb, come di seguito mostrato:

# Save the Children: 2
    when "user@mail.com"
      @company_name = "Save the Children"
      @kiosks = Company.find(2).kiosks
      
Come dopo ogni aggiunta o cambio di codice, dobbiamo caricare le modifiche su Git e poi inviarle in produzione su Heroku.      
      
---
Angle esempio online 

https://angle-on-rails.herokuapp.com/forms/upload



---
Galateo del codice. Come scrivere codice con stile.
https://github.com/bbatsov/ruby-style-guide
https://rubygarage.org/blog/best-ruby-gems-we-use?utm_source=rubyweekly&utm_medium=email
https://8thlight.com/blog/christoph-gockel/2016/10/19/getting-rails-on-track-part-1-models.html?utm_source=rubyweekly&utm_medium=email
http://codeloveandboards.com/blog/2014/02/05/ruby-and-method-arguments/

* [console shortcuts](https://pragmaticstudio.com/blog/2014/3/11/console-shortcuts-tips-tricks)

---
Routes
https://richonrails.com/articles/understanding-rails-routing


---
Rails for PHP Developers, The Pragmatic Programers (2008).pdf

your methods should be relatively short. 
anything more than twenty lines or so indicates the method is doing too much.

Your methods should also avoid having too many parameters. 
If your method takes more than three parameters, that could also be a sign
that your method is doing too much.

--
--

We'll develop this application in small iterations,
where small means "measured in minutes."




********************************************************************************
********************************************************************************
Link to multiple params

<%= link_to "game " + g.game_number.to_s, :action => "gametemplate", :id => 1, :season => 'winter', :year => 2007 %>

These will be accessible from the controller as 
  params[:id], params[:year] etc...

---
---

I basically want to pass my own custom variables to the link_to function
so I don't need to set up a bunch of actions within my controller.

So here's more of the details:

link_to example:

Code:

<% for g in @games %>
   <%= link_to "game " + g.game_number.to_s, :action => "gametemplate"%>
<% end %>


controller example code:
Code:

  def gametemplate
    b = Batter.new()
    @batter_stats = b.find_game_stats 1, 2007, "winter"
  end


I can then pass the @batter_stats to my view. However, how do I get the:
Code:
 1, 2007, "winter"
arguments from my link_to function?

I can't find an answer anywhere I feel this would be something easy to
do in rails. I got around this by setting up a separate action and
resulting view rhtml file to for each game. This is obviously not a very
good solution especially if I have 50 games. I'm a newbie @ rails and
any help would be appreciated.

Thanks.

---
On 9 Oct 2007, at 16:25, Jonathon Eastman wrote:

>
> I can then pass the @batter_stats to my view. However, how do I get  
> the:
> Code:
>  1, 2007, "winter"
> arguments from my link_to function?
>
You can pass as many arguments as you want:
<%= link_to "game " + g.game_number.to_s, :action =>
"gametemplate", :id => 1, :season => 'winter', :year => 2007 %>
These will be accessible from the controller as params[:id], params
[:year] etc...

Fred

********************************************************************************
********************************************************************************




********************************************************************************
********************************************************************************
Agilent
---
86.7 / 896

Playtime
Here’s some stuff to try on your own:

Experiment with the following expressions:

Addition: <%= 1+2 %>

Concatenation: <%= "cow" + "boy" %>

Time in one hour: <%= 1.hour.from_now %>

A call to the following Ruby method returns a list of all the files in the current directory:

 	@files = Dir.glob('*')
Use it to set an instance variable in a controller action, and then write the corresponding template that displays the filenames in a list on the browser.

Hint: you can iterate over a collection using something like this:

 	<% for file in @files %>
 	file name is: <%= file %>
 	<% end %>
You might want to use a <ul> for the list.

(You’ll find hints at http://www.pragprog.com/wikis/wiki/RailsPlayTime.)

---
117.1 / 896

Ruby hashes are similar to arrays. A hash literal uses braces rather than square brackets. The literal must supply two objects for every entry: one for the key, the other for the value. For example, you may want to map musical instruments to their orchestral sections:

 	inst_section = {
 	:cello => 'string',
 	:clarinet => 'woodwind',
 	:drum => 'percussion',
 	:oboe => 'woodwind',
 	:trumpet => 'brass',
 	:violin => 'string'
 	}
The thing to the left of the => is the key, and that on the right is the corresponding value. Keys in a particular hash must be unique—you can’t have two entries for :drum. The keys and values in a hash can be arbitrary objects—you can have hashes where the values are arrays, other hashes, and so on. In Rails, hashes typically use symbols as keys. Many Rails hashes have been subtly modified so that you can use either a string or a symbol interchangeably as a key when inserting and looking up values.

Use of symbols as hash keys is so commonplace that starting with Ruby 1.9 there is a special syntax for it, saving both keystrokes and eyestrain.

 	inst_section = {
 	cello: 'string',
 	clarinet: 'woodwind',
 	drum: 'percussion',
 	oboe: 'woodwind',
 	trumpet: 'brass',
 	violin: 'string'
 	}
Doesn’t that look much better?

Feel free to use whichever syntax you like. You can even intermix usages in a single expression. Obviously you’ll need to use the arrow syntax whenever the key is not a symbol, or if you are using Ruby 1.8.7. However, most developers seem to prefer the new syntax, and Rails will even generate scaffolds using the new syntax if it detects that you are running Rails 1.9.2.

Hashes are indexed using the same square bracket notation as arrays:

 	inst_section[:oboe] #=> 'woodwind'
 	inst_section[:cello] #=> 'string'
 	inst_section[:bassoon] #=> nil
As the previous example shows, a hash returns nil when indexed by a key it doesn’t contain. Normally this is convenient, because nil means false when used in conditional expressions.

You can pass hashes as parameters on method calls. Ruby allows you to omit the braces, but only if the hash is the last parameter of the call. Rails makes extensive use of this feature. The following code fragment shows a two-element hash being passed to the redirect_to method. In effect, though, you can ignore that it’s a hash and pretend that Ruby has keyword arguments.

 	redirect_to action: 'show', id: product.id

---
137.0 / 896
4.7 Ruby Idioms

a || b
The expression a || b evaluates a. If it isn’t false or nil, then evaluation stops, and the expression returns a. Otherwise, the statement returns b. This is a common way of returning a default value if the first value hasn’t been set.

a ||= b
The assignment statement supports a set of shortcuts: a op= b is the same as a = a op b. This works for most operators.

 	count += 1 # same as count = count + 1
 	price *= discount # price = price * discount
 	count ||= 0 # count = count || 0
So, count ||= 0 gives count the value 0 if count doesn’t already have a value.

lambda
The lambda operator converts a block into an object of type Proc. We will see this used ​here​.{577.4 / 896}

---
577.4 / 896
Scopes
As these chains of method calls grow longer, making the chains themselves available for reuse becomes a concern. Once again, Rails delivers. An Active Record scope can be associated with a Proc and therefore may have arguments:

 	class Order < ActiveRecord::Base
 	scope :last_n_days, lambda { |days| where('updated < ?' , days) }
 	end
Such a named scope would make finding the last week’s worth of orders a snap:

 	orders = Order.last_n_days(7)
Simpler scopes can simply be a set of method calls:

 	class Order < ActiveRecord::Base
 	scope :checks, where(pay_type: :check)
 	end
Scopes can also be combined. Finding the last week’s worth of orders that were paid by check is just as easy:

 	orders = Order.checks.last_n_days(7)
In addition to making your application code easier to write and easier to read, scopes can make your code more efficient. The previous statement, for example, is implemented as a single SQL query.

ActiveRecord::Relation objects are equivalent to an anonymous scope:

 	in_house = Order.where('email LIKE "%@pragprog.com"')
Of course, relations can also be combined:

 	in_house.checks.last_n_days(7)
Scopes aren’t limited to where conditions; we can do pretty much anything we can do in a method call: limit, order, join, and so on. Just be aware that Rails doesn’t know how to handle multiple order or limit clauses, so be sure to use these only once per call chain.

---
238.0 / 896
Chapter 9