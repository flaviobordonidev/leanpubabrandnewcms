# Andiamo in produzione - connettiamoci a Heroku

In realtà creiamo una nuova sessione su heroku ma stiamo attenti a non sovrascrivere la nostra già esistente!
I passaggi sono praticamente identici a quanto fatto nel capitolo 01-beginning/04-heroku/02-inizializiamo_heroku

Risorse interne:

* 99-rails_references/Heroku/05-reconnect-a-cloned-app




## Apriamo il branch "Aggiorniamo Collegamenti Git"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b acg
```




## Verifichiamo se abbiamo Heroku installato su aws Cloud9  

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku --version


user_fb:~/environment/angletheme (acg) $ heroku --version

Command 'heroku' not found, but can be installed with:

sudo snap install heroku

user_fb:~/environment/angletheme (acg) $ 
```

Nel nostro caso non è installato e riceviamo il consiglio di installarlo usando "snap", ma non seguiamo il consiglio.

Se provassimo ad usare il comando consigliato avremmo il seguente avviso:

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo snap install heroku


ubuntu:~/environment/s5cmsbeginning (acg) $ sudo snap install heroku
error: This revision of snap "heroku" was published using classic confinement and thus may perform
       arbitrary system changes outside of the security sandbox that snaps are usually confined to,
       which may put your system at risk.

       If you understand and want to proceed repeat the command including --classic.
```

Non ci piace molto l'avviso e quindi non aggiungiamo "--classic" ma usiamo le indicazioni di Heroku, come già fatto in precedenza.




## Installiamo Heroku CLI

Come abbiamo già fatto per PostgreSQL, anche Heroku lo installiamo sulla cartella principale di aws Cloud9: "/environment".
Assicuriamoci di essere sulla cartella principale

{caption: "terminal", format: bash, line-numbers: false}
```
$ cd ~/environment
```

Per installare Heroku dobbiamo scaricare ed installare la "heroku CLI" (ex heroku-toolbelt).


Seguendo le indicazioni di [Heroku](https://devcenter.heroku.com/articles/heroku-cli) il comando che dobbiamo usare da aws cloud9, che è un "docker container" è questo:

{caption: "terminal", format: bash, line-numbers: false}
```
$ sudo su - 
-> curl https://cli-assets.heroku.com/install.sh | sh
-> exit


user_fb:~/environment/angletheme (acg) $ cd ~/environment
user_fb:~/environment $ sudo su - 
root@ip-172-31-40-231:~# curl https://cli-assets.heroku.com/install.sh | sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1892  100  1892    0     0  12285      0 --:--:-- --:--:-- --:--:-- 12285
Installing CLI from https://cli-assets.heroku.com/heroku-linux-x64.tar.xz
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 17.6M  100 17.6M    0     0  6102k      0  0:00:02  0:00:02 --:--:-- 6100k
v12.13.0
heroku installed to /usr/local/bin/heroku
heroku/7.39.0 linux-x64 node-v12.13.0
root@ip-172-31-40-231:~# exit
logout
user_fb:~/environment $
```


Verifichiamo che l'installazione è andata a buon fine.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku --version

user_fb:~/environment $ heroku --version
heroku/7.39.0 linux-x64 node-v12.13.0
```




## Creiamo l'app su heroku

Torniamo nella cartella della nostra applicazione Rails

{caption: "terminal", format: bash, line-numbers: false}
```
$ cd angletheme
```


Loghiamoci con le credenziali del nostro account heroku.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku login


ubuntu:~/environment/s5cmsbeginning (acg) $ heroku login
heroku: Press any key to open up the browser to login or q to exit: 
 ›   Warning: Cannot open browser. Go to https://cli-auth.heroku.com/auth/browser/05cbd1ba-41b2-45c6-8258-8977aadca96c to finish login or run heroku 
 ›   login --interactive
 ›
Logging in... done
```

Questa procedura ti fa fare il login sulla pagina web. Basta cliccare sul link, scegliere "open" ed eseguire il login.


Aggiungiamo la nostra chiave di criptatura in modo da stabilire un canale sicuro tra aws Cloud9 ed Heroku.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku keys:add
-> y


ubuntu:~/environment/s5cmsbeginning (acg) $ heroku keys:add
Found an SSH public key at /home/ubuntu/.ssh/id_rsa.pub
? Would you like to upload it to Heroku? Yes
Uploading /home/ubuntu/.ssh/id_rsa.pub SSH key... done
```


Creiamo una nuova app su heroku.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku create


cloud9:~/environment/rigenerabatterie (pubprod) $ heroku create
Creating app... done, ⬢ pacific-sea-70617
https://pacific-sea-70617.herokuapp.com/ | https://git.heroku.com/pacific-sea-70617.git
```

l'app viene creata dinamnicamente. In questo caso è stato creato "pacific-sea-70617" ma può essere qualsiasi nome.


Per verficarlo si può usare il comando

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku domains

cloud9:~/environment/rigenerabatterie (pubprod) $ heroku domains
=== pacific-sea-70617 Heroku Domain
pacific-sea-70617.herokuapp.com
```

o

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku apps:info

cloud9:~/environment/rigenerabatterie (pubprod) $ heroku apps:info
=== pacific-sea-70617
Auto Cert Mgmt: false
Dynos:          
Git URL:        https://git.heroku.com/pacific-sea-70617.git
Owner:          flavio.bordoni.dev@gmail.com
Region:         us
Repo Size:      0 B
Slug Size:      0 B
Stack:          heroku-18
Web URL:        https://pacific-sea-70617.herokuapp.com/
```


Possiamo verificare che abbiamo la configurazione git corretta con

{caption: "terminal", format: bash, line-numbers: false}
```
$ git config --list | grep heroku

cloud9:~/environment/rigenerabatterie (pubprod) $ git config --list | grep heroku
remote.heroku.url=https://git.heroku.com/pacific-sea-70617.git
remote.heroku.fetch=+refs/heads/*:refs/remotes/heroku/*
```

Se vedi "fatal: not in a git directory" allora probabilmente non sei nella directory corretta. Altrimenti puoi mandare in produzione il tuo codice.




## Rinominiamo l'app

Diamo all'app di heroku un nome simile a quello della nostra istanza di aws cloud9 (s5cmsbeginning) così è più facile associarli.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku rename angletheme


ubuntu:~/environment/s5cmsbeginning (acg) $ heroku rename s5cmsbeginning
Renaming mysterious-basin-77133 to s5cmsbeginning... done
https://s5cmsbeginning.herokuapp.com/ | https://git.heroku.com/s5cmsbeginning.git
Git remote heroku updated
 ▸    Don't forget to update git remotes for all other local checkouts of the app.
```

verifichiamo di nuovo le informazione della nostra app

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku apps:info


ubuntu:~/environment/s5cmsbeginning (acg) $ heroku apps:info
=== s5cmsbeginning
Auto Cert Mgmt: false
Dynos:          
Git URL:        https://git.heroku.com/s5cmsbeginning.git
Owner:          flavio.bordoni@gmail.com
Region:         us
Repo Size:      0 B
Slug Size:      0 B
Stack:          heroku-18
Web URL:        https://s5cmsbeginning.herokuapp.com/
```

e la configurazione di git

{caption: "terminal", format: bash, line-numbers: false}
```
$ git config --list | grep heroku


ubuntu:~/environment/s5cmsbeginning (acg) $ git config --list | grep heroku
remote.heroku.url=https://git.heroku.com/s5cmsbeginning.git
remote.heroku.fetch=+refs/heads/*:refs/remotes/heroku/*
```

Adesso è tutto pronto. Posso fare il commit finale in locale e uploadare tutto in remoto.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "ready to public in production on heroku"
```




## Pubblichiamo su heroku

Attenzione! per pubblicare su heroku da un branch si usa un comando specifico ( git push heroku yourbranch:master )
(vedi https://devcenter.heroku.com/articles/git)

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku acg:master
$ heroku run rake db:migrate
```

ATTENZIONE. Se la compilazione fallisce potrebbe essere necessario aggiornare bundle:

{caption: "terminal", format: bash, line-numbers: false}
```
$ bundle update
$ git add -A
$ git commit -m "update bundle"
```

E riprovare a pubblicare su heroku



### Verifichiamo production

La nostra applicazione è ora in produzione su heroku. La possiamo vedere sul broser all'URL

https://cmsbase.herokuapp.com/

Abbiamo un errore generico

    " Application error
    An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details. You can do this from the Heroku CLI with the command
    heroku logs --tail "




### Verifichiamo la log

il messaggio è molto generico e non ci aiuta molto.

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku logs --tail


ubuntu:~/environment/s5beginning (acg) $ heroku logs --tail
[...]
2019-08-16T10:57:37.042348+00:00 heroku[router]: at=error code=H10 desc="App crashed" method=GET path="/" host=cmsbase.herokuapp.com request_id=2ceb9153-20aa-4632-bf63-b27d65ad4a73 fwd="92.223.151.11" dyno= connect= service= status=503 bytes= protocol=https
2019-08-16T10:57:37.406230+00:00 heroku[router]: at=error code=H10 desc="App crashed" method=GET path="/favicon.ico" host=cmsbase.herokuapp.com request_id=002847e3-d281-43cf-ba3b-43ab161b311d fwd="92.223.151.11" dyno= connect= service= status=503 bytes= proto
```



## Verifichiamo da Heroku console

questo messaggio è molto più chiaro

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku run rails console


ubuntu:~/environment/s5beginning (acg) $ heroku run rails console
Running rails console on ⬢ cmsbase... up, run.4255 (Free)
Traceback (most recent call last):
        109: from /app/bin/rails:9:in `<main>'
[...]
`extract_credentials_provider': Cannot load `Rails.config.active_storage.service`: (Aws::Sigv4::Errors::MissingCredentialsError)
missing credentials, provide credentials with one of the following options:
  - :access_key_id and :secret_access_key
  - :credentials
  - :credentials_provider
```

Ci siamo dimenticati di passare le credenziali per active_storage !?!

P.S.
un altro posto che ti può dare indicazioni è " heroku restart ". 
heroku restart helped me identify my issue. My bin folder was missing.




### Passiamo ad Heroku variabili per collegamento ad aws S3

Heroku non ha le variabili per accedere al bucket "myapp-prod" che abbiamo creato su aws S3.
Passiamo le variabile d'ambiente ad heroku via terminale

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku config:set AWS_ACCESS_KEY_ID='AKIA....JTOMA'
$ heroku config:set AWS_SECRET_ACCESS_KEY='LwdJ........45KHZ'
$ heroku config:set AWS_REGION='us-east-1'
$ heroku config:set S3_BUCKET_NAME='angletheme-prod'
~~~~~~~~




### Verifichiamo production

La nostra applicazione è ora in produzione su heroku. La possiamo vedere sul broser all'URL

https://cmspofo.herokuapp.com/

Adesso funziona tutto :)

ATTENZIONE! se dovesse esserci un errore come detto prima analizzate prima "$ heroku run rails console" ed eventualmente anche "$ heroku logs --tail".
Ad esempio qui ho visto anche che mi dava problemi il file "controllers/eg_posts_controllerOLD.rb" che è una copia che avevo fatto e che in development non dava problemi.




## Aggiungiamo un utente da console

Creiamo l'utente "Ann" e lo rendiamo amministratore

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
-> User.create(name: 'Ann', email: 'ann@test.abc', password: 'passworda', password_confirmation: 'passworda')
-> u = User.last
-> u.role = :admin
-> u.save(validate: false)
-> exit
~~~~~~~~

Per colpa delle validazioni nel model User, non possiamo usare il comodo comando "User.last.admin!"




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge acg
$ git branch -d acg
~~~~~~~~









**** OLD *****



## Ripristiniamo le credenziali per active_storage

Riprendiamo i "secrets" dell'utente aws IAM user "bots5beginning". Per approfondimenti rivedi il capitolo 01-beginning/12-activestorage-filesupload/04-aws_s3_activestorage

I due secrets, che avevamo archiviato in un posto sicuro (ad es: Keepass X) sono:

*  access_key_id: AKI...LWBYA
*  secret_access_key: sx1......G2nyKdela



### ATTENZIONE al file config/master.key

Per giusti motivi di sicurezza la "master key" non è passata tramite git. E' infatti aggiunta al file .gitignore

{title=".../.gitignore", lang=text, line-numbers=on, starting-line-number=26}
```
# Ignore master key for decrypting credentials and more.
/config/master.key
```

Quando proviamo a decrittare il file "credentials", se non è presente, viene automaticamente creato un file config/master.key con all'interno un valore random.
Esendo quindi il valore della master.key differente da quella che ha crittato il file originariamente riceveremo un errore se cerchiamo di editarlo

{caption: "terminal", format: bash, line-numbers: false}
```
$ EDITOR=vim rails credentials:edit


ubuntu:~/environment/s5beginning (acg) $ EDITOR=vim rails credentials:edit
Traceback (most recent call last):
        37: from bin/rails:3:in `<main>'
[...]
         1: from /home/ubuntu/.rvm/gems/ruby-2.6.3/gems/activesupport-5.2.3/lib/active_support/message_encryptor.rb:201:in `_decrypt'
/home/ubuntu/.rvm/gems/ruby-2.6.3/gems/activesupport-5.2.3/lib/active_support/message_encryptor.rb:201:in `final': OpenSSL::Cipher::CipherError
        37: from bin/rails:3:in `<main>'
        36: from bin/rails:3:in `load'
[...]
         8: from /home/ubuntu/.rvm/gems/ruby-2.6.3/gems/railties-5.2.3/lib/rails/commands/credentials/credentials_command.rb:50:in `change_credentials_in_system_editor'
         7: from /home/ubuntu/.rvm/gems/ruby-2.6.3/gems/activesupport-5.2.3/lib/active_support/encrypted_file.rb:54:in `change'
[...]
         1: from /home/ubuntu/.rvm/gems/ruby-2.6.3/gems/activesupport-5.2.3/lib/active_support/message_encryptor.rb:183:in `_decrypt'
/home/ubuntu/.rvm/gems/ruby-2.6.3/gems/activesupport-5.2.3/lib/active_support/message_encryptor.rb:206:in `rescue in _decrypt': ActiveSupport::MessageEncryptor::InvalidMessage (ActiveSupport::MessageEncryptor::InvalidMessage)
```




## Ripristiniamo valore corretto su config/master.key







## Implementiamo i due secrets

Implementiamo le due secrets nel file criptato "credentials". Per editare il file eseguire:

{caption: "terminal", format: bash, line-numbers: false}
```
$ EDITOR=vim rails credentials:edit
```

Questo apre il file decrittato sul terminale usando vim. Come potrai vedere il file decrittato assomiglia ad un normale file .yml

Per editarlo:
* muoviti usando le frecce sulla tastiera
* quando vuoi inserire del testo premi "i". Quando hai finito premi "ESC"
* per salvare ":w"
* per uscire ":q"

Quando salvi rail automaticamente critta il file usando la master key.

{caption: "terminal", format: bash, line-numbers: false}
```
aws:
  access_key_id: AKI...LWBYA
  secret_access_key: sx1......G2nyKdela
```

![Fig. 01](images/01-beginning/11-activestorage-filesupload/04_01-rails-encrypted-credentials.png)

Il nostro "aws" lo avremmo potuto più correttamente chiamare "aws_iam_bots5beginning" 



*********
*** Da rivedere perché io ho eliminato e creato un nuovo IAM user. Sicuramente bastava solo aggiornare la master.key in modo che le variabili del file criptato credentials venivano passate correttamente *****
**********






### Verifichiamo lettura secrets nel file criptato

Verifichiamo che le variabili aws che abbiamo appena aggiunto siano correttamente implementate

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails c
-> Rails.application.credentials.dig(:aws, :access_key_id)   # => "AKI...LWBYA"
-> Rails.application.credentials.dig(:aws, :secret_access_key)   # => "sx1......G2nyKdela"
```



Adesso è tutto pronto. Posso fare il commit finale in locale e uploadare tutto in remoto.

{caption: "terminal", format: bash, line-numbers: false}
```
$ git add -A
$ git commit -m "restore master.key"
```




## Pubblichiamo su heroku

Attenzione! per pubblicare su heroku da un branch si usa un comando specifico ( git push heroku yourbranch:master )
(vedi https://devcenter.heroku.com/articles/git)

{caption: "terminal", format: bash, line-numbers: false}
```
$ git push heroku acg:master
$ heroku run rake db:migrate
```




### Passiamo ad Heroku variabili per collegamento ad aws S3

Heroku non ha le variabili per accedere al bucket "myapp-prod" che abbiamo creato su aws S3.
Passiamo le variabile d'ambiente ad heroku via terminale

{caption: "terminal", format: bash, line-numbers: false}
```
$ heroku config:set AWS_ACCESS_KEY_ID='AKIA....JTOMA'
$ heroku config:set AWS_SECRET_ACCESS_KEY='LwdJ........45KHZ'
$ heroku config:set AWS_REGION='us-east-1'
$ heroku config:set S3_BUCKET_NAME='cmspofo-prod'
```




### Verifichiamo production

La nostra applicazione è ora in produzione su heroku. La possiamo vedere sul broser all'URL

https://cmspofo.herokuapp.com/

Adesso funziona tutto :)

