
https://developers.google.com/youtube/iframe_api_reference

player.getPlayerState():Number
Returns the state of the player. Possible values are:
-1 – unstarted
0 – ended
1 – playing
2 – paused
3 – buffering
5 – video cued
player.getCurrentTime():Number
Returns the elapsed time in seconds since the video started playing.

https://blogs.perficient.com/2021/01/07/implementing-custom-play-pause-button-for-embedded-youtube-videos-using-iframe-player-api/




 <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    
    <ul id="menu">
        <li>Services</li>
        <li>About</li>
        <li>Contact</li>
    </ul>

    
    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          playerVars: {
            'playsinline': 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
 
                
        if (event.data == YT.PlayerState.PAUSED) {          
                  let menu = document.getElementById('menu');
        // create a new li node
        let li = document.createElement('li');
        li.textContent = 'testo-PAUSED';

        // insert a new node before the first list item
        menu.insertBefore(li, menu.firstElementChild);
        }

        
                if (event.data == YT.PlayerState.ENDED) {          
                  let menu = document.getElementById('menu');
        // create a new li node
        let li = document.createElement('li');
        li.textContent = 'testo-ENDED';

        // insert a new node before the first list item
        menu.insertBefore(li, menu.firstElementChild);
        }


        
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 20000);
          
                  let menu = document.getElementById('menu');
        // create a new li node
        let li = document.createElement('li');
        li.textContent = 'testo-PLAYING';

        // insert a new node before the first list item
        menu.insertBefore(li, menu.firstElementChild);

          done = true;
        }
        
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>


———


<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          playerVars: {
            'playsinline': 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>

    <ul id="menu">
        <li>Services</li>
        <li>About</li>
        <li>Contact</li>
    </ul>
    <script>
        let menu = document.getElementById('menu');
        // create a new li node
        let li = document.createElement('li');
        li.textContent = 'Home';

        // insert a new node before the first list item
        menu.insertBefore(li, menu.firstElementChild);
    </script>

    
  </body>
</html>




---
https://blogs.perficient.com/2021/01/07/implementing-custom-play-pause-button-for-embedded-youtube-videos-using-iframe-player-api/



---
https://www.makeuseof.com/tag/best-free-online-html-editors/

1. CodePen (https://codepen.io/)
2. JSFiddle (https://jsfiddle.net/)
3. JSBin (http://jsbin.com/)
4. Liveweave (https://liveweave.com/)
5. solo HTML
6. solo HTML
7. Dabblet (https://dabblet.com/)


---
https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore

https://www.javascripttutorial.net/javascript-dom/javascript-insertbefore/

---
Gestire le chiamate javascript 

https://forum.matomo.org/t/cutom-html-tag-load-javascript-with-custom-attributes/38546

(Matomo.org è un progetto per un'alternativa a google Analitics)

Cutom HTML Tag - load javascript with custom attributes

Hello,

I need to generate a custom html tag that runs a specific javascript, and passes custom attributes to it. Something like:
<script src="https://consent.cookiebot.com/uc.js" data-cbid="some-numbers" data-blockingmode="auto" type="text/javascript"></script>
I use as trigger DOM ready, and this tag needs to be at head start as first, so top priority.

Problem is, the Tag gets fired but no attributes is passed. In my DOM i just get:
<script src="https://consent.cookiebot.com/uc.js" type="text/javascript"></script>
and obviously the javascript fails.

Any tipps why the custom attributes are discarded?

Thanks for the help!

Hi,

You could use a method very similar to the Matomo tracking code: Write a bit of JS that adds the script tag you want to the DOM.

The Matomo tracking code looks like this:

var d = document, g = d.createElement('script'), s = d.getElementsByTagName('script')[0];
g.type = 'text/javascript';
g.async = true;
g.defer = true;
g.src = u + 'statistics.js';
s.parentNode.insertBefore(g, s);
So you can fit this to your use case like this

const scriptEl = document.createElement('script')
const firstScript = document.getElementsByTagName('script')[0];
scriptEl.type = 'text/javascript';
scriptEl.src = 'https://consent.cookiebot.com/uc.js'
scriptEl.dataset.cbid = "some-numbers"
scriptEl.dataset.blockingmode = "auto"
firstScript.parentNode.insertBefore(scriptEl, firstScript);

or if you need to support older browsers (https://caniuse.com/dataset, https://caniuse.com/const) and are okay with more ugly code

var scriptEl = document.createElement('script')
var firstScript = document.getElementsByTagName('script')[0];
scriptEl.type = 'text/javascript';
scriptEl.src = 'https://consent.cookiebot.com/uc.js'
scriptEl.setAttribute("data-cbit", "some-numbers")
scriptEl.setAttribute("blockingmode", "auto")
firstScript.parentNode.insertBefore(scriptEl, firstScript);