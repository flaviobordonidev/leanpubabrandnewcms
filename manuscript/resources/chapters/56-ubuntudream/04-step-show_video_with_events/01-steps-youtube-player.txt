{id: 56-ubuntudream-03-lessons-steps-03-users_answers}
# Cap 3.3 -- Implementiamo il video

Ogni step si apre inizialmente solo con il player di un video che possiamo mettere a schermo intero. 
Alla fine del video il player scompare ed appare scritta la domanda fatta nel video ed il form per scrivere la risposta.
Su submit del form si va al secondo step con la seconda parte del video; e così via fino alla fine della lezione.

Attenzione:
Purtroppo sul browser Chrome, per motivi di sicurezza, il video può partire in automatico solo se è in mute.
Fare dei test di usabilità per capire se è meglio far togliere il mute all'utente da un video che parte in automatico o se mettere il video senza mute e far premere play all'utente per far partire il video con l'audio.


Risorse esterne:

* https://developers.google.com/youtube/iframe_api_reference
* https://developers.google.com/youtube/player_parameters
* https://developers.google.com/youtube/youtube_player_demo
* https://jsfiddle.net/jeffposnick/WhLH5/1/
* https://blogs.perficient.com/2021/01/07/implementing-custom-play-pause-button-for-embedded-youtube-videos-using-iframe-player-api/
* https://www.makeuseof.com/tag/best-free-online-html-editors/
    1. CodePen (https://codepen.io/)
    2. JSFiddle (https://jsfiddle.net/)
    3. JSBin (http://jsbin.com/)
    4. Liveweave (https://liveweave.com/)
    5. solo HTML
    6. solo HTML
    7. Dabblet (https://dabblet.com/)
* https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
* https://www.javascripttutorial.net/javascript-dom/javascript-insertbefore/

* [Gestire le chiamate javascript](https://forum.matomo.org/t/cutom-html-tag-load-javascript-with-custom-attributes/38546)


Cutom HTML Tag - load javascript with custom attributes

Hello,
I need to generate a custom html tag that runs a specific javascript, and passes custom attributes to it. Something like:
<script src="https://consent.cookiebot.com/uc.js" data-cbid="some-numbers" data-blockingmode="auto" type="text/javascript"></script>
I use as trigger DOM ready, and this tag needs to be at head start as first, so top priority.

Problem is, the Tag gets fired but no attributes is passed. In my DOM i just get:
<script src="https://consent.cookiebot.com/uc.js" type="text/javascript"></script>
and obviously the javascript fails.

Any tipps why the custom attributes are discarded?

Thanks for the help!

Hi,
You could use a method very similar to the Matomo tracking code: Write a bit of JS that adds the script tag you want to the DOM.

The Matomo tracking code looks like this:

var d = document, g = d.createElement('script'), s = d.getElementsByTagName('script')[0];
g.type = 'text/javascript';
g.async = true;
g.defer = true;
g.src = u + 'statistics.js';
s.parentNode.insertBefore(g, s);
So you can fit this to your use case like this

const scriptEl = document.createElement('script')
const firstScript = document.getElementsByTagName('script')[0];
scriptEl.type = 'text/javascript';
scriptEl.src = 'https://consent.cookiebot.com/uc.js'
scriptEl.dataset.cbid = "some-numbers"
scriptEl.dataset.blockingmode = "auto"
firstScript.parentNode.insertBefore(scriptEl, firstScript);

or if you need to support older browsers (https://caniuse.com/dataset, https://caniuse.com/const) and are okay with more ugly code

var scriptEl = document.createElement('script')
var firstScript = document.getElementsByTagName('script')[0];
scriptEl.type = 'text/javascript';
scriptEl.src = 'https://consent.cookiebot.com/uc.js'
scriptEl.setAttribute("data-cbit", "some-numbers")
scriptEl.setAttribute("blockingmode", "auto")
firstScript.parentNode.insertBefore(scriptEl, firstScript);




## Apriamo il branch "Implementiamo il Video"

{caption: "terminal", format: bash, line-numbers: false}
```
$ git checkout -b iv
```






## youtube embedded video - events

Di seguito gli eventi che si possono prendere dal player dei video su youtube.

```
player.getPlayerState():Number
```

Returns the state of the player. Possible values are:
-1 – unstarted
0 – ended
1 – playing
2 – paused
3 – buffering
5 – video cued

```
player.getCurrentTime():Number
```

Returns the elapsed time in seconds since the video started playing.



## Lo scritto base dalla documentazione di Youtube del suo player 

Mettiamo il codice preso direttamente dalla documentazione di Youtube in un view di mockups.

* (YouTube Player API Reference for iframe Embeds)[https://developers.google.com/youtube/iframe_api_reference]


{id: "56-04-01_1", caption: ".../views/mockups/youtube_player.html.erb -- codice 1", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          playerVars: {
            'playsinline': 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
  </body>
</html>
```

[tutto il codice](#56-04-01_1all)




## Aggiungiamo nel controller

mettiamo la chiamata a questa view specificando il layout di tipo "mockup" che è quello che ha una struttura vuota, non ha un html preimpostato.

{id: "56-04-01_2", caption: ".../controllers/mockups_controller.rb -- codice 02", format: ruby, line-numbers: true, number-from: 1}
```
  # youtube-video
  def youtube_video
    render layout: 'mockup'
  end
```

[tutto il codice](#56-04-01_2all)




## Aggiungiamo instradamento

mettiamo adesso nella routes la chiamata alla view.


{id: "56-04-01_3", caption: ".../config/routes.rb -- codice 03", format: ruby, line-numbers: true, number-from: 1}
```
  get 'mockups/youtube_player'
```

[tutto il codice](#56-04-01_2all)




## Andiamo a vedere il risultato

{caption: "terminal", format: bash, line-numbers: false}
```
$ rails s
```

e sul browser andiamo all'url:

https://my_cloud9_app.us-east-1.amazonaws.com/mockups/youtube_player

Se siamo sul browser google chrome non parte in automatico perché è stata implementata una misura per la privacy che prevede che i video possano partire in automatico solo se sono su mute, e quindi senza audio.
Inoltre la prima volta dopo 6 secondi si interrompe perché su javascript -> setTimeout(stopVideo, 6000);
La seconda volta continua senza interruzione perché su javascript -> done = true;




## Facciamo delle modifiche

Innanzi tutto noi vogliamo che il comportamento si ripeta tutte le volte e non solo la prima volta quindi potremmo commentare "done = true;"

```
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          //done = true;
        }

```

Ma è più pulito togliere proprio la variabile "done".

Inoltre non siamo interessati ad interrompere il video ma a intercettare quando il video finisce quindi rimpiazziamo anche quella parte di codice con il seguente.

{id: "56-04-01_4", caption: ".../views/mockups/youtube_player.html.erb -- codice 4", format: HTML+Mako, line-numbers: true, number-from: 1}
```
        if (event.data == YT.PlayerState.PLAYING) {
          console.log("PLAYING");
        }
        if (event.data == YT.PlayerState.PAUSED) {          
          console.log("PAUSED");
        }
        if (event.data == YT.PlayerState.ENDED) {          
          console.log("ENDED - Evviva ^_^");
        }
```

[tutto il codice](#56-04-01_4all)

Aprendo sul browser la javascript console, ad esempio nel menu di Chrome è su view/Developer/JavaScript Console, vediamo loggate tutte le azioni di pausa, start e fine del video.




## Interagiamo con JavaScript nel DOM HTML

Adesso invece di scrivere a console quando parte o si interrompe un video inseriamo dei tag <li> all'interno di un <ul> che preimpostiamo.

{id: "56-04-01_5", caption: ".../views/mockups/youtube_player.html.erb -- codice 5", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <ul id="player-commands-list"><li></li></ul>

```

{caption: ".../views/mockups/youtube_player.html.erb -- codice 5 (continua)", format: HTML+Mako, line-numbers: true, number-from: 1}
```
        if (event.data == YT.PlayerState.PLAYING) {
          console.log("PLAYING");
          let pcl = document.getElementById('player-commands-list'); // mettiamo su una variabile il tag <ul id="player-commands-list"></ul>
          let li = document.createElement('li'); // creiamo un nuovo tag <li></li>
          li.textContent = 'PLAYING'; // inseriamo il valore tra il tag <li></li>
          menu.insertBefore(li, menu.firstElementChild); // insert a new node before the first list item
        }
        if (event.data == YT.PlayerState.PAUSED) {          
          console.log("PAUSED");
          let pcl = document.getElementById('player-commands-list'); // mettiamo su una variabile il tag <ul id="player-commands-list"></ul>
          let li = document.createElement('li'); // creiamo un nuovo tag <li></li>
          li.textContent = 'PAUSED'; // inseriamo il valore tra il tag <li></li>
          menu.insertBefore(li, menu.firstElementChild); // insert a new node before the first list item
        }
        if (event.data == YT.PlayerState.ENDED) {          
          console.log("ENDED - Evviva ^_^");
          let pcl = document.getElementById('player-commands-list'); // mettiamo su una variabile il tag <ul id="player-commands-list"></ul>
          let li = document.createElement('li'); // creiamo un nuovo tag <li></li>
          li.textContent = 'ENDED'; // inseriamo il valore tra il tag <li></li>
          menu.insertBefore(li, menu.firstElementChild); // insert a new node before the first list item
        }
```

[tutto il codice](#56-04-01_5all)





## Nascondiamo il video quando termina e visualizziamo il form per la risposta

Prepariamo il form generico per la risposta

{id: "56-04-01_6", caption: ".../views/mockups/youtube_player.html.erb -- codice 5", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <%= form_tag "", method: "get", id: "test-form", class: "bottom-pad" do %>
      <%= text_field_tag :search, params[:search], class: "form-control", placeholder: "rispondi..." %>
      <%= content_tag :button, type: "submit", class: "btn btn-primary" do %>Invia<% end %>
    <% end %>

    <ul id="player-commands-list"><li></li></ul>
```

diamogli un po' di stile

{caption: ".../views/mockups/youtube_player.html.erb -- codice 6 (continua)", format: HTML+Mako, line-numbers: true, number-from: 1}
```
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
  #test-form {
    width: 100%;
    padding: 50px 0;
    text-align: center;
    background-color: lightblue;
    margin-top: 20px;
    display: none; /*non visualizziamo il form*/
  }
  #test-form .form-control {
    width: 90%;
    margin: 0 auto;
    margin-bottom: 10px;
    /*float: none;*/
  }
  #test-form .btn {
    width: 90%;
  }
  </style>
</head>
```

quando finisce il video nascondiamo il player e visualizziamo il form

{caption: ".../views/mockups/youtube_player.html.erb -- codice 6 (continua)", format: HTML+Mako, line-numbers: true, number-from: 1}
```
        if (event.data == YT.PlayerState.ENDED) {          
          console.log("ENDED - Evviva ^_^");
          let pcl = document.getElementById('player-commands-list'); // prendiamo il tag <ul id="player-commands-list"></ul>
          let li = document.createElement('li'); // creiamo un nuovo tag <li></li>
          li.textContent = 'ENDED'; // inseriamo il valore tra il tag <li></li>
          pcl.insertBefore(li, pcl.firstElementChild); // insert a new node before the first list item
          let playerDiv = document.getElementById('player') // prendiamo il tag con id="player"
          playerDiv.style.display = "none" //Nascondiamo il player
          let formTest = document.getElementById('test-form') // prendiamo il tag con id="test-form"
          formTest.style.display = "block" //Mostriamo il form
        }
```

[tutto il codice](#56-04-01_6all)

Abbiamo completato a livello di mockup. Ora non ci resta che implementarlo.

