# Aggiungiamo i campi per indirizzi e contatti

Questo capitolo sarebbe parte integrante del precedente. Lo abbiamo messo successivamente per separare didatticamente i concetti e per allenarci ad aggiungere campi in un secondo momento.
Infatti anche nella realtà questa parte è stata associata successivamente quando ci si è accorti da tests di usabilità che era più semplice ed utile all'utente avere le informazioni di indirizzo e dei contatti nell'associazione tra persona e azienda. (Nel caso di contatti o indirizzi personali si pùò creare l'azienda "Private")



## Apriamo il branch "company_person_maps seeds addresses and contacts"

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout -b cpmsac
~~~~~~~~




## Aggiungiamo i campi indirizzo e contatti

1 solo indirizzo
  - building : edificio (stabilimento, ufficio, casa)
  - full_address : (indirizzo completo)
  - address_tag : (Provincia per trasferte o visite clienti in zona)
  - latitude :
  - longitude :
1 solo campo ruolo/competenze per ogni azienda condivisa (tieni presente che si può condividere anche più volte la stessa azienda) 
  - job_title : role scritto su businees card (text255)
  - job_title_useful : role utile per noi (es: tecnico, acquisti, PM, ..., tecnico CTNR, tecnico Airflow, ...). Utile perché legato a prodotti che vendiamo o ad aree che ci interessano.
N contatti rigidi
  - mobile : Cellulare
  - phone : telefono fisso
  - direct : altro numero eventuale (puoi mettere il centralino nel caso di building azienda) 
  - fax :
  - email : (con tag HTML5 specifico pe emails)
  - note : (campo memo per altre info. Es.: Skype, Whatsapp, irc, pager, FB, Snapchat, instagram, viber, ...)

(Il campo full_address ha max 175 characters. Max 35 per linea e max 5 linee  http://webarchive.nationalarchives.gov.uk/+/http://www.cabinetoffice.gov.uk/media/254290/GDS%20Catalogue%20Vol%202.pdf)

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration AddAddressesAndContactsToCompanyPersonMaps building:string full_address:string address_tag:string latitude:decimal longitude:decimal job_title:string job_title_useful:string mobile:string phone:string direct:string fax:string email:string note:text 
~~~~~~~~

questo mi crea il migration:

{title=".../db/migrate/xxx_create_contacts.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddAddressesAndContactsToCompanyPersonMaps < ActiveRecord::Migration[5.0]
  def change
    add_column :company_person_maps, :building, :string
    add_column :company_person_maps, :full_address, :string
    add_column :company_person_maps, :address_tag, :string
    add_column :company_person_maps, :latitude, :decimal
    add_column :company_person_maps, :longitude, :decimal
    add_column :company_person_maps, :job_title, :string
    add_column :company_person_maps, :job_title_useful, :string
    add_column :company_person_maps, :mobile, :string
    add_column :company_person_maps, :phone, :string
    add_column :company_person_maps, :direct, :string
    add_column :company_person_maps, :fax, :string
    add_column :company_person_maps, :email, :string
    add_column :company_person_maps, :note, :text
  end
end
~~~~~~~~


Effettuiamo il migrate del database per creare la tabella "company_person_maps" sul database

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add columns for address and for contacts to company_person_maps"
~~~~~~~~




## I18n - dynamic

Aggiungiamo nuovi campi alla tabella tradotta già creata nel capitolo precedente. Il model company_person_map ha già l'attributo translate nella sezione **# == Attributes**. Ci aggiungiamo però i nuovi campi che vogliamo tradotti. Di tutti quelli aggiunti gli unici utili tradurre sono **:building, :job_title**.

{title=".../app/models/company_person_map.rb", lang=ruby, line-numbers=on, starting-line-number=7}
~~~~~~~~
  # ==== globalize required
  translates :summary, :building, :job_title, :fallbacks_for_empty_translations => true
~~~~~~~~

Per aggiungerli alla tabella company_person_maps_translations, cha abbiamo creato nel capitolo precedente, useremo il motodo di globalize **.add_translation_fields!**. Prima di tutto creiamoci un nuovo migration.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails g migration add_to_company_person_maps_translations
~~~~~~~~


Lavoriamo sulla migration usando il metodo .create_translation_table sul model "Company" e passando i nomi dei campi che devono avere la traduzione.

{title=".../db/migrate/xxx_add_to_company_person_maps_translations.rb", lang=ruby, line-numbers=on, starting-line-number=1}
~~~~~~~~
class AddToCompanyPersonMapsTranslations < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      
      dir.up do
        CompanyPersonMap.add_translation_fields!({
          building: :string,
          job_title: :string
        },{
          migrate_data: true,
          remove_source_columns: true
        })
      end

      dir.down do
        remove_column :company_person_maps, :building
        remove_column :company_person_maps, :job_title
      end
    end
  end
end
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rake db:migrate
~~~~~~~~


E' fondamentale cancellare dalla tabella principale **company_person_maps** i nuovi campi con traduzione, ossia **:building, :job_title**.
L'opzione ** remove_source_columns: true ** ci risparmia di farlo manualmente.


{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add CompanyPersonMap I18n"
~~~~~~~~




## seed

Abbiamo già mostrato come popolare la tabella in automatico nel capitolo precedente. Per i nuovi campi aggiunti eseguiremo solo la procedura manuale descritta nel prossimo paragrafo.




## Popoliamo manualmente la tabella

(DA FARE -- AL MOMENTO SALTO QUESTO PARAGRAFO E MI DEDICO DIRETTAMENTE ALLE VIEWS)

Usiamo la console di rails per popolare la tabella del database.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ rails c
irb> CompanyPersonMap.new(person_id: 1, company_id: 1, summary: "purchase department", locale: :en).save
irb> CompanyPersonMap.last.update(summary: "ufficio acquisti", locale: :it)
~~~~~~~~


aggiungiamo una seconda ed una terza azienda alla prima persona giocando un po' con la console...

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ sudo service postgresql start
$ rails c
irb> CompanyPersonMap.all
irb> Company.find 1
irb> Company.find 2
irb> Company.find 3
irb> Company.find 4
irb> Person.find 1
irb> Person.find 2
irb> I18n.locale
irb> CompanyPersonMap.new(company_id: 2, person_id: 1, summary: "consulente").save
irb> cpm = CompanyPersonMap.last
irb> cpm.update(summary: "consulent", locale: :en)
irb> cpm.summary
irb> I18n.locale
irb> I18n.locale = :it
irb> cpm.summary
irb> p = Person.find(1)
irb> p.company_person_maps
irb> p.company_person_maps[0]
irb> p.company_person_maps.new(company_id: 3, summary: "ufficio tecnico").save
irb> p.company_person_maps[0]
irb> p.company_person_maps[0].summary
irb> p.company_person_maps[0].company
irb> p.company_person_maps[0].company.name
irb> p.company_person_maps[1].company
irb> p.company_person_maps[1].company.fname
   ATTENZIONE! potrebbe non funzionare perché manca un "refresh" nel database. Si può forzare un refresh ma non mi ricordo come. :( In alternativa esci dalla console e rientra.

irb> p.company_person_maps[0].update(company_id: 4)
  Cambio l'azienda nel primo collegamento.

irb> c = Company.find(1)
irb> c.company_person_maps
irb> c.company_person_maps.new(person_id: 2, summary: "employee").save

irb> exit
~~~~~~~~

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git add -A
$ git commit -m "add seed company_person_maps"
~~~~~~~~

I> Questo git commit è solo per lasciare un commento perché le modifiche fatte sul database non sono passate tramite git.




## Publichiamo su heroku

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push heroku cpmsac:master
$ heroku run rake db:migrate
~~~~~~~~

I> Lato produzione su heroku c'è un database indipendente da quello di sviluppo quindi risulta vuoto.

per popolare il database di heroku basta aprire la console con il comando:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ heroku run rails c
~~~~~~~~

E rieseguire i passi già fatti nel paragrafo precedentemente dove abbiamo popolato manualmente la tabella.




## Chiudiamo il branch

se abbiamo finito le modifiche e va tutto bene:

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git merge cpms
$ git branch -d cpms
~~~~~~~~




## Facciamo un backup su Github

Dal nostro branch master di Git facciamo un backup di tutta l'applicazione sulla repository remota Github.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git push origin master
~~~~~~~~