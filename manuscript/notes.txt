Impostare che se l'utente loggato non è amministratore nell'azione index di users_controller facciamo un redirect all'azione show.
Da vedere se il redirect fa in tempo o se è bypassata dall'autorizzazione di pundit.

--
www.leanpub.com
https://leanpub.com/leanpubabrandnewcms/preview

https://leanpub.com/help/getting_started_sync_dropbox
https://leanpub.com/help/manual

https://leanpub.com/markua/read
http://markua.com/

---
http://pygments.org/demo/   ->  vedi il codice nel menu a cascata

.html.erb   -> lang=HTML+Mako
      .rb   -> lang=ruby
      .yml  -> lang=yaml
      .coffe -> lang=CoffeeScript
      .scss  -> lang=ruby
      .js   -> lang=JavaScript

---
$ sudo service postgresql start
$ rails s

$ rails s -b $IP -p $PORT

https://rebisworld3-flaviobordonidev.c9users.io/

---
http://placehold.it/850x1000


---

views/posts/show
—
<%= @post.user.email.split(‘@‘)[0].capitalize %>
—

#@post.user.email —> flavio@test.abc

#@post.user.email.split(‘@‘) —> [flavio, test.abc]

#@post.user.email.split(‘@‘)[0] —> flavio

#@post.user.email.split(‘@‘)[0].capitalize —> Flavio


**************

views/models/user.rb
—
def username
	return self.email.split(‘@‘)[0].capitalize
end
—

views/posts/show
—
<%= @post.user.username %>
—

---
Sul Gemfile per mettere più gruppi su un'unica riga si usa un array []. Es:

# Call 'byebug' anywhere in the code to stop execution and get a debugger console
gem 'byebug', group: [:development, :test]

---
Google maps:
http://stackoverflow.com/questions/38186827/google-maps-autocomplete-js-is-working-on-localhost-but-not-on-heroku
just goto google console, enable the "Google Places API Web Service"

http://ubilabs.github.io/geocomplete/

---
---
Creazione Nuove Utente 

L'inserimento di un nuovo utente va effettuato tramite rails console con i comandi che effettuarenno l'append del nuovo record direttamente sulla tabella users. Si possono usare entrambi i metodi portati ad esempio qui di seguito: 

$ sudo service postgresql start

$ rails c 

Metodo 1
> User.new({email: 'donazioni@duomomilano.it', password: 'D*****@2017', password_confirmation: 'D*****@2017'}).save

Metodo 2
> u = User.new({email: 'donazioni@duomomilano.it', password: 'D*****@2017', password_confirmation: 'D*****@2017'})
> u.save

Una volta creato il nuovo record, per aggiungerlo nel menù a cascata dell'home page e permettere all'amministratore di vedere tutti i kiosk inseriti, e filtrare le transazioni relative, bisogna inserire il seguente blocco comandi nel file homepage_controller.rb, come di seguito mostrato:

# Save the Children: 2
    when "user@mail.com"
      @company_name = "Save the Children"
      @kiosks = Company.find(2).kiosks
      
Come dopo ogni aggiunta o cambio di codice, dobbiamo caricare le modifiche su Git e poi inviarle in produzione su Heroku.      
      
---
Angle esempio online 

https://angle-on-rails.herokuapp.com/forms/upload

---
Per forzare un push usare -f

$ git push -f heroku nomebranch:master

---
Updating Git remotes
è possibile cambiare manualmente usando il CLI l'app di heroku.
~~~~~~~~
$ git remote rm heroku
$ heroku git:remote -a newname 
~~~~~~~~

---
Quando apri un workspace condiviso il link "Share" in alto a destra non c'è più.
Allora una volta fatto partire il server con ** $ rails s -b $IP -p $PORT **
L'url da usare ha la struttura https://<nomeworkspace>-<nomeutentec9>.c9users.io
es:
    https://donamat5-bobdesa64.c9users.io
    https://ang5-donamat-flaviobordonidev.c9users.io

Un modo per prenderlo è lanciare "Preview -> Preview Running Application" e copiarsi l'URL che viene usato in una finestra locale.

---
Verfichiamo import su heroku
Come primo passo verifichiamo che la cartella tmp non ha file .csv già caricati

$ heroku run ls tmp

Dopodiché ci colleghiamo alla console rails su heroku

$ heroku run rails c


bobdesa64:~/workspace/donamat (ks) $ heroku run ls tmp
Running ls tmp on ⬢ limitless-chamber-62677... up, run.3110
cache  heroku-buildpack-release-step.yml
bobdesa64:~/workspace/donamat (ks) $ heroku run rails c
Running rails c on ⬢ limitless-chamber-62677... up, run.5745
Loading production environment (Rails 5.0.0.1)
irb(main):001:0> ftp = Net::FTP.new
=> #<Net::FTP:0x007f88c1039340 @mon_owner=nil, @mon_count=0, @mon_mutex=#<Thread::Mutex:0x007f88c10392a0>, @binary=true, @passive=true, @debug_mode=false, @resume=false, @sock=#<Net::FTP::NullSocket:0x007f88c1039278>, @logged_in=false, @open_timeout=nil, @read_timeout=60>
irb(main):002:0> ftp.connect("romasportface.com",21)
=> nil
irb(main):003:0> ftp.login("rmsport02@romasportface.com","166$}ItcoLr")
=> true
irb(main):004:0> ftp.passive = true
=> true
irb(main):005:0> ftp.getbinaryfile("MRDP1-transactions.txt", "tmp/MRDP1-transactions.txt")
=> nil
irb(main):006:0> ftp.close
=> nil
irb(main):007:0> exit
bobdesa64:~/workspace/donamat (ks) $ heroku run ls tmp
Running ls tmp on ⬢ limitless-chamber-62677... up, run.3183
cache  heroku-buildpack-release-step.yml
bobdesa64:~/workspace/donamat (ks) $ 

Non ci ha copiato il file. (forse lo ha copiato e quando il processo ha terminato lo ha cancellato)

http://stackoverflow.com/questions/5542916/ftp-to-rails-app-hosted-on-heroku

Heroku does not support your application receiving FTP. you can store files in #{Rails.root}/tmp/. However, these files are only available to the process that created them. When the process completes, the files are purged. 


---
You can use library links below:

http://www.ruby-doc.org/stdlib-1.9.3/libdoc/net/ftp/rdoc/index.html

and you can use EventMachine https://github.com/schleyfox/em-ftp-client.

require 'net/ftp'
ftp = Net::FTP.new
ftp.connect("myhostname.com",21)
ftp.login("myuser","my password")
ftp.chdir("/mydirectory")
ftp.passive = true
ftp.getbinaryfile("mysourcefile", "mydestfile")


---
Facciamo un "pull request" su github per fare il merge e chiudere il branch.

{title="terminal", lang=bash, line-numbers=off}
~~~~~~~~
$ git checkout master
$ git pull origin master
$ git merge homepage
$ git push origin master
$ git branch -d homepage
$ git push origin :homepage
~~~~~~~~


---
TODO per DONAMAT
-- arrotondamento (così modifico le tabelle ed importo anche la data e l'ora)
-- non considerare in import i dati duplicati dalla macchina chiosco (perché con aggiornamenti java sta creando randomicamente dei record duplicati)
-- data e ora (la visualizzo nelle views)
-- buona punteggiatura (ultima formalità)

-- Gestione utenti più evoluta / Gestione di un numero di utenti superiore a 20.
-- Esportazione tabella in csv o excel (con finestra temporale)


---
STAMPARE IL LIBRO con LULU.com
https://www.davidebarranca.com/2019/04/printing-leanpub-books-on-lulu/

---
CURSORE MULTIPLO su UBUNTU

Hold down CTRL+ALT and click in multiple locations
Hold down ALT+SHIFT, click the mouse, and drag the cursor up or down in the editor
Through the menu bar at Edit > Selection > Multiple Selections

---
Bella spiegazione di attr_accessor = attr_read (getter) + attr_write (setter)

https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby



---
https://coderwall.com/p/1dsjoq/quickly-re-run-rails-migrations

rake db:migrate:redo


for migration with schema ID 20100421175455 the command would be:

rake db:migrate:redo VERSION=20100421175455
Reference: http://stackoverflow.com/a/5600310


---
Organizzare i models
https://www.zmwolski.com/Organizing-Ruby-on-Rails-Models

  # == Constants ============================================================

  # == Attributes ===========================================================
  
  # == Extensions ===========================================================

  # == Relationships ========================================================

  # == Validations ==========================================================

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================

  # == Instance Methods =====================================================

Esempio:

  # == Constants ============================================================
  
  GENDERS = [[‘Male’, ‘m’], [‘Female’, ’f’]].freeze

  # == Attributes ===========================================================
  
  # ATTRIBUTES NOT MAPPED IN DATABASE (getter and setter methods)

  # paperclip ------------------------------------------------------------------
  attr_accessor :remove_logo
  #-----------------------------------------------------------------------------

  # globalize required ---------------------------------------------------------
  translates :sector, :memo, :fallbacks_for_empty_translations => true
  #-----------------------------------------------------------------------------

  # == Extensions ===========================================================

  # paperclip required ---------------------------------------------------------
  has_attached_file :logo, styles: { thumb: ["64x64!", :png] }
  #-----------------------------------------------------------------------------

  has_attached_file :avatar, styles: {
    square_100: ‘100x100#’,
    square_300: ‘300x300#’
  }

  # == Relationships ========================================================
    # associations
    
  has_many :documents

  # == Validations ==========================================================
  
  validates: email, presence:     true,
                    uniqueness:   true,
                    email_format: true

  # == Scopes ===============================================================

  # == Callbacks ============================================================

  # == Class Methods ========================================================
  
  def self.for_select
    all.collect{|u| [“#{u.name} (#{u.email})”, u.id]}
  end

  # == Instance Methods =====================================================

---
i18n statica con "locales"

# app/views/messages/_form.html.erb
-----------------------------------
<%= form_for :message do "f| %>
  <%= f.label :title %>
  <%= f.text_field :title %>
  <%= f.label :name %>
  <%= f.input :name, placeholder: true %>
  <%= f.submit %>
<% end %>


# app/views/posts/_form.html.erb
-----------------------------------
<%= form_for :post do "f| %>
  <%= f.label :title %>
  <%= f.text_field :title %>
  <%= f.label :name %>
  <%= f.input :name, placeholder: true %>
  <%= f.submit %>
<% end %>

en:
  helpers:
    label:
      message:
        name: "Name label"
      post:
        name: "Name label of post"
    placeholder:
      message:
        name: "Your placeholder text here"
      post:
        name: "Your placeholder text here"
    submit:
      message:
        create: "Create a new great messagge!"
        update: "Save changes to this message."
      post:
        create: "Create a new lovelly post!"
        update: "Yes, save changes to this post."  
  messages:
    update:
      notice: "Message was successfully updated."
      alert: "Unable to update message."
  posts:
    update:
      notice: "Post was successfully updated."
      alert: "Unable to update post."


If the helpers: path is not available, i18n will fallback to the activerecord: path. Very clear when using the excellent ** i18n-debug ** gem.
https://github.com/fphilipe/i18n-debug

https://mikerogers.io/2016/01/10/i18n-rails-internationalisation-i18n-cheatsheet.html

https://webuild.envato.com/blog/how-to-organise-i18n-without-losing-your-translation-not-found/

https://stackoverflow.com/questions/16977371/submit-button-helper-with-i18n-t

https://stackoverflow.com/questions/36810203/list-of-available-i18n-translations-for-helpers-in-ruby-on-rails-4-and-simple


---

---
‘unless … else’ is a terrible Ruby construct.

--
https://robots.thoughtbot.com/any-empty

<% if @posts.empty? %> vuoto <% else %> pieno <% end %> --> Il modo più elegante
<% if @posts.any? %> pieno  <% else %> vuoto <% end %> --> Questa è incorretta perché @posts.any? non è il contrario di @posts.empty?
<% if ! @posts.empty? -%> pieno  <% else %> vuoto <% end %> --> Questo è il modo corretto di farlo

[1, 2].any? => true
[nil, nil].any? => false

[1, 2].empty? => false
[nil, nil].empty? => false

---
https://railsless.blogspot.it/2011/08/difference-between-nil-empty-blank.html
Difference between .nil?, .empty?, .blank?, .present?

.nil? ed .empty? sono funzioni ruby presenti in Rails. Invece .blank? e .present? sono solo rails e sono da preferire perché "normalizzano" le risposte come vedi dal seguente schema creato direttamente sulla ** $ rails c **

nil.nil?    # => true
[].nil?     # => false
"".nil?     # => false
"  ".nil?   # => false
false.nil?  # => false

nil.empty?    # => Undefined method
[].empty?     # => true
"".empty?     # => true
"  ".empty?   # => false
false.empty?  # => Undefined method

nil.blank?    # => true
[].blank?     # => true
"".blank?     # => true
"   ".blank?  # => true
false.blank?  # => true

nil.present?    # => false
[].present?     # => false
"".present?     # => false
"  ".present?   # => false
false.present?  # => false

.nil?      For each object. Only if it is nil
.empty?    Only for the objects: string, array, hash. If the object is empty
.blank?    For each object. If the object is nil or empty
.present?  The opposite of .blank? 

present? è la negazione di blank?:

address.present? == !address.blank?   # => true
<% if !params[:locale].present? %> == <% if params[:locale].blank? %>


---
https://www.linkedin.com/pulse/12-gems-every-rails-developer-should-know-2016-stayman-hou
1. devise - Authentication
2. CanCanCan - Authorization
3. Kaminari - Pagination
4. Ransack - Scoping/Searching/Filtering
5. twitter-bootstrap-rails - Frontend
6. CarrierWave - User Generated Files
7. Searchkick - Intelligent Searching (Nature Language)
8. Metamagic - SEO
9. rails_config - Configuration
10. Sequel - ORM (ActiveRecord Alternative)
11. RuboCop - Static Code Analyzer, Code Smell
12. Brakeman - Static Code Analyzer, Security
